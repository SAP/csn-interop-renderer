(self.webpackChunk_sap_csn_interop_renderer_website=self.webpackChunk_sap_csn_interop_renderer_website||[]).push([[399],{1399:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Draft: () => (/* reexport */ Draft),\n  Draft04: () => (/* reexport */ Draft04),\n  Draft06: () => (/* reexport */ Draft06),\n  Draft07: () => (/* reexport */ Draft07),\n  Draft2019: () => (/* reexport */ Draft2019),\n  JsonEditor: () => (/* reexport */ JsonEditor),\n  config: () => (/* binding */ config),\n  createCustomError: () => (/* reexport */ createCustomError),\n  createError: () => (/* reexport */ createError),\n  createNode: () => (/* reexport */ createNode),\n  draft04Config: () => (/* reexport */ draft04Config),\n  draft06Config: () => (/* reexport */ draft06Config),\n  draft07Config: () => (/* reexport */ draft07Config),\n  draft2019Config: () => (/* reexport */ draft2019Config),\n  draftJsonEditorConfig: () => (/* reexport */ draftJsonEditorConfig),\n  getTypeOf: () => (/* reexport */ getTypeOf),\n  isDynamicSchema: () => (/* reexport */ isDynamicSchema),\n  isJsonError: () => (/* reexport */ isJsonError),\n  isSchemaNode: () => (/* reexport */ isSchemaNode),\n  mergeSchema: () => (/* reexport */ mergeSchema),\n  reduceSchema: () => (/* reexport */ reduceSchema),\n  render: () => (/* reexport */ render),\n  resolveAllOf: () => (/* reexport */ resolveAllOf),\n  resolveDynamicSchema: () => (/* reexport */ resolveDynamicSchema),\n  resolveOneOf: () => (/* reexport */ resolveOneOf),\n  resolveOneOfFuzzy: () => (/* reexport */ resolveOneOfFuzzy),\n  resolveRef: () => (/* reexport */ resolveRef_resolveRef),\n  resolveRefStrict: () => (/* reexport */ resolveRef_strict_resolveRef),\n  settings: () => (/* reexport */ settings),\n  validateAsync: () => (/* reexport */ validateAsync)\n});\n\n;// ./node_modules/json-schema-library/dist/module/lib/config/strings.js\n/* eslint max-len: 0 */\n/* harmony default export */ const strings = ({\n    // validation errors\n    AdditionalItemsError: "Array at `{{pointer}}` may not have an additional item `{{key}}`",\n    AdditionalPropertiesError: "Additional property `{{property}}` on `{{pointer}}` does not match schema `{{schema}}`",\n    AllOfError: "Value `{{value}}` at `{{pointer}}` does not match schema of `{{allOf}}`",\n    AnyOfError: "Value `{{value}}` at `{{pointer}}` does not match any schema of `{{anyOf}}`",\n    ConstError: "Expected value at `{{pointer}}` to be `{{expected}}`, but value given is `{{value}}`",\n    containsAnyError: "The array at `{{pointer}}` must contain at least one item",\n    ContainsArrayError: "The property at `{{pointer}}` must not be an array",\n    ContainsError: "The array at `{{pointer}}` must contain an element that matches `{{schema}}`",\n    ContainsMinError: "The array at `{{pointer}}` contains {{delta}} too few items matching `{{schema}}`",\n    ContainsMaxError: "The array at `{{pointer}}` contains {{delta}} too many items matching `{{schema}}`",\n    EnumError: "Expected given value `{{value}}` in `{{pointer}}` to be one of `{{values}}`",\n    ForbiddenPropertyError: "Property name `{{property}}` at `{{pointer}}` is not allowed",\n    FormatDateError: "Value `{{value}}` at `{{pointer}}` is not a valid date",\n    FormatDateTimeError: "Value `{{value}}` at `{{pointer}}` is not a valid date-time",\n    FormatDurationError: "Value `{{value}}` at `{{pointer}}` is not a valid duration",\n    FormatEmailError: "Value `{{value}}` at `{{pointer}}` is not a valid email",\n    FormatHostnameError: "Value `{{value}}` at `{{pointer}}` is not a valid hostname",\n    FormatIPV4Error: "Value `{{value}}` at `{{pointer}}` is not a valid IPv4 address",\n    FormatIPV4LeadingZeroError: "IPv4 addresses starting with zero are invalid, since they are interpreted as octals",\n    FormatIPV6Error: "Value `{{value}}` at `{{pointer}}` is not a valid IPv6 address",\n    FormatIPV6LeadingZeroError: "IPv6 addresses starting with zero are invalid, since they are interpreted as octals",\n    FormatJsonPointerError: "Value `{{value}}` at `{{pointer}}` is not a valid json-pointer",\n    FormatRegExError: "Value `{{value}}` at `{{pointer}}` is not a valid regular expression",\n    FormatTimeError: "Value `{{value}}` at `{{pointer}}` is not a valid time",\n    FormatURIError: "Value `{{value}}` at `{{pointer}}` is not a valid uri",\n    FormatURIReferenceError: "Value `{{value}}` at `{{pointer}}` is not a valid uri-reference",\n    FormatURITemplateError: "Value `{{value}}` at `{{pointer}}` is not a valid uri-template",\n    FormatURLError: "Value `{{value}}` at `{{pointer}}` is not a valid url",\n    FormatUUIDError: "Value `{{value}}` at `{{pointer}}` is not a valid uuid",\n    InvalidDataError: "No value may be specified in `{{pointer}}`",\n    InvalidPropertyNameError: "Invalid property name `{{property}}` at `{{pointer}}`",\n    MaximumError: "Value in `{{pointer}}` is `{{length}}`, but should be `{{maximum}}` at maximum",\n    MaxItemsError: "Too many items in `{{pointer}}`, should be `{{maximum}}` at most, but got `{{length}}`",\n    MaxLengthError: "Value `{{pointer}}` should have a maximum length of `{{maxLength}}`, but got `{{length}}`.",\n    MaxPropertiesError: "Too many properties in `{{pointer}}`, should be `{{maxProperties}}` at most, but got `{{length}}`",\n    MinimumError: "Value in `{{pointer}}` is `{{length}}`, but should be `{{minimum}}` at minimum",\n    MinItemsError: "Too few items in `{{pointer}}`, should be at least `{{minItems}}`, but got `{{length}}`",\n    MinItemsOneError: "At least one item is required in `{{pointer}}`",\n    MinLengthError: "Value `{{pointer}}` should have a minimum length of `{{minLength}}`, but got `{{length}}`.",\n    MinLengthOneError: "A value is required in `{{pointer}}`",\n    MinPropertiesError: "Too few properties in `{{pointer}}`, should be at least `{{minProperties}}`, but got `{{length}}`",\n    MissingDependencyError: "The required propery \'{{missingProperty}}\' in `{{pointer}}` is missing",\n    MissingOneOfPropertyError: "Value at `{{pointer}}` property: `{{property}}`",\n    MultipleOfError: "Expected `{{value}}` in `{{pointer}}` to be multiple of `{{multipleOf}}`",\n    MultipleOneOfError: "Value `{{value}}` should not match multiple schemas in oneOf `{{matches}}`",\n    NoAdditionalPropertiesError: "Additional property `{{property}}` in `{{pointer}}` is not allowed",\n    NotError: "Value `{{value}}` at pointer should not match schema `{{not}}`",\n    OneOfError: "Value `{{value}}` in `{{pointer}}` does not match any given oneof schema",\n    OneOfPropertyError: "Failed finding a matching oneOfProperty schema in `{{pointer}}` where `{{property}}` matches `{{value}}`",\n    PatternError: "Value in `{{pointer}}` should match `{{description}}`, but received `{{received}}`",\n    PatternPropertiesError: "Property `{{key}}` does not match any patterns in `{{pointer}}`. Valid patterns are: {{patterns}}",\n    RequiredPropertyError: "The required property `{{key}}` is missing at `{{pointer}}`",\n    SchemaWarning: "Failed retrieving a schema from \'{{pointer}}\' to key \'{{key}}\'",\n    TypeError: "Expected `{{value}}` ({{received}}) in `{{pointer}}` to be of type `{{expected}}`",\n    UndefinedValueError: "Value must not be undefined in `{{pointer}}`",\n    UnevaluatedPropertyError: "Invalid unevaluated property `{{pointer}}`",\n    UnevaluatedItemsError: "Invalid unevaluated item `{{pointer}}`",\n    UniqueItemsError: "Items in array must be unique. Value `{{value}}` in `{{pointer}}` is a duplicate of {{duplicatePointer}}.",\n    UnknownPropertyError: "Could not find a valid schema for property `{{pointer}}` within object",\n    ValueNotEmptyError: "A value for `{{property}}` is required at `{{pointer}}`"\n});\n\n;// ./node_modules/json-schema-library/dist/module/lib/getTypeOf.js\nconst getTypeOf_toString = Object.prototype.toString;\nfunction getTypeOf(value) {\n    const type = getTypeOf_toString\n        .call(value)\n        .match(/\\s([^\\]]+)\\]/)\n        .pop()\n        .toLowerCase();\n    if (type === "file") {\n        return "object";\n    }\n    return type;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/render.js\n\nconst OBJECT_TYPE = "object";\nconst ARRAY_TYPE = "array";\n/**\n * Renders data into a string by {{variables}}.\n * Given a template string, removes all {{property}} substrings and replaces them with the property in the given data\n *\n * @param template - template string containing variables in handelbars/mustache style\n * @param data - flat object containing properties matching variables\n * @return rendered string\n */\nfunction render(template, data = {}) {\n    return template.replace(/\\{\\{\\w+\\}\\}/g, (match) => {\n        const key = match.replace(/[{}]/g, "");\n        const variable = data[key];\n        const variableType = getTypeOf(variable);\n        if (variableType === OBJECT_TYPE || variableType === ARRAY_TYPE) {\n            return JSON.stringify(variable);\n        }\n        return variable;\n    });\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/__.js\n\n\n/**\n * Renders the given string as defined in __@see config/strings.js__\n * @param keyword\n * @param data - template data\n * @param fallback - fallback template\n * @return resulting string\n */\nfunction __(keyword, data, fallback = keyword) {\n    var _a;\n    const template = (_a = strings[keyword]) !== null && _a !== void 0 ? _a : fallback;\n    return render(template, data);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/createCustomError.js\n\nfunction dashCase(text) {\n    return text.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();\n}\nfunction createError(name, data) {\n    return {\n        type: "error",\n        name,\n        code: dashCase(name),\n        message: __(name, data),\n        data\n    };\n}\n/**\n * Creates a custom Error Creator. Its messages are defined by strings-object @see config/strings.ts\n *\n * @param name - id of error (camelcased)\n * @return error constructor function\n */\nfunction createCustomError(name) {\n    return createError.bind(null, name);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/flattenArray.js\nfunction flattenArray(list, result = []) {\n    for (let i = 0; i < list.length; i += 1) {\n        const item = list[i];\n        if (Array.isArray(item)) {\n            flattenArray(item, result);\n        }\n        else {\n            result.push(item);\n        }\n    }\n    return result;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/config/settings.js\n/* harmony default export */ const settings = ({\n    DECLARATOR_ONEOF: "oneOfProperty",\n    /** set to false to not set __oneOfIndex on returned schema */\n    EXPOSE_ONE_OF_INDEX: true,\n    GET_TEMPLATE_RECURSION_LIMIT: 1,\n    propertyBlacklist: ["_id"],\n    templateDefaultOptions: {\n        addOptionalProps: false,\n        removeInvalidData: false,\n        extendDefaults: true\n    }\n});\n\n;// ./node_modules/json-schema-library/dist/module/lib/types.js\n/**\n * ts type guard for json error\n * @returns true if passed type is a JsonError\n */\nfunction isJsonError(error) {\n    return (error === null || error === void 0 ? void 0 : error.type) === "error";\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/filter.js\n\nfunction isPromise(obj) {\n    return obj instanceof Promise;\n}\nfunction errorOrPromise(error) {\n    return isJsonError(error) || isPromise(error);\n}\nfunction errorsOnly(error) {\n    return isJsonError(error);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/isObject.js\n\nfunction isObject(v) {\n    return getTypeOf(v) === "object";\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/features/oneOf.js\n/**\n * @draft-04\n */\n\n\n\n\n\nconst { DECLARATOR_ONEOF, EXPOSE_ONE_OF_INDEX } = settings;\nfunction setOneOfOrigin(schema, index) {\n    if (EXPOSE_ONE_OF_INDEX && isObject(schema)) {\n        schema.__oneOfIndex = index;\n    }\n}\n/**\n * Selects and returns a oneOf schema for the given data\n *\n * @param draft - validator\n * @param data\n * @param schema - current json schema containing property oneOf\n * @param pointer - json pointer to data\n * @return oneOf schema or an error\n */\nfunction resolveOneOf(node, data) {\n    const { schema, draft, pointer } = node;\n    // !keyword: oneOfProperty\n    // an additional <DECLARATOR_ONEOF> (default `oneOfProperty`) on the schema will exactly determine the\n    // oneOf value (if set in data)\n    // @fixme\n    // abort if no data is given an DECLARATOR_ONEOF is set (used by getChildSchemaSelection)\n    // this case (data != null) should not be necessary\n    if (data != null && schema[DECLARATOR_ONEOF]) {\n        const errors = [];\n        const oneOfProperty = schema[DECLARATOR_ONEOF];\n        const oneOfValue = data[schema[DECLARATOR_ONEOF]];\n        if (oneOfValue === undefined) {\n            return draft.errors.missingOneOfPropertyError({\n                property: oneOfProperty,\n                pointer,\n                schema,\n                value: data\n            });\n        }\n        for (let i = 0; i < schema.oneOf.length; i += 1) {\n            const oneNode = node.next(schema.oneOf[i]).resolveRef();\n            const resultNode = draft.step(oneNode, oneOfProperty, data);\n            if (isJsonError(resultNode)) {\n                return resultNode;\n            }\n            let result = flattenArray(draft.validate(resultNode, oneOfValue));\n            result = result.filter(errorOrPromise);\n            if (result.length > 0) {\n                errors.push(...result);\n            }\n            else {\n                // @evaluation-info\n                setOneOfOrigin(oneNode.schema, i);\n                return resultNode.next(oneNode.schema);\n            }\n        }\n        return draft.errors.oneOfPropertyError({\n            property: oneOfProperty,\n            value: oneOfValue,\n            pointer,\n            schema,\n            errors\n        });\n    }\n    const matches = [];\n    const errors = [];\n    for (let i = 0; i < schema.oneOf.length; i += 1) {\n        const oneNode = draft.resolveRef(node.next(schema.oneOf[i]));\n        let result = flattenArray(draft.validate(oneNode, data));\n        result = result.filter(errorOrPromise);\n        if (result.length > 0) {\n            errors.push(...result);\n        }\n        else {\n            matches.push({ index: i, schema: oneNode.schema });\n        }\n    }\n    if (matches.length === 1) {\n        // @evaluation-info\n        setOneOfOrigin(matches[0].schema, matches[0].index);\n        return node.next(matches[0].schema);\n    }\n    if (matches.length > 1) {\n        return draft.errors.multipleOneOfError({\n            value: data,\n            pointer,\n            schema,\n            matches\n        });\n    }\n    return draft.errors.oneOfError({\n        value: JSON.stringify(data),\n        pointer,\n        schema,\n        oneOf: schema.oneOf,\n        errors\n    });\n}\n/**\n * Returns a ranking for the data and given schema\n *\n * @param draft\n * @param - json schema type: object\n * @param data\n * @param [pointer]\n * @return ranking value (higher is better)\n */\nfunction fuzzyObjectValue(node, data) {\n    const { draft, schema, pointer } = node;\n    if (data == null || schema.properties == null) {\n        return -1;\n    }\n    let value = 0;\n    const keys = Object.keys(schema.properties);\n    for (let i = 0; i < keys.length; i += 1) {\n        const key = keys[i];\n        if (data[key]) {\n            if (draft.isValid(data[key], schema.properties[key], pointer)) {\n                value += 1;\n            }\n        }\n    }\n    return value;\n}\n/**\n * Selects and returns a oneOf schema for the given data\n *\n * @param draft\n * @param data\n * @param [schema] - current json schema containing property oneOf\n * @param [pointer] - json pointer to data\n * @return oneOf schema or an error\n */\nfunction resolveOneOfFuzzy(node, data) {\n    const { schema, pointer, draft } = node;\n    if (!Array.isArray(schema.oneOf)) {\n        throw new Error("not a oneof schema");\n        return node;\n    }\n    // !keyword: oneOfProperty\n    // an additional <DECLARATOR_ONEOF> (default `oneOfProperty`) on the schema will exactly determine the\n    // oneOf value (if set in data)\n    // @fixme\n    // abort if no data is given an DECLARATOR_ONEOF is set (used by getChildSchemaSelection)\n    // this case (data != null) should not be necessary\n    if (data != null && schema[DECLARATOR_ONEOF]) {\n        const errors = [];\n        const oneOfProperty = schema[DECLARATOR_ONEOF];\n        const oneOfValue = data[schema[DECLARATOR_ONEOF]];\n        if (oneOfValue === undefined) {\n            return draft.errors.missingOneOfPropertyError({\n                property: oneOfProperty,\n                pointer,\n                schema,\n                value: data\n            });\n        }\n        for (let i = 0; i < schema.oneOf.length; i += 1) {\n            const oneNode = draft.resolveRef(node.next(schema.oneOf[i]));\n            const resultNode = draft.step(oneNode, oneOfProperty, data);\n            if (isJsonError(resultNode)) {\n                return resultNode;\n            }\n            let result = flattenArray(draft.validate(resultNode, oneOfValue));\n            result = result.filter(errorOrPromise);\n            if (result.length > 0) {\n                errors.push(...result);\n            }\n            else {\n                // @evaluation-info\n                setOneOfOrigin(oneNode.schema, i);\n                return resultNode.next(oneNode.schema);\n            }\n        }\n        return draft.errors.oneOfPropertyError({\n            property: oneOfProperty,\n            value: oneOfValue,\n            pointer,\n            schema,\n            errors\n        });\n    }\n    // keyword: oneOf\n    const matches = [];\n    for (let i = 0; i < schema.oneOf.length; i += 1) {\n        const oneNode = draft.resolveRef(node.next(schema.oneOf[i]));\n        const one = oneNode.schema;\n        if (draft.isValid(data, one, pointer)) {\n            matches.push({ schema: one, index: i });\n        }\n    }\n    if (matches.length === 1) {\n        // @evaluation-info\n        setOneOfOrigin(matches[0].schema, matches[0].index);\n        return node.next(matches[0].schema);\n    }\n    // fuzzy match oneOf\n    if (isObject(data)) {\n        let schemaOfItem;\n        let schemaOfIndex = -1;\n        let fuzzyGreatest = 0;\n        for (let i = 0; i < schema.oneOf.length; i += 1) {\n            const oneNode = draft.resolveRef(node.next(schema.oneOf[i]));\n            const fuzzyValue = fuzzyObjectValue(oneNode, data);\n            if (fuzzyGreatest < fuzzyValue) {\n                fuzzyGreatest = fuzzyValue;\n                schemaOfItem = oneNode.schema;\n                schemaOfIndex = i;\n            }\n        }\n        if (schemaOfItem === undefined) {\n            return draft.errors.oneOfError({\n                value: JSON.stringify(data),\n                pointer,\n                schema,\n                oneOf: schema.oneOf\n            });\n        }\n        // @evaluation-info\n        setOneOfOrigin(schemaOfItem, schemaOfIndex);\n        return node.next(schemaOfItem);\n    }\n    if (matches.length > 1) {\n        return draft.errors.multipleOneOfError({ matches, pointer, schema, value: data });\n    }\n    return draft.errors.oneOfError({\n        value: JSON.stringify(data),\n        pointer,\n        schema,\n        oneOf: schema.oneOf\n    });\n}\n/**\n * validates oneOf definition for given input data\n */\nconst validateOneOf = (node, value) => {\n    if (Array.isArray(node.schema.oneOf)) {\n        const nodeOrError = node.draft.resolveOneOf(node, value);\n        if (isJsonError(nodeOrError)) {\n            return nodeOrError;\n        }\n    }\n};\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/mergeSchema.js\n\n\nfunction mergeSchema(a, b, ...omit) {\n    if ((b === null || b === void 0 ? void 0 : b.type) === "error") {\n        return b;\n    }\n    else if ((a === null || a === void 0 ? void 0 : a.type) === "error") {\n        return a;\n    }\n    const aType = getTypeOf(a);\n    const bType = getTypeOf(b);\n    if (aType !== bType) {\n        return a;\n    }\n    const schema = mergeSchema2(a, b);\n    for (let i = 0; i < omit.length; i += 1) {\n        delete schema[omit[i]];\n    }\n    return schema;\n}\nfunction mergeSchema2(a, b, property) {\n    var _a;\n    if (isObject(a) && isObject(b)) {\n        const newObject = {};\n        [...Object.keys(a), ...Object.keys(b)]\n            .filter((item, index, array) => array.indexOf(item) === index)\n            .forEach(key => (newObject[key] = mergeSchema2(a[key], b[key], key)));\n        return newObject;\n    }\n    if (Array.isArray(a) && Array.isArray(b)) {\n        if (property === "required") {\n            return a.concat(b).filter((item, index, array) => array.indexOf(item) === index);\n        }\n        if (property === "items") {\n            const result = [];\n            for (let i = 0; i < b.length; i += 1) {\n                if (isObject(a[i]) && isObject(b[i]) && a[i].type === b[i].type) {\n                    result[i] = mergeSchema2(a[i], b[i]);\n                }\n                else {\n                    result.push((_a = b[i]) !== null && _a !== void 0 ? _a : a[i]);\n                }\n            }\n            return result;\n        }\n        const result = [];\n        const append = [];\n        for (let i = 0; i < Math.max(a.length, b.length); i += 1) {\n            if (isObject(a[i]) && isObject(b[i])) {\n                result[i] = mergeSchema2(a[i], b[i]);\n            }\n            else {\n                if (a[i] !== undefined && b[i] !== undefined) {\n                    result[i] = a[i];\n                    append.push(b[i]);\n                }\n                else if (a[i] !== undefined) {\n                    result[i] = a[i];\n                }\n                else if (b[i] !== undefined) {\n                    append.push(b[i]);\n                }\n            }\n        }\n        return [...result, ...append].filter((item, index, array) => array.indexOf(item) === index);\n    }\n    if (Array.isArray(b)) {\n        return b;\n    }\n    if (Array.isArray(a)) {\n        return a;\n    }\n    if (b !== undefined) {\n        return b;\n    }\n    return a;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/omit.js\n/**\n * Omit properties from input schema. Accepts any number of properties to\n * remove. Example:\n *\n * ```ts\n * omit(myObject, "if", "dependencies");\n * ```\n *\n * @returns shallow copy of input object without specified properties\n */\nfunction omit(object, ...keysToOmit) {\n    const result = {};\n    Object.keys(object).forEach((key) => {\n        if (!keysToOmit.includes(key)) {\n            result[key] = object[key];\n        }\n    });\n    return result;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/features/if.js\n/**\n * returns if-then-else as a json schema. does not merge with input\n * json schema. you probably will need to do so to correctly resolve\n * references.\n *\n * @returns json schema defined by if-then-else or undefined\n */\nfunction resolveIfSchema(node, data) {\n    if (node.schema.if == null) {\n        return undefined;\n    }\n    if (node.schema.if === false) {\n        // @evaluation-info\n        // schema.__ifelse = true\n        return node.next(node.schema.else);\n    }\n    if (node.schema.if && (node.schema.then || node.schema.else)) {\n        const ifNode = node.draft.resolveRef(node.next(node.schema.if));\n        const ifErrors = node.draft.validate(ifNode, data);\n        if (ifErrors.length === 0 && node.schema.then) {\n            const thenNode = node.next(node.schema.then);\n            // @evaluation-info\n            // schema.__ifthen = true\n            return node.draft.resolveRef(thenNode);\n        }\n        if (ifErrors.length !== 0 && node.schema.else) {\n            const elseNode = node.next(node.schema.else);\n            // @evaluation-info\n            // schema.__ifelse = true\n            return node.draft.resolveRef(elseNode);\n        }\n    }\n    return undefined;\n}\n/**\n * @returns validation result of it-then-else schema\n */\nconst validateIf = (node, value) => {\n    const resolvedNode = resolveIfSchema(node, value);\n    if (resolvedNode) {\n        // @recursiveRef ok, we not just add per pointer, but any evluation to dynamic scope / validation path\n        return node.draft.validate(resolvedNode, value);\n    }\n};\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/shallowCloneSchema.js\nfunction shallowCloneSchemaNode(node) {\n    return { ...node };\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/features/allOf.js\n\n\n\n\n/**\n * resolves schema\n * when complete this will have much duplication to step.object etc\n */\nfunction resolveSchema(node, data) {\n    const ifSchema = resolveIfSchema(node, data);\n    if (ifSchema) {\n        return ifSchema;\n    }\n    const schema = shallowCloneSchemaNode(node.schema);\n    return node.next(omit(schema, "if", "then", "else"));\n}\nfunction resolveAllOf(node, data) {\n    const { schema } = node;\n    let mergedSchema = shallowCloneSchemaNode(schema);\n    for (let i = 0; i < schema.allOf.length; i += 1) {\n        const allOfNode = node.next(schema.allOf[i]).resolveRef();\n        // @todo introduce draft.resolveSchema to iteratively resolve\n        const allOfSchema = resolveSchema(allOfNode, data).schema;\n        mergedSchema = mergeSchema(mergedSchema, allOfSchema);\n    }\n    delete mergedSchema.allOf;\n    return node.next(mergedSchema);\n}\n/**\n * @attention: subschemas have to be resolved upfront (e.g. if-else that do not apply)\n * Merge all allOf sub schema into a single schema. Returns undefined for\n * missing allOf definition.\n *\n * @returns json schema defined by allOf or undefined\n */\nfunction mergeAllOfSchema(draft, schema) {\n    const { allOf } = schema;\n    if (!Array.isArray(allOf) || allOf.length === 0) {\n        return;\n    }\n    let resolvedSchema = {};\n    allOf.forEach((subschema) => {\n        if (subschema == null) {\n            return;\n        }\n        const subSchemaNode = draft.createNode(subschema).resolveRef();\n        resolvedSchema = mergeSchema(resolvedSchema, subSchemaNode.schema);\n    });\n    return resolvedSchema;\n}\n/**\n * validate allOf definition for given input data\n */\nconst validateAllOf = (node, value) => {\n    const { draft, schema } = node;\n    const { allOf } = schema;\n    if (!Array.isArray(allOf) || allOf.length === 0) {\n        return;\n    }\n    const errors = [];\n    schema.allOf.forEach((subSchema) => {\n        errors.push(...draft.validate(node.next(subSchema), value));\n    });\n    return errors;\n};\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/schemaNode.js\n\n\n\n\nfunction merge(schema, ...omit) {\n    if (schema == null) {\n        throw new Error(`undefined schema`);\n    }\n    const node = this;\n    const mergedSchema = mergeSchema(node.schema, schema, ...omit);\n    return { ...node, schema: mergedSchema, path: [...node.path, [node.pointer, node.schema]] };\n}\nfunction resolveRef() {\n    const node = this;\n    return node.draft.resolveRef(node);\n}\nfunction next(schema, key) {\n    if (isJsonError(schema)) {\n        return schema;\n    }\n    if (schema == null) {\n        throw new Error(`undefined schema`);\n    }\n    if (!isObject(schema) && getTypeOf(schema) !== "boolean") {\n        throw new Error(`bad schema type ${getTypeOf(schema)}`);\n    }\n    const node = this;\n    return {\n        ...node,\n        pointer: key ? `${node.pointer}/${key}` : node.pointer,\n        schema,\n        path: [...node.path, [node.pointer, node.schema]]\n    };\n}\nfunction isSchemaNode(value) {\n    // @ts-expect-error unknown object\n    return isObject(value) && value.next && value.path && value.draft;\n}\nfunction createNode(draft, schema, pointer = "#") {\n    return { draft, pointer, schema, path: [], next, merge, resolveRef };\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/resolveRef.strict.js\n\nfunction resolveRef_strict_resolveRef(node) {\n    if (!isSchemaNode(node)) {\n        throw new Error("schema node expected");\n    }\n    if (node.schema == null || node.schema.$ref == null) {\n        return node;\n    }\n    if (node.schema.getRoot) {\n        // we actually always need to resolve the schema like this, since returned subschemas\n        // must resolve relative from their schema\n        const resolvedSchema = node.schema.getRoot().getRef(node.schema);\n        return node.next(resolvedSchema);\n    }\n    // tryout - this should never be called, except we missed something\n    const resolvedSchema = node.draft.rootSchema.getRef(node.schema);\n    return node.next(resolvedSchema);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/resolveRef.js\n\n// 1. https://json-schema.org/draft/2019-09/json-schema-core#scopes\nfunction resolveRecursiveRef(node) {\n    const history = node.path;\n    // console.log(...history);\n    // RESTRICT BY CHANGE IN BASE-URL\n    let startIndex = 0;\n    for (let i = history.length - 1; i >= 0; i--) {\n        const step = history[i][1];\n        if (step.$id && /^https?:\\/\\//.test(step.$id) && step.$recursiveAnchor !== true) {\n            startIndex = i;\n            break;\n        }\n    }\n    // FROM THERE FIND FIRST OCCURENCE OF ANCHOR\n    const firstAnchor = history.find((s, index) => index >= startIndex && s[1].$recursiveAnchor === true);\n    if (firstAnchor) {\n        return node.next(firstAnchor[1]);\n    }\n    // THEN RETURN LATEST BASE AS TARGET\n    for (let i = history.length - 1; i >= 0; i--) {\n        const step = history[i][1];\n        if (step.$id) {\n            return node.next(step);\n        }\n    }\n    // OR RETURN ROOT\n    return node.next(node.draft.rootSchema);\n}\n/**\n * @todo update types\n * Note: JsonSchema my be false\n */\nfunction resolveRef_resolveRef(node) {\n    if (!isSchemaNode(node)) {\n        throw new Error("expected node");\n    }\n    if (node.schema == null) {\n        return node;\n    }\n    if (node.schema.$recursiveRef) {\n        return resolveRef_resolveRef(resolveRecursiveRef(node));\n    }\n    if (node.schema.$ref == null) {\n        return node;\n    }\n    const resolvedSchema = node.draft.rootSchema.getRef(node.schema);\n    if (resolvedSchema === false) {\n        return node.next(resolvedSchema);\n    }\n    // @draft >= 2019-09 we now merge schemas: in draft <= 7 $ref is treated as reference, not as schema\n    return node.merge(resolvedSchema, "$ref");\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/validateAsync.js\n\n\n\nfunction createErrorNotification(onError) {\n    return function notifyError(error) {\n        if (Array.isArray(error)) {\n            error = flattenArray(error);\n            error.forEach(notifyError);\n            return error;\n        }\n        if (isJsonError(error)) {\n            onError(error);\n        }\n        return error;\n    };\n}\n/**\n * @async\n * Validate data by a json schema\n *\n * @param draft - validator\n * @param value - value to validate\n * @param options\n * @param options.schema - json schema to use, defaults to draft.rootSchema\n * @param options.pointer - json pointer pointing to current value. Used in error reports\n * @param options.onError   - will be called for each error as soon as it is resolved\n * @return list of errors or empty\n */\nfunction validateAsync(draft, value, options) {\n    const { schema, pointer, onError } = { schema: draft.rootSchema, pointer: "#", ...options };\n    let errors = draft.validate(draft.createNode(schema, pointer), value);\n    if (onError) {\n        errors = flattenArray(errors);\n        const notifyError = createErrorNotification(onError);\n        for (let i = 0; i < errors.length; i += 1) {\n            const error = errors[i];\n            if (error instanceof Promise) {\n                error.then(notifyError);\n            }\n            else if (isJsonError(error)) {\n                onError(error);\n            }\n        }\n    }\n    return Promise.all(errors)\n        .then(flattenArray)\n        .then((resolvedErrors) => resolvedErrors.filter(errorsOnly))\n        .catch((e) => {\n        console.log("Failed resolving promises", e.message);\n        console.log(e.stack);\n        throw e;\n    });\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/uniqueItems.js\n/**\n * @returns list with unique values only\n */\nfunction uniqueItems(list) {\n    return list.filter((item, index) => list.indexOf(item) === index);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/features/dependencies.js\n\n\n\n\n/**\n * @todo add support for dependentRequired (draft 2019-09)\n * returns dependencies as an object json schema. does not merge with input\n * json schema. you probably will need to do so to correctly resolve\n * references.\n *\n * @returns merged json schema defined by dependencies or undefined\n */\nfunction resolveDependencies(node, data) {\n    var _a;\n    const { schema } = node;\n    // @draft >= 2019-09 dependentSchemas\n    const dependencies = (_a = schema.dependencies) !== null && _a !== void 0 ? _a : schema.dependentSchemas;\n    if (!isObject(dependencies) || !isObject(data)) {\n        return;\n    }\n    let updated = false;\n    let resolvedSchema = { required: [] };\n    Object.keys(dependencies).forEach((prop) => {\n        var _a, _b;\n        if (data[prop] == null &&\n            !(((_a = schema.required) === null || _a === void 0 ? void 0 : _a.includes(prop)) || ((_b = resolvedSchema.required) === null || _b === void 0 ? void 0 : _b.includes(prop)))) {\n            return;\n        }\n        const dependency = dependencies[prop];\n        // dependency array\n        if (Array.isArray(dependency)) {\n            updated = true;\n            resolvedSchema.required.push(...dependency);\n            return;\n        }\n        // dependency schema\n        if (isObject(dependency)) {\n            updated = true;\n            const dNode = node.next(dependency).resolveRef();\n            resolvedSchema = mergeSchema(resolvedSchema, dNode.schema);\n            return;\n        }\n    });\n    if (updated) {\n        resolvedSchema.required = uniqueItems(resolvedSchema.required);\n        return resolvedSchema;\n    }\n}\n/**\n * @draft 2019-09\n */\nconst validateDependentRequired = (node, value) => {\n    const { draft, schema, pointer } = node;\n    const dependentRequired = schema.dependentRequired;\n    if (!isObject(dependentRequired)) {\n        return undefined;\n    }\n    const errors = [];\n    Object.keys(value).forEach((property) => {\n        const dependencies = dependentRequired[property];\n        // @draft >= 6 boolean schema\n        if (dependencies === true) {\n            return;\n        }\n        if (dependencies === false) {\n            errors.push(draft.errors.missingDependencyError({ pointer, schema, value }));\n            return;\n        }\n        if (!Array.isArray(dependencies)) {\n            return;\n        }\n        for (let i = 0, l = dependencies.length; i < l; i += 1) {\n            if (value[dependencies[i]] === undefined) {\n                errors.push(draft.errors.missingDependencyError({ missingProperty: dependencies[i], pointer, schema, value }));\n            }\n        }\n    });\n    return errors;\n};\n/**\n * @draft 2019-09\n */\nconst validateDependentSchemas = (node, value) => {\n    const { draft, schema, pointer } = node;\n    const dependentSchemas = schema.dependentSchemas;\n    if (!isObject(dependentSchemas)) {\n        return undefined;\n    }\n    const errors = [];\n    Object.keys(value).forEach((property) => {\n        const dependencies = dependentSchemas[property];\n        // @draft >= 6 boolean schema\n        if (dependencies === true) {\n            return;\n        }\n        if (dependencies === false) {\n            errors.push(draft.errors.missingDependencyError({ pointer, schema, value }));\n            return;\n        }\n        if (!isObject(dependencies)) {\n            return;\n        }\n        draft.validate(node.next(dependencies), value).map(error => errors.push(error));\n    });\n    return errors;\n};\n/**\n * validate dependencies definition for given input data\n */\nconst validateDependencies = (node, value) => {\n    const { draft, schema, pointer } = node;\n    // @draft >= 2019-09 dependentSchemas\n    const dependencies = schema.dependencies;\n    if (!isObject(dependencies)) {\n        return undefined;\n    }\n    const errors = [];\n    Object.keys(value).forEach((property) => {\n        if (dependencies[property] === undefined) {\n            return;\n        }\n        // @draft >= 6 boolean schema\n        if (dependencies[property] === true) {\n            return;\n        }\n        if (dependencies[property] === false) {\n            errors.push(draft.errors.missingDependencyError({ pointer, schema, value }));\n            return;\n        }\n        let dependencyErrors;\n        const type = getTypeOf(dependencies[property]);\n        const propertyValue = dependencies[property];\n        if (Array.isArray(propertyValue)) {\n            dependencyErrors = propertyValue\n                .filter((dependency) => value[dependency] === undefined)\n                .map((missingProperty) => draft.errors.missingDependencyError({ missingProperty, pointer, schema, value }));\n        }\n        else if (type === "object") {\n            dependencyErrors = draft.validate(node.next(dependencies[property]), value);\n        }\n        else {\n            throw new Error(`Invalid dependency definition for ${pointer}/${property}. Must be string[] or schema`);\n        }\n        errors.push(...dependencyErrors);\n    });\n    return errors.length > 0 ? errors : undefined;\n};\n\n;// ./node_modules/json-schema-library/dist/module/lib/features/anyOf.js\n/**\n * @draft-04\n */\n\n/**\n * returns merged schema of all valid anyOf subschemas for the given input data.\n * Does not merge with rest input schema.\n *\n * @returns merged anyOf subschemas which are valid to the given input data.\n */\nfunction mergeValidAnyOfSchema(node, data) {\n    const { draft, schema } = node;\n    if (!Array.isArray(schema.anyOf) || schema.anyOf.length === 0) {\n        return;\n    }\n    let resolvedSchema;\n    schema.anyOf.forEach((anySchema) => {\n        const anyNode = draft.resolveRef(node.next(anySchema));\n        if (draft.validate(anyNode, data).length === 0) {\n            resolvedSchema = resolvedSchema ? mergeSchema(resolvedSchema, anyNode.schema) : anyNode.schema;\n        }\n    });\n    if (resolvedSchema) {\n        return node.next(resolvedSchema);\n    }\n}\n/**\n * @unused this function is only exposed via draft and not used otherwise\n * @returns extended input schema with valid anyOf subschemas or JsonError if\n * no anyOf schema matches input data\n */\nfunction resolveAnyOf(node, data) {\n    const { anyOf } = node.schema;\n    if (!Array.isArray(anyOf) || anyOf.length === 0) {\n        return node;\n    }\n    const resolvedNode = mergeValidAnyOfSchema(node, data);\n    if (resolvedNode) {\n        const { pointer, schema } = node;\n        return node.draft.errors.anyOfError({ pointer, schema, value: data, anyOf: JSON.stringify(anyOf) });\n    }\n    return node.merge(resolvedNode.schema, "anyOf");\n}\n/**\n * validate anyOf definition for given input data\n */\nconst validateAnyOf = (node, value) => {\n    const { draft, schema, pointer } = node;\n    if (!Array.isArray(schema.anyOf) || schema.anyOf.length === 0) {\n        return undefined;\n    }\n    // console.log("validate any of", pointer, value);\n    for (let i = 0; i < schema.anyOf.length; i += 1) {\n        const nextNode = draft.resolveRef(node.next(schema.anyOf[i]));\n        if (draft.validate(nextNode, value).length === 0) {\n            return undefined;\n        }\n    }\n    return draft.errors.anyOfError({ pointer, schema, value, anyOf: schema.anyOf });\n};\n\n;// ./node_modules/json-schema-library/dist/module/lib/resolveDynamicSchema.js\n\n\n\n\n\n\n\n\n\nconst toOmit = ["allOf", "anyOf", "oneOf", "dependencies", "if", "then", "else"];\nconst dynamicProperties = ["allOf", "anyOf", "oneOf", "dependencies", "if"];\nfunction isDynamicSchema(schema) {\n    const givenProps = Object.keys(schema);\n    return dynamicProperties.findIndex((prop) => givenProps.includes(prop)) !== -1;\n}\n/**\n * @note this utility does not reference draft methods for resolution\n * @todo consider using draft methods\n * @todo consider exposing separate info-object (oneOf-Index)\n *\n * Resolves all dynamic schema definitions for the given input data and returns\n * the resulting json-schema without any dynamic schema definitions. The result\n * is not merged with the original input schema, thus static definitions of the\n * input schema are untouched and missing. For a full schema definition of this\n * input data you have to merge the result with the original schema\n * (@see reduceSchema)\n *\n * dynamic schema definitions: dependencies, allOf, anyOf, oneOf, if\n *\n * @returns static schema from resolved dynamic schema definitions for this\n *  specific input data\n */\nfunction resolveDynamicSchema(schemaNode, data) {\n    let resolvedSchema;\n    let error;\n    const node = schemaNode.draft.resolveRef(schemaNode);\n    const { draft } = node;\n    const schema = isSchemaNode(node) ? node.schema : node;\n    // @feature oneOf\n    if (schema.oneOf) {\n        const oneOfSchema = resolveOneOfFuzzy(node, data);\n        if (isJsonError(oneOfSchema)) {\n            error = oneOfSchema;\n        }\n        else if (oneOfSchema) {\n            resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, oneOfSchema.schema);\n        }\n    }\n    // @feature allOf\n    if (Array.isArray(schema.allOf)) {\n        const allOf = schema.allOf.map((s) => {\n            // before merging allOf schema we need to resolve all subschemas\n            // if not, we would wrongly merge oneOf, if-then statements, etc\n            if (isDynamicSchema(s)) {\n                // copy of reduceSchema\n                const result = resolveDynamicSchema(node.next(s), data);\n                // note: result has no scope\n                if (result == null || isJsonError(result)) {\n                    return result;\n                }\n                const finalSchema = mergeSchema(s, result.schema);\n                return omit(finalSchema, ...toOmit);\n            }\n            return s;\n        });\n        if (allOf.length > 0) {\n            const allOfSchema = mergeAllOfSchema(draft, { allOf });\n            resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, allOfSchema);\n        }\n    }\n    // @feature anyOf\n    const anyNode = mergeValidAnyOfSchema(node, data);\n    if (anyNode && anyNode.schema) {\n        resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, anyNode.schema);\n    }\n    // @feature dependencies\n    const dependenciesSchema = resolveDependencies(node, data);\n    if (dependenciesSchema) {\n        resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, dependenciesSchema);\n    }\n    // @feature if-then-else\n    const ifNodeResolved = resolveIfSchema(node, data);\n    if (isSchemaNode(ifNodeResolved)) {\n        resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, ifNodeResolved.schema);\n    }\n    if (resolvedSchema == null) {\n        return error;\n    }\n    if (isJsonError(resolvedSchema)) {\n        return resolvedSchema;\n    }\n    const nestedSchema = resolveDynamicSchema(node.next(resolvedSchema), data);\n    if (isSchemaNode(nestedSchema)) {\n        resolvedSchema = mergeSchema(resolvedSchema, nestedSchema.schema);\n    }\n    const finalSchema = omit(resolvedSchema, ...toOmit);\n    return node.next(finalSchema);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/reduceSchema.js\n\n\nconst reduceSchema_toOmit = ["allOf", "anyOf", "oneOf", "dependencies", "if", "then", "else"];\n/**\n * reduces json schema by merging dynamic constructs like if-then-else,\n * dependencies, allOf, anyOf, oneOf, etc into a static json schema\n * omitting those properties.\n *\n * @returns input schema reduced by dynamic schema definitions for the given\n * input data\n */\nfunction reduceSchema(node, data) {\n    const resolvedSchema = resolveDynamicSchema(node, data);\n    if (isSchemaNode(resolvedSchema)) {\n        return node.merge(resolvedSchema.schema, ...reduceSchema_toOmit);\n    }\n    if (resolvedSchema) {\n        return resolvedSchema; // error\n    }\n    return node;\n}\n\n;// ./node_modules/fast-copy/dist/esm/index.mjs\nvar toStringFunction = Function.prototype.toString;\nvar create = Object.create;\nvar toStringObject = Object.prototype.toString;\n/**\n * @classdesc Fallback cache for when WeakMap is not natively supported\n */\nvar LegacyCache = /** @class */ (function () {\n    function LegacyCache() {\n        this._keys = [];\n        this._values = [];\n    }\n    LegacyCache.prototype.has = function (key) {\n        return !!~this._keys.indexOf(key);\n    };\n    LegacyCache.prototype.get = function (key) {\n        return this._values[this._keys.indexOf(key)];\n    };\n    LegacyCache.prototype.set = function (key, value) {\n        this._keys.push(key);\n        this._values.push(value);\n    };\n    return LegacyCache;\n}());\nfunction createCacheLegacy() {\n    return new LegacyCache();\n}\nfunction createCacheModern() {\n    return new WeakMap();\n}\n/**\n * Get a new cache object to prevent circular references.\n */\nvar createCache = typeof WeakMap !== \'undefined\' ? createCacheModern : createCacheLegacy;\n/**\n * Get an empty version of the object with the same prototype it has.\n */\nfunction getCleanClone(prototype) {\n    if (!prototype) {\n        return create(null);\n    }\n    var Constructor = prototype.constructor;\n    if (Constructor === Object) {\n        return prototype === Object.prototype ? {} : create(prototype);\n    }\n    if (Constructor &&\n        ~toStringFunction.call(Constructor).indexOf(\'[native code]\')) {\n        try {\n            return new Constructor();\n        }\n        catch (_a) { }\n    }\n    return create(prototype);\n}\nfunction getRegExpFlagsLegacy(regExp) {\n    var flags = \'\';\n    if (regExp.global) {\n        flags += \'g\';\n    }\n    if (regExp.ignoreCase) {\n        flags += \'i\';\n    }\n    if (regExp.multiline) {\n        flags += \'m\';\n    }\n    if (regExp.unicode) {\n        flags += \'u\';\n    }\n    if (regExp.sticky) {\n        flags += \'y\';\n    }\n    return flags;\n}\nfunction getRegExpFlagsModern(regExp) {\n    return regExp.flags;\n}\n/**\n * Get the flags to apply to the copied regexp.\n */\nvar getRegExpFlags = /test/g.flags === \'g\' ? getRegExpFlagsModern : getRegExpFlagsLegacy;\nfunction getTagLegacy(value) {\n    var type = toStringObject.call(value);\n    return type.substring(8, type.length - 1);\n}\nfunction getTagModern(value) {\n    return value[Symbol.toStringTag] || getTagLegacy(value);\n}\n/**\n * Get the tag of the value passed, so that the correct copier can be used.\n */\nvar getTag = typeof Symbol !== \'undefined\' ? getTagModern : getTagLegacy;\n\nvar defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar _a = Object.prototype, esm_hasOwnProperty = _a.hasOwnProperty, propertyIsEnumerable = _a.propertyIsEnumerable;\nvar SUPPORTS_SYMBOL = typeof getOwnPropertySymbols === \'function\';\nfunction getStrictPropertiesModern(object) {\n    return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));\n}\n/**\n * Get the properites used when copying objects strictly. This includes both keys and symbols.\n */\nvar getStrictProperties = SUPPORTS_SYMBOL\n    ? getStrictPropertiesModern\n    : getOwnPropertyNames;\n/**\n * Striclty copy all properties contained on the object.\n */\nfunction copyOwnPropertiesStrict(value, clone, state) {\n    var properties = getStrictProperties(value);\n    for (var index = 0, length_1 = properties.length, property = void 0, descriptor = void 0; index < length_1; ++index) {\n        property = properties[index];\n        if (property === \'callee\' || property === \'caller\') {\n            continue;\n        }\n        descriptor = getOwnPropertyDescriptor(value, property);\n        if (!descriptor) {\n            // In extra edge cases where the property descriptor cannot be retrived, fall back to\n            // the loose assignment.\n            clone[property] = state.copier(value[property], state);\n            continue;\n        }\n        // Only clone the value if actually a value, not a getter / setter.\n        if (!descriptor.get && !descriptor.set) {\n            descriptor.value = state.copier(descriptor.value, state);\n        }\n        try {\n            defineProperty(clone, property, descriptor);\n        }\n        catch (error) {\n            // Tee above can fail on node in edge cases, so fall back to the loose assignment.\n            clone[property] = descriptor.value;\n        }\n    }\n    return clone;\n}\n/**\n * Deeply copy the indexed values in the array.\n */\nfunction copyArrayLoose(array, state) {\n    var clone = new state.Constructor();\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(array, clone);\n    for (var index = 0, length_2 = array.length; index < length_2; ++index) {\n        clone[index] = state.copier(array[index], state);\n    }\n    return clone;\n}\n/**\n * Deeply copy the indexed values in the array, as well as any custom properties.\n */\nfunction copyArrayStrict(array, state) {\n    var clone = new state.Constructor();\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(array, clone);\n    return copyOwnPropertiesStrict(array, clone, state);\n}\n/**\n * Copy the contents of the ArrayBuffer.\n */\nfunction copyArrayBuffer(arrayBuffer, _state) {\n    return arrayBuffer.slice(0);\n}\n/**\n * Create a new Blob with the contents of the original.\n */\nfunction copyBlob(blob, _state) {\n    return blob.slice(0, blob.size, blob.type);\n}\n/**\n * Create a new DataView with the contents of the original.\n */\nfunction copyDataView(dataView, state) {\n    return new state.Constructor(copyArrayBuffer(dataView.buffer));\n}\n/**\n * Create a new Date based on the time of the original.\n */\nfunction copyDate(date, state) {\n    return new state.Constructor(date.getTime());\n}\n/**\n * Deeply copy the keys and values of the original.\n */\nfunction copyMapLoose(map, state) {\n    var clone = new state.Constructor();\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(map, clone);\n    map.forEach(function (value, key) {\n        clone.set(key, state.copier(value, state));\n    });\n    return clone;\n}\n/**\n * Deeply copy the keys and values of the original, as well as any custom properties.\n */\nfunction copyMapStrict(map, state) {\n    return copyOwnPropertiesStrict(map, copyMapLoose(map, state), state);\n}\nfunction copyObjectLooseLegacy(object, state) {\n    var clone = getCleanClone(state.prototype);\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(object, clone);\n    for (var key in object) {\n        if (esm_hasOwnProperty.call(object, key)) {\n            clone[key] = state.copier(object[key], state);\n        }\n    }\n    return clone;\n}\nfunction copyObjectLooseModern(object, state) {\n    var clone = getCleanClone(state.prototype);\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(object, clone);\n    for (var key in object) {\n        if (esm_hasOwnProperty.call(object, key)) {\n            clone[key] = state.copier(object[key], state);\n        }\n    }\n    var symbols = getOwnPropertySymbols(object);\n    for (var index = 0, length_3 = symbols.length, symbol = void 0; index < length_3; ++index) {\n        symbol = symbols[index];\n        if (propertyIsEnumerable.call(object, symbol)) {\n            clone[symbol] = state.copier(object[symbol], state);\n        }\n    }\n    return clone;\n}\n/**\n * Deeply copy the properties (keys and symbols) and values of the original.\n */\nvar copyObjectLoose = SUPPORTS_SYMBOL\n    ? copyObjectLooseModern\n    : copyObjectLooseLegacy;\n/**\n * Deeply copy the properties (keys and symbols) and values of the original, as well\n * as any hidden or non-enumerable properties.\n */\nfunction copyObjectStrict(object, state) {\n    var clone = getCleanClone(state.prototype);\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(object, clone);\n    return copyOwnPropertiesStrict(object, clone, state);\n}\n/**\n * Create a new primitive wrapper from the value of the original.\n */\nfunction copyPrimitiveWrapper(primitiveObject, state) {\n    return new state.Constructor(primitiveObject.valueOf());\n}\n/**\n * Create a new RegExp based on the value and flags of the original.\n */\nfunction copyRegExp(regExp, state) {\n    var clone = new state.Constructor(regExp.source, getRegExpFlags(regExp));\n    clone.lastIndex = regExp.lastIndex;\n    return clone;\n}\n/**\n * Return the original value (an identity function).\n *\n * @note\n * THis is used for objects that cannot be copied, such as WeakMap.\n */\nfunction copySelf(value, _state) {\n    return value;\n}\n/**\n * Deeply copy the values of the original.\n */\nfunction copySetLoose(set, state) {\n    var clone = new state.Constructor();\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(set, clone);\n    set.forEach(function (value) {\n        clone.add(state.copier(value, state));\n    });\n    return clone;\n}\n/**\n * Deeply copy the values of the original, as well as any custom properties.\n */\nfunction copySetStrict(set, state) {\n    return copyOwnPropertiesStrict(set, copySetLoose(set, state), state);\n}\n\nvar isArray = Array.isArray;\nvar esm_assign = Object.assign;\nvar getPrototypeOf = Object.getPrototypeOf || (function (obj) { return obj.__proto__; });\nvar DEFAULT_LOOSE_OPTIONS = {\n    array: copyArrayLoose,\n    arrayBuffer: copyArrayBuffer,\n    blob: copyBlob,\n    dataView: copyDataView,\n    date: copyDate,\n    error: copySelf,\n    map: copyMapLoose,\n    object: copyObjectLoose,\n    regExp: copyRegExp,\n    set: copySetLoose,\n};\nvar DEFAULT_STRICT_OPTIONS = esm_assign({}, DEFAULT_LOOSE_OPTIONS, {\n    array: copyArrayStrict,\n    map: copyMapStrict,\n    object: copyObjectStrict,\n    set: copySetStrict,\n});\n/**\n * Get the copiers used for each specific object tag.\n */\nfunction getTagSpecificCopiers(options) {\n    return {\n        Arguments: options.object,\n        Array: options.array,\n        ArrayBuffer: options.arrayBuffer,\n        Blob: options.blob,\n        Boolean: copyPrimitiveWrapper,\n        DataView: options.dataView,\n        Date: options.date,\n        Error: options.error,\n        Float32Array: options.arrayBuffer,\n        Float64Array: options.arrayBuffer,\n        Int8Array: options.arrayBuffer,\n        Int16Array: options.arrayBuffer,\n        Int32Array: options.arrayBuffer,\n        Map: options.map,\n        Number: copyPrimitiveWrapper,\n        Object: options.object,\n        Promise: copySelf,\n        RegExp: options.regExp,\n        Set: options.set,\n        String: copyPrimitiveWrapper,\n        WeakMap: copySelf,\n        WeakSet: copySelf,\n        Uint8Array: options.arrayBuffer,\n        Uint8ClampedArray: options.arrayBuffer,\n        Uint16Array: options.arrayBuffer,\n        Uint32Array: options.arrayBuffer,\n        Uint64Array: options.arrayBuffer,\n    };\n}\n/**\n * Create a custom copier based on the object-specific copy methods passed.\n */\nfunction createCopier(options) {\n    var normalizedOptions = esm_assign({}, DEFAULT_LOOSE_OPTIONS, options);\n    var tagSpecificCopiers = getTagSpecificCopiers(normalizedOptions);\n    var array = tagSpecificCopiers.Array, object = tagSpecificCopiers.Object;\n    function copier(value, state) {\n        state.prototype = state.Constructor = undefined;\n        if (!value || typeof value !== \'object\') {\n            return value;\n        }\n        if (state.cache.has(value)) {\n            return state.cache.get(value);\n        }\n        state.prototype = getPrototypeOf(value);\n        state.Constructor = state.prototype && state.prototype.constructor;\n        // plain objects\n        if (!state.Constructor || state.Constructor === Object) {\n            return object(value, state);\n        }\n        // arrays\n        if (isArray(value)) {\n            return array(value, state);\n        }\n        var tagSpecificCopier = tagSpecificCopiers[getTag(value)];\n        if (tagSpecificCopier) {\n            return tagSpecificCopier(value, state);\n        }\n        return typeof value.then === \'function\' ? value : object(value, state);\n    }\n    return function copy(value) {\n        return copier(value, {\n            Constructor: undefined,\n            cache: createCache(),\n            copier: copier,\n            prototype: undefined,\n        });\n    };\n}\n/**\n * Create a custom copier based on the object-specific copy methods passed, defaulting to the\n * same internals as `copyStrict`.\n */\nfunction createStrictCopier(options) {\n    return createCopier(esm_assign({}, DEFAULT_STRICT_OPTIONS, options));\n}\n/**\n * Copy an value deeply as much as possible, where strict recreation of object properties\n * are maintained. All properties (including non-enumerable ones) are copied with their\n * original property descriptors on both objects and arrays.\n */\nvar copyStrict = createStrictCopier({});\n/**\n * Copy an value deeply as much as possible.\n */\nvar index = createCopier({});\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/copy.js\n\n/* harmony default export */ const copy = (index);\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft/index.js\n\n\n\nclass Draft {\n    constructor(config, schema) {\n        /** cache for remote schemas */\n        this.remotes = {};\n        /** error creators by id */\n        this.errors = {};\n        /** map for valid keywords of a type  */\n        this.typeKeywords = {};\n        /** keyword validators  */\n        this.validateKeyword = {};\n        /** type validators  */\n        this.validateType = {};\n        /** format validators  */\n        this.validateFormat = {};\n        this.config = config;\n        this.typeKeywords = copy(config.typeKeywords);\n        this.validateKeyword = Object.assign({}, config.validateKeyword);\n        this.validateType = Object.assign({}, config.validateType);\n        this.validateFormat = Object.assign({}, config.validateFormat);\n        this.errors = Object.assign({}, config.errors);\n        this.setSchema(schema);\n    }\n    get rootSchema() {\n        return this.__rootSchema;\n    }\n    set rootSchema(rootSchema) {\n        if (rootSchema == null) {\n            return;\n        }\n        this.__rootSchema = this.config.compileSchema(this, rootSchema);\n    }\n    /**\n     * register a json-schema to be referenced from another json-schema\n     * @param url - base-url of json-schema (aka id)\n     * @param schema - json-schema root\n     */\n    addRemoteSchema(url, schema) {\n        this.config.addRemoteSchema(this, url, schema);\n    }\n    compileSchema(schema) {\n        var _a;\n        return this.config.compileSchema(this, schema, (_a = this.rootSchema) !== null && _a !== void 0 ? _a : schema);\n    }\n    createSchemaOf(data) {\n        return this.config.createSchemaOf(data);\n    }\n    /**\n     * Iterates over data, retrieving its schema\n     *\n     * @param data - the data to iterate\n     * @param callback - will be called with (schema, data, pointer) on each item\n     * @param [schema] - the schema matching the data. Defaults to rootSchema\n     * @param [pointer] - pointer to current data. Default to rootPointer\n     */\n    each(data, callback, schema, pointer) {\n        const node = this.createNode(schema !== null && schema !== void 0 ? schema : this.rootSchema, pointer);\n        return this.config.each(node, data, callback);\n    }\n    eachSchema(callback, schema = this.rootSchema) {\n        return this.config.eachSchema(schema, callback);\n    }\n    getChildSchemaSelection(property, schema) {\n        return this.config.getChildSchemaSelection(this, property, schema);\n    }\n    /**\n     * Returns the json-schema of a data-json-pointer.\n     *\n     * To resolve dynamic schema where the type of json-schema is evaluated by\n     * its value, a data object has to be passed in options.\n     *\n     * Per default this function will return `undefined` for valid properties that\n     * do not have a defined schema. Use the option `withSchemaWarning: true` to\n     * receive an error with `code: schema-warning` containing the location of its\n     * last evaluated json-schema.\n     *\n     * Notes\n     *      - uses draft.step to walk through data and schema\n     *\n     * @param draft\n     * @param pointer - json pointer in data to get the json schema for\n     * @param [options.data] - the data object, which includes the json pointers value. This is optional, as\n     *    long as no oneOf, anyOf, etc statement is part of the pointers schema\n     * @param [options.schema] - the json schema to iterate. Defaults to draft.rootSchema\n     * @param [options.withSchemaWarning] - if true returns an error instead of `undefined` for valid properties missing a schema definition\n     * @return resolved json-schema object of requested json-pointer location\n     */\n    getSchema(options) {\n        const result = this.getSchemaNode(options);\n        if (isSchemaNode(result)) {\n            return result.schema;\n        }\n        return result;\n    }\n    getSchemaNode(options) {\n        return this.config.getSchema(this, options);\n    }\n    /**\n     * Create data object matching the given schema\n     *\n     * @param [data] - optional template data\n     * @param [schema] - json schema, defaults to rootSchema\n     * @return created template data\n     */\n    getTemplate(data, schema, opts = this.config.templateDefaultOptions) {\n        return this.config.getTemplate(this, data, schema, opts);\n    }\n    isValid(data, schema, pointer) {\n        return this.config.isValid(this, data, schema, pointer);\n    }\n    createNode(schema, pointer = "#") {\n        return this.config.createNode(this, schema, pointer);\n    }\n    resolveAnyOf(node, data) {\n        return this.config.resolveAnyOf(node, data);\n    }\n    resolveAllOf(node, data) {\n        return this.config.resolveAllOf(node, data);\n    }\n    resolveRef(node) {\n        return this.config.resolveRef(node);\n    }\n    resolveOneOf(node, data) {\n        return this.config.resolveOneOf(node, data);\n    }\n    setSchema(schema) {\n        this.rootSchema = schema;\n    }\n    /**\n     * Returns the json-schema of the given object property or array item.\n     * e.g. it steps by one key into the data\n     *\n     * This helper determines the location of the property within the schema (additional properties, oneOf, ...) and\n     * returns the correct schema.\n     *\n     * @param  node\n     * @param  key       - property-name or array-index\n     * @param  data      - parent of key\n     * @return schema-node containing child schema or error if failed resolving key\n     */\n    step(node, key, data) {\n        return this.config.step(node, key, data);\n    }\n    validate(data, schema = this.rootSchema, pointer) {\n        if (isSchemaNode(data)) {\n            const inputData = schema;\n            const inuptNode = data;\n            return this.config.validate(inuptNode, inputData);\n        }\n        if (isJsonError(data)) {\n            return [data];\n        }\n        const node = this.createNode(schema, pointer);\n        return this.config.validate(node, data);\n    }\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft04/addRemoteSchema.js\n/**\n * register a json-schema to be referenced from another json-schema\n * @param url    base-url of json-schema (aka id)\n * @param schema\n */\nfunction addRemoteSchema(draft, url, schema) {\n    schema.id = schema.id || url;\n    draft.remotes[url] = draft.compileSchema(schema);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/eachSchema.js\n\nfunction eachProperty(property, schema, callback, pointer) {\n    const target = schema[property];\n    if (!isObject(target)) {\n        return;\n    }\n    Object.keys(target).forEach(key => {\n        if (Array.isArray(target[key])) {\n            // ignore depndencies list (of properties)\n            return;\n        }\n        if (key === "$defs") {\n            eachProperty("$defs", target[key], callback, `${pointer}/${property}/$defs`);\n        }\n        else {\n            eachSchema(target[key], callback, `${pointer}/${property}/${key}`);\n        }\n    });\n}\nfunction eachItem(property, schema, callback, pointer) {\n    const target = schema[property];\n    if (!Array.isArray(target)) {\n        return;\n    }\n    target.forEach((s, key) => eachSchema(s, callback, `${pointer}/${property}/${key}`));\n}\nfunction eachSchema(schema, callback, pointer = "") {\n    if (schema === undefined) {\n        return;\n    }\n    // @ts-expect-error untyped\n    if (callback(schema, pointer) === true) {\n        return;\n    }\n    if (!isObject(schema)) {\n        return;\n    }\n    eachProperty("properties", schema, callback, pointer);\n    eachProperty("patternProperties", schema, callback, pointer);\n    eachSchema(schema.not, callback, `${pointer}/not`);\n    eachSchema(schema.additionalProperties, callback, `${pointer}/additionalProperties`);\n    eachProperty("dependencies", schema, callback, pointer);\n    // items\n    isObject(schema.items) && eachSchema(schema.items, callback, `${pointer}/items`);\n    eachItem("items", schema, callback, pointer);\n    // additional items\n    eachSchema(schema.additionalItems, callback, `${pointer}/additionalItems`);\n    // dynamic schemas\n    eachItem("allOf", schema, callback, pointer);\n    eachItem("anyOf", schema, callback, pointer);\n    eachItem("oneOf", schema, callback, pointer);\n    eachSchema(schema.if, callback, `${pointer}/if`);\n    eachSchema(schema.then, callback, `${pointer}/then`);\n    eachSchema(schema.else, callback, `${pointer}/else`);\n    // definitions\n    eachProperty("definitions", schema, callback, pointer);\n    eachProperty("$defs", schema, callback, pointer);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/compile/joinScope.js\n/* eslint max-statements-per-line: ["error", { "max": 2 }] */\nconst suffixes = /(#)+$/;\nconst trailingHash = /#$/;\nconst startingHashAndSlash = /^[#/]+/;\nconst isDomain = /^[^:]+:\\/\\/[^/]+\\//;\nconst trailingFragments = /\\/[^/]*$/;\nconst idAndPointer = /#.*$/;\n// @todo add missing test for urn ids\nconst isURN = /^urn:uuid:[0-9A-Fa-f]/;\nfunction joinScope(previous, id) {\n    if (previous == null && id == null) {\n        return "#";\n    }\n    if (id == null) {\n        return previous.replace(trailingHash, "");\n    }\n    if (isURN.test(id)) {\n        return id;\n    }\n    if (previous == null || previous === "" || previous === "#") {\n        return id.replace(trailingHash, "");\n    }\n    if (id[0] === "#") {\n        return `${previous.replace(idAndPointer, "")}${id.replace(suffixes, "")}`;\n    }\n    if (isDomain.test(id)) {\n        return id.replace(trailingHash, "");\n    }\n    if (isDomain.test(previous) && id.startsWith("/")) {\n        // we have a domain that should be joined with an absolute path\n        // thus we have to remove all paths from domain before joining\n        return `${previous.replace(/(^[^:]+:\\/\\/[^/]+)(.*)/, "$1")}/${id.replace(startingHashAndSlash, "")}`;\n    }\n    return `${previous.replace(trailingFragments, "")}/${id.replace(startingHashAndSlash, "")}`;\n}\n\n// EXTERNAL MODULE: ./node_modules/@sagold/json-pointer/dist/jsonPointer.js\nvar jsonPointer = __webpack_require__(2546);\nvar jsonPointer_default = /*#__PURE__*/__webpack_require__.n(jsonPointer);\n;// ./node_modules/json-schema-library/dist/module/lib/compile/splitRef.js\nconst splitRef_suffixes = /(#)+$/g;\nconst emptyValues = ["", null, "#"];\nfunction splitRef($ref) {\n    if (emptyValues.includes($ref)) {\n        return [];\n    }\n    $ref = $ref.replace(splitRef_suffixes, "");\n    if ($ref.indexOf("#") === -1) {\n        return [$ref.replace(/(#|\\/)+$/g, "")];\n    }\n    if ($ref.indexOf("#") === 0) {\n        return [$ref.replace(splitRef_suffixes, "")];\n    }\n    const result = $ref.split("#");\n    result[0] = result[0].replace(/(#|\\/)+$/g, "");\n    result[1] = `#${result[1].replace(splitRef_suffixes, "")}`;\n    return result;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/compile/getRef.js\n\n\n\nconst getRef_suffixes = /(#)+$/g;\nconst getRef_isObject = (val) => getTypeOf(val) === "object";\n// 1. combined is known\n// 2. base or pointer is known\n// 3. base + pointer is known\nfunction getRef(context, rootSchema, $search) {\n    var _a, _b, _c, _d, _e;\n    let $ref;\n    if (getRef_isObject($search)) {\n        $ref = $search.__ref || $search.$ref;\n    }\n    else {\n        $ref = $search;\n    }\n    if ($ref == null) {\n        return rootSchema;\n    }\n    // console.log("\\n$ref", $ref);\n    let schema;\n    // is it a known $ref?\n    const $remote = $ref.replace(getRef_suffixes, "");\n    if (context.remotes[$remote] != null) {\n        schema = context.remotes[$remote];\n        // console.log("\xbb remote");\n        if (schema && schema.$ref) {\n            // console.log("\xbb\xbb reresolve", schema);\n            // @todo add missing test for the following line\n            return getRef(context, schema, schema);\n        }\n        // console.log("\xbb\xbb return", schema);\n        return schema;\n    }\n    // @ts-expect-error @draft 2019-09\n    const $anchor = (_a = context.anchors) === null || _a === void 0 ? void 0 : _a[$ref];\n    if ($anchor) {\n        // console.log("\xbb anchor", $anchor);\n        return (0,jsonPointer.get)(rootSchema, $anchor);\n    }\n    if (context.ids[$ref] != null) {\n        // console.log("\xbb id", context.ids[$ref]);\n        schema = (0,jsonPointer.get)(rootSchema, context.ids[$ref]);\n        if (schema && schema.$ref) {\n            // @todo add missing test for the following line\n            return getRef(context, rootSchema, schema);\n        }\n        return schema;\n    }\n    const $inputRef = $ref;\n    // is it a ref with host/pointer?\n    const fragments = splitRef($ref);\n    if (fragments.length === 0) {\n        return rootSchema;\n    }\n    if (fragments.length === 1) {\n        // console.log("\xbb frag1", fragments);\n        // console.log("ids", rootSchema.getContext().ids);\n        $ref = fragments[0];\n        if (context.remotes[$ref]) {\n            // console.log("\xbb remote");\n            schema = context.remotes[$ref];\n            if (schema && schema.$ref) {\n                return getRef(context, rootSchema, schema);\n            }\n        }\n        if (context.ids[$ref]) {\n            // console.log("\xbb id");\n            schema = (0,jsonPointer.get)(rootSchema, context.ids[$ref]);\n            if (schema && schema.$ref) {\n                return getRef(context, rootSchema, schema);\n            }\n            return schema;\n        }\n        // @todo why this special case\n        const rootContextRef = (_b = rootSchema.getContext) === null || _b === void 0 ? void 0 : _b.call(rootSchema).ids[$ref];\n        if (rootContextRef) {\n            return getRef(context, rootSchema, rootContextRef);\n        }\n    }\n    if (fragments.length === 2) {\n        // console.log("\xbb frag2", fragments);\n        const base = fragments[0];\n        $ref = fragments[1];\n        // @todo this is unnecessary due to inconsistencies\n        const fromRemote = (_c = context.remotes[base]) !== null && _c !== void 0 ? _c : context.remotes[`${base}/`];\n        if (fromRemote) {\n            // console.log("\xbb remote");\n            // We have retrieved a different compiled json-schema. This compiled schema contains a\n            // separate scope (context) where we might need to work with\n            // ANCHOR\n            if (fromRemote.getContext && fromRemote.getContext().anchors[$inputRef] != null) {\n                // console.log("\xbb remote \xbb anchor");\n                // an anchor is stored with its scope (id) it is defined in. Thus collisions are\n                // avoided, but the current condition is required to resolve the anchor for now\n                return fromRemote.getRef($inputRef);\n            }\n            // PATH (get_ref)\n            if (fromRemote.getRef) {\n                // console.log("\xbb remote \xbb ref");\n                // resolve the local part of the reference in the new schema\n                return fromRemote.getRef($ref);\n            }\n            //log("warning: uncompiled remote - context may be wrong", base);\n            return getRef(context, fromRemote, $ref);\n        }\n        // @todo this is unnecessary due to inconsistencies\n        const fromId = (_d = context.ids[base]) !== null && _d !== void 0 ? _d : context.ids[`${base}/`];\n        if (fromId) {\n            // console.log("\xbb id", fromId);\n            return getRef(context, (0,jsonPointer.get)(rootSchema, fromId), $ref);\n        }\n    }\n    // console.log("\xbb other");\n    schema = (0,jsonPointer.get)(rootSchema, (_e = context.ids[$ref]) !== null && _e !== void 0 ? _e : $ref);\n    if (schema && schema.$ref) {\n        return getRef(context, rootSchema, schema);\n    }\n    return schema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/compile/index.js\n/* eslint max-statements-per-line: ["error", { "max": 2 }] */\n\n\n\n\nconst COMPILED = "__compiled";\nconst COMPILED_REF = "__ref";\nconst GET_REF = "getRef";\nconst GET_ROOT = "getRoot";\nconst compile_suffixes = /(#|\\/)+$/g;\n/**\n * compiles the input root schema for `$ref` resolution and returns it again\n * @attention this modifies input schema but maintains data-structure and thus returns\n * the same object with JSON.stringify\n *\n * for a compiled json-schema you can call getRef on any contained schema (location of type).\n * this resolves a $ref target to a valid schema (for a valid $ref)\n *\n * @param draft\n * @param schemaToCompile - json-schema to compile\n * @param [rootSchema] - compiled root json-schema to use for definitions resolution\n * @param [force] = false - force compile json-schema\n * @return compiled input json-schema\n */\nfunction compileSchema(draft, schemaToCompile, rootSchema = schemaToCompile, force = false) {\n    if (!schemaToCompile || schemaToCompile[COMPILED] !== undefined) {\n        return schemaToCompile;\n    }\n    const context = { ids: {}, remotes: draft.remotes };\n    const rootSchemaAsString = JSON.stringify(schemaToCompile);\n    const compiledSchema = JSON.parse(rootSchemaAsString);\n    Object.defineProperties(compiledSchema, {\n        // flag this schema as compiled\n        [COMPILED]: { enumerable: false, value: true },\n        // add getRef-helper to this object\n        [GET_REF]: {\n            enumerable: false,\n            value: getRef.bind(null, context, compiledSchema)\n        }\n    });\n    // bail early, when no $refs are defined\n    if (force === false && rootSchemaAsString.includes("$ref") === false) {\n        return compiledSchema;\n    }\n    // compile this schema under rootSchema, making definitions available to $ref-resolution\n    if (schemaToCompile !== rootSchema) {\n        Object.defineProperty(compiledSchema, "definitions", {\n            enumerable: false,\n            value: Object.assign({}, rootSchema.definitions, rootSchema.$defs, schemaToCompile.definitions, schemaToCompile.$defs)\n        });\n    }\n    const scopes = {};\n    const getRoot = () => compiledSchema;\n    eachSchema(compiledSchema, (schema, pointer) => {\n        var _a;\n        if (schema.id) {\n            // if this is a schema being merged on root object, we cannot override\n            // parents locations, but must reuse it\n            if (schema.id.startsWith("http") && /(allOf|anyOf|oneOf)\\/\\d+$/.test(pointer)) {\n                const parentPointer = pointer.replace(/\\/(allOf|anyOf|oneOf)\\/\\d+$/, "");\n                const parentSchema = (0,jsonPointer.get)(compiledSchema, parentPointer);\n                schema.id = (_a = parentSchema.id) !== null && _a !== void 0 ? _a : schema.id;\n            }\n            context.ids[schema.id.replace(compile_suffixes, "")] = pointer;\n        }\n        // build up scopes and add them to $ref-resolution map\n        pointer = `#${pointer}`.replace(/##+/, "#");\n        const previousPointer = pointer.replace(/\\/[^/]+$/, "");\n        const parentPointer = pointer.replace(/\\/[^/]+\\/[^/]+$/, "");\n        const previousScope = scopes[previousPointer] || scopes[parentPointer];\n        const scope = joinScope(previousScope, schema.id);\n        scopes[pointer] = scope;\n        if (context.ids[scope] == null) {\n            context.ids[scope] = pointer;\n        }\n        if (schema.$ref && !schema[COMPILED_REF]) {\n            Object.defineProperty(schema, COMPILED_REF, {\n                enumerable: false,\n                value: joinScope(scope, schema.$ref)\n            });\n            // @todo currently not used:\n            Object.defineProperty(schema, GET_ROOT, { enumerable: false, value: getRoot });\n            // console.log("compiled ref", scope, schema.$ref, "=>", joinScope(scope, schema.$ref));\n        }\n    });\n    // console.log(JSON.stringify(context.ids, null, 2));\n    return compiledSchema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/createSchemaOf.js\n\n\n/**\n * Create a simple json schema for the given input data\n * @param  data - data to get json schema for\n */\nfunction createSchemaOf(data) {\n    if (data === undefined) {\n        return undefined;\n    }\n    const schema = {\n        type: getTypeOf(data)\n    };\n    if (schema.type === "object" && isObject(data)) {\n        schema.properties = {};\n        Object.keys(data).forEach((key) => (schema.properties[key] = createSchemaOf(data[key])));\n    }\n    if (schema.type === "array" && Array.isArray(data)) {\n        if (data.length === 1) {\n            schema.items = createSchemaOf(data[0]);\n        }\n        else {\n            schema.items = data.map(createSchemaOf);\n        }\n    }\n    return schema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/validation/errors.js\n/* eslint no-invalid-this: 0 */\n\nconst errors = {\n    additionalItemsError: createCustomError("AdditionalItemsError"),\n    additionalPropertiesError: createCustomError("AdditionalPropertiesError"),\n    allOfError: createCustomError("AllOfError"),\n    anyOfError: createCustomError("AnyOfError"),\n    constError: createCustomError("ConstError"),\n    containsAnyError: createCustomError("ContainsAnyError"),\n    containsArrayError: createCustomError("ContainsArrayError"),\n    containsError: createCustomError("ContainsError"),\n    containsMaxError: createCustomError("ContainsMaxError"),\n    containsMinError: createCustomError("ContainsMinError"),\n    enumError: createCustomError("EnumError"),\n    forbiddenPropertyError: createCustomError("ForbiddenPropertyError"),\n    formatDateError: createCustomError("FormatDateError"),\n    formatDateTimeError: createCustomError("FormatDateTimeError"),\n    formatDurationError: createCustomError("FormatDurationError"),\n    formatEmailError: createCustomError("FormatEmailError"),\n    formatHostnameError: createCustomError("FormatHostnameError"),\n    formatIPV4Error: createCustomError("FormatIPV4Error"),\n    formatIPV4LeadingZeroError: createCustomError("FormatIPV4LeadingZeroError"),\n    formatIPV6Error: createCustomError("FormatIPV6Error"),\n    formatIPV6LeadingZeroError: createCustomError("FormatIPV6LeadingZeroError"),\n    formatJsonPointerError: createCustomError("FormatJsonPointerError"),\n    formatRegExError: createCustomError("FormatRegExError"),\n    formatTimeError: createCustomError("FormatTimeError"),\n    formatURIError: createCustomError("FormatURIError"),\n    formatURIReferenceError: createCustomError("FormatURIReferenceError"),\n    formatURITemplateError: createCustomError("FormatURITemplateError"),\n    formatURLError: createCustomError("FormatURLError"),\n    formatUUIDError: createCustomError("FormatUUIDError"),\n    invalidDataError: createCustomError("InvalidDataError"),\n    invalidPropertyNameError: createCustomError("InvalidPropertyNameError"),\n    invalidSchemaError: createCustomError("InvalidSchemaError"),\n    invalidTypeError: createCustomError("InvalidTypeError"),\n    maximumError: createCustomError("MaximumError"),\n    maxItemsError: createCustomError("MaxItemsError"),\n    maxLengthError: createCustomError("MaxLengthError"),\n    maxPropertiesError: createCustomError("MaxPropertiesError"),\n    minimumError: createCustomError("MinimumError"),\n    minItemsError: createCustomError("MinItemsError"),\n    minItemsOneError: createCustomError("MinItemsOneError"),\n    minLengthError: createCustomError("MinLengthError"),\n    minLengthOneError: createCustomError("MinLengthOneError"),\n    minPropertiesError: createCustomError("MinPropertiesError"),\n    missingDependencyError: createCustomError("MissingDependencyError"),\n    missingOneOfPropertyError: createCustomError("MissingOneOfPropertyError"),\n    multipleOfError: createCustomError("MultipleOfError"),\n    multipleOneOfError: createCustomError("MultipleOneOfError"),\n    noAdditionalPropertiesError: createCustomError("NoAdditionalPropertiesError"),\n    notError: createCustomError("NotError"),\n    oneOfError: createCustomError("OneOfError"),\n    oneOfPropertyError: createCustomError("OneOfPropertyError"),\n    patternError: createCustomError("PatternError"),\n    patternPropertiesError: createCustomError("PatternPropertiesError"),\n    requiredPropertyError: createCustomError("RequiredPropertyError"),\n    schemaWarning: createCustomError("SchemaWarning"),\n    typeError: createCustomError("TypeError"),\n    undefinedValueError: createCustomError("UndefinedValueError"),\n    unevaluatedItemsError: createCustomError("UnevaluatedItemsError"),\n    unevaluatedPropertyError: createCustomError("UnevaluatedPropertyError"),\n    uniqueItemsError: createCustomError("UniqueItemsError"),\n    unknownPropertyError: createCustomError("UnknownPropertyError"),\n    valueNotEmptyError: createCustomError("ValueNotEmptyError")\n};\n/* harmony default export */ const validation_errors = (errors);\n\n// EXTERNAL MODULE: ./node_modules/valid-url/index.js\nvar valid_url = __webpack_require__(7853);\nvar valid_url_default = /*#__PURE__*/__webpack_require__.n(valid_url);\n// EXTERNAL MODULE: ./node_modules/smtp-address-parser/dist/lib/index.js\nvar lib = __webpack_require__(6125);\n;// ./node_modules/json-schema-library/dist/module/lib/validation/format.js\n\n\n\nconst isValidIPV4 = /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/;\nconst isValidIPV6 = /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))$/i;\nconst isValidHostname = /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/;\nconst matchDate = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/;\nconst matchTime = /^(?<time>(?:([0-1]\\d|2[0-3]):[0-5]\\d:(?<second>[0-5]\\d|60)))(?:\\.\\d+)?(?<offset>(?:z|[+-]([0-1]\\d|2[0-3])(?::?[0-5]\\d)?))$/i;\nconst DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst isValidJsonPointer = /^(?:\\/(?:[^~/]|~0|~1)*)*$/;\nconst isValidRelativeJsonPointer = /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/;\nconst isValidURIRef = /^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&\'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&\'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&\'"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&\'"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&\'"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&\'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&\'"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&\'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&\'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&\'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\n// uri-template: https://tools.ietf.org/html/rfc6570\nconst isValidURITemplate = /^(?:(?:[^\\x00-\\x20"\'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i;\nconst isValidDurationString = /^P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?$/;\n// Default Json-Schema formats: date-time, email, hostname, ipv4, ipv6, uri, uriref\nconst formatValidators = {\n    date: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        // https://github.com/cfworker/cfworker/blob/main/packages/json-schema/src/format.ts\n        // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\n        const matches = value.match(matchDate);\n        if (!matches) {\n            return draft.errors.formatDateTimeError({ value, pointer, schema });\n        }\n        const year = +matches[1];\n        const month = +matches[2];\n        const day = +matches[3];\n        // https://tools.ietf.org/html/rfc3339#appendix-C\n        const isLeapYear = year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n        if (month >= 1 &&\n            month <= 12 &&\n            day >= 1 &&\n            day <= (month == 2 && isLeapYear ? 29 : DAYS[month])) {\n            return undefined;\n        }\n        return draft.errors.formatDateError({ value, pointer, schema });\n    },\n    "date-time": (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        const dateAndTime = value.split(/t/i);\n        if (dateAndTime.length === 2) {\n            const dateIsValid = formatValidators.date(node, dateAndTime[0]) === undefined;\n            const timeIsValid = formatValidators.time(node, dateAndTime[1]) === undefined;\n            if (dateIsValid && timeIsValid) {\n                return undefined;\n            }\n        }\n        return draft.errors.formatDateTimeError({ value, pointer, schema });\n    },\n    duration: (node, value) => {\n        const type = getTypeOf(value);\n        if (type !== "string") {\n            return undefined;\n        }\n        // weeks cannot be combined with other units\n        const isInvalidDurationString = /(\\d+M)(\\d+W)|(\\d+Y)(\\d+W)/;\n        if (!isValidDurationString.test(value) ||\n            isInvalidDurationString.test(value)) {\n            return node.draft.errors.formatDurationError({\n                value,\n                pointer: node.pointer,\n                schema: node.schema\n            });\n        }\n    },\n    email: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        // taken from https://github.com/ExodusMovement/schemasafe/blob/master/src/formats.js\n        if (value[0] === \'"\') {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n        const [name, host, ...rest] = value.split("@");\n        if (!name || !host || rest.length !== 0 || name.length > 64 || host.length > 253) {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n        if (name[0] === "." || name.endsWith(".") || name.includes("..")) {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n        if (!/^[a-z0-9.-]+$/i.test(host) || !/^[a-z0-9.!#$%&\'*+/=?^_`{|}~-]+$/i.test(name)) {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n        if (!host.split(".").every((part) => /^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$/i.test(part))) {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n        return undefined;\n    },\n    /**\n     * @draft 7\n     * [RFC6531] https://json-schema.org/draft-07/json-schema-validation.html#RFC6531\n     */\n    "idn-email": (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        try {\n            (0,lib.parse)(value);\n            return undefined;\n        }\n        catch (e) {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n    },\n    hostname: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string") {\n            return undefined;\n        }\n        if (value === "" || isValidHostname.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatHostnameError({ value, pointer, schema });\n    },\n    ipv4: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (value && value[0] === "0") {\n            // leading zeroes should be rejected, as they are treated as octals\n            return draft.errors.formatIPV4LeadingZeroError({ value, pointer, schema });\n        }\n        if (value.length <= 15 && isValidIPV4.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatIPV4Error({ value, pointer, schema });\n    },\n    ipv6: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (value && value[0] === "0") {\n            // leading zeroes should be rejected, as they are treated as octals\n            return draft.errors.formatIPV6LeadingZeroError({ value, pointer, schema });\n        }\n        if (value.length <= 45 && isValidIPV6.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatIPV6Error({ value, pointer, schema });\n    },\n    "json-pointer": (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (isValidJsonPointer.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatJsonPointerError({ value, pointer, schema });\n    },\n    "relative-json-pointer": (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string") {\n            return undefined;\n        }\n        if (isValidRelativeJsonPointer.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatJsonPointerError({ value, pointer, schema });\n    },\n    regex: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value === "string" && /\\\\Z$/.test(value) === false) {\n            try {\n                new RegExp(value);\n                return undefined;\n            }\n            catch (e) { } // eslint-disable-line no-empty\n            return draft.errors.formatRegExError({ value, pointer, schema });\n        }\n        // v7 tests, ignore non-regex values\n        if (typeof value === "object" || typeof value === "number" || Array.isArray(value)) {\n            return undefined;\n        }\n        return draft.errors.formatRegExError({ value, pointer, schema });\n    },\n    // hh:mm:ss.sTZD\n    // RFC 3339 https://datatracker.ietf.org/doc/html/rfc3339#section-4\n    time: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        // https://github.com/cfworker/cfworker/blob/main/packages/json-schema/src/format.ts\n        const matches = value.match(matchTime);\n        if (!matches) {\n            return draft.errors.formatDateTimeError({ value, pointer, schema });\n        }\n        // leap second\n        if (matches.groups.second === "60") {\n            // bail early\n            if (/23:59:60(z|\\+00:00)/i.test(value)) {\n                return undefined;\n            }\n            // check if sum matches 23:59\n            const minutes = matches.groups.time.match(/(\\d+):(\\d+):/);\n            const offsetMinutes = matches.groups.offset.match(/(\\d+):(\\d+)/);\n            if (offsetMinutes) {\n                const hour = parseInt(minutes[1]);\n                const offsetHour = parseInt(offsetMinutes[1]);\n                const min = parseInt(minutes[2]);\n                const offsetMin = parseInt(offsetMinutes[2]);\n                let deltaTime;\n                if (/^-/.test(matches.groups.offset)) {\n                    deltaTime = (hour + offsetHour) * 60 + (min + offsetMin);\n                }\n                else {\n                    deltaTime = (24 + hour - offsetHour) * 60 + (min - offsetMin);\n                }\n                const hours = Math.floor(deltaTime / 60);\n                const actualHour = hours % 24;\n                const actualMinutes = deltaTime - hours * 60;\n                if (actualHour === 23 && actualMinutes === 59) {\n                    return undefined;\n                }\n            }\n            return draft.errors.formatDateTimeError({ value, pointer, schema });\n        }\n        return undefined;\n    },\n    uri: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (valid_url_default().isUri(value)) {\n            return undefined;\n        }\n        return draft.errors.formatURIError({ value, pointer, schema });\n    },\n    "uri-reference": (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (isValidURIRef.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatURIReferenceError({ value, pointer, schema });\n    },\n    "uri-template": (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (isValidURITemplate.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatURITemplateError({ value, pointer, schema });\n    },\n    url: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (value === "" || valid_url_default().isWebUri(value)) {\n            return undefined;\n        }\n        return draft.errors.formatURLError({ value, pointer, schema });\n    },\n    uuid: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatUUIDError({ value, pointer, schema });\n    }\n};\n/* harmony default export */ const format = (formatValidators);\n\n;// ./node_modules/json-schema-library/dist/module/lib/getChildSchemaSelection.js\n\n\n/**\n * Returns a list of possible child-schemas for the given property key. In case of a oneOf selection, multiple schemas\n * could be added at the given property (e.g. item-index), thus an array of options is returned. In all other cases\n * a list with a single item will be returned\n *\n * @param draft       - draft to use\n * @param property    - parent schema of following property\n * @param [schema]    - parent schema of following property\n * @return\n */\nfunction getChildSchemaSelection(draft, property, schema = draft.rootSchema) {\n    var _a;\n    if (schema.oneOf) {\n        return schema.oneOf.map((item) => draft.createNode(item).resolveRef().schema);\n    }\n    if ((_a = schema.items) === null || _a === void 0 ? void 0 : _a.oneOf) {\n        return schema.items.oneOf.map((item) => draft.createNode(item).resolveRef().schema);\n    }\n    // array.items[] found\n    if (Array.isArray(schema.items) && schema.items.length > +property) {\n        return [draft.step(draft.createNode(schema), property, {}).schema];\n    }\n    // array.items[] exceeded (or undefined), but additionalItems specified\n    if (schema.additionalItems && !isObject(schema.items)) {\n        // we fallback to a string if no schema is defined - might be subject for configuration\n        const additionalSchema = schema.additionalItems === true ? { type: "string" } : schema.additionalItems;\n        return [draft.createNode(additionalSchema).resolveRef().schema];\n    }\n    // array.items[] exceeded\n    if (Array.isArray(schema.items) && schema.items.length <= +property) {\n        return [];\n    }\n    const node = draft.step(draft.createNode(schema), property, {});\n    if (isJsonError(node)) {\n        const error = node;\n        return error;\n    }\n    return [node.schema];\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/getSchema.js\n\n\nconst emptyObject = {};\n/**\n * Returns a node containing json-schema of a data-json-pointer.\n *\n * To resolve dynamic schema where the type of json-schema is evaluated by\n * its value, a data object has to be passed in options.\n *\n * Per default this function will return `undefined` schema for valid properties\n * that do not have a defined schema. Use the option `withSchemaWarning: true` to\n * receive an error with `code: schema-warning` containing the location of its\n * last evaluated json-schema.\n *\n * Example:\n *\n * ```ts\n * draft.setSchema({ type: "object", properties: { title: { type: "string" } } });\n * const result = draft.getSchema({  pointer: "#/title" }, data: { title: "my header" });\n * const schema = isSchemaNode(result) ? result.schema : undefined;\n * // schema = { type: "string" }\n * ```\n *\n * @param draft\n * @param [options.pointer] - json pointer in data to get the json schema for\n * @param [options.data] - the data object, which includes the json pointers value. This is optional, as\n *    long as no oneOf, anyOf, etc statement is part of the pointers schema\n * @param [options.schema] - the json schema to iterate. Defaults to draft.rootSchema\n * @param [options.withSchemaWarning] - if true returns an error instead of `undefined` for valid properties missing a schema definition\n * @return json-error or node containing schema of requested json-pointer location\n */\nfunction getSchema(draft, options = emptyObject) {\n    const { pointer = "#", data, schema = draft.rootSchema, withSchemaWarning = false } = options;\n    const path = jsonPointer_default().split(pointer);\n    const node = draft.createNode(schema).resolveRef();\n    const result = _getSchema(node, path, data);\n    if (!withSchemaWarning && isJsonError(result) && result.code === "schema-warning") {\n        return draft.createNode(undefined);\n    }\n    return result;\n}\nfunction _getSchema(node, path, data = emptyObject) {\n    if (path.length === 0) {\n        return node.resolveRef();\n    }\n    const key = path.shift(); // step key\n    const nextNode = node.draft.step(node, key, data); // step schema\n    if (isJsonError(nextNode)) {\n        return nextNode;\n    }\n    // @ts-expect-error data\n    data = data[key]; // step data\n    return _getSchema(nextNode, path, data);\n}\n\n// EXTERNAL MODULE: ./node_modules/deepmerge/dist/cjs.js\nvar cjs = __webpack_require__(4744);\nvar cjs_default = /*#__PURE__*/__webpack_require__.n(cjs);\n;// ./node_modules/json-schema-library/dist/module/lib/utils/merge.js\n\nconst overwriteMerge = (destinationArray, sourceArray) => sourceArray;\n/**\n * returns a new json-schema, where properties are combined and arrays are replaced\n */\n/* harmony default export */ const utils_merge = ((a, b) => cjs_default()(a, b, { arrayMerge: overwriteMerge }));\n// var d = c.filter((item, pos) => c.indexOf(item) === pos)\nconst mergeUniqueItems = (destinationArray, sourceArray) => {\n    const all = destinationArray.concat(sourceArray);\n    return all.filter((item, pos) => all.indexOf(item) === pos);\n};\n/**\n * returns a new json-schema, where properties are combined and arrays are replaced\n */\nconst mergeArraysUnique = (a, b) => deepmerge(a, b, { arrayMerge: mergeUniqueItems });\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/isEmpty.js\n\nfunction isEmpty(v) {\n    const type = getTypeOf(v);\n    switch (type) {\n        case "string":\n        case "array":\n            // @ts-expect-error tested as array - could use ts type guard\n            return (v === null || v === void 0 ? void 0 : v.length) === 0;\n        case "null":\n        case "undefined":\n            return true;\n        case "object":\n            return Object.keys(v).length === 0;\n        default:\n            return false;\n    }\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/getTemplate.js\n/* eslint quote-props: 0, max-statements-per-line: ["error", { "max": 2 }] */\n\n\n\n\n\n\n\n\n\n\n\n\nconst defaultOptions = settings.templateDefaultOptions;\nlet cache;\nfunction shouldResolveRef(schema, pointer) {\n    const { $ref } = schema;\n    if ($ref == null) {\n        return true;\n    }\n    const value = cache[pointer] == null || cache[pointer][$ref] == null ? 0 : cache[pointer][$ref];\n    return value < settings.GET_TEMPLATE_RECURSION_LIMIT;\n}\nfunction getTemplate_resolveRef(draft, schema, pointer) {\n    const { $ref } = schema;\n    if ($ref == null) {\n        return schema;\n    }\n    // @todo pointer + ref is redundant?\n    cache[pointer] = cache[pointer] || {};\n    cache[pointer][$ref] = cache[pointer][$ref] || 0;\n    cache[pointer][$ref] += 1;\n    return draft.createNode(schema, pointer).resolveRef().schema;\n}\nfunction convertValue(type, value) {\n    if (type === "string") {\n        return JSON.stringify(value);\n    }\n    else if (typeof value !== "string") {\n        return null;\n    }\n    try {\n        value = JSON.parse(value);\n        if (typeof value === type) {\n            return value;\n        }\n    }\n    catch (e) { } // eslint-disable-line no-empty\n    return null;\n}\n/**\n * Resolves $ref, allOf and anyOf schema-options, returning a combined json-schema.\n * Also returns a pointer-property on schema, that must be used as current pointer.\n *\n * @param draft\n * @param schema\n * @param data\n * @param pointer\n * @return resolved json-schema or input-schema\n */\nfunction createTemplateSchema(draft, schema, data, pointer, opts) {\n    // invalid schema\n    if (getTypeOf(schema) !== "object") {\n        return Object.assign({ pointer }, schema);\n    }\n    // return if reached recursion limit\n    if (shouldResolveRef(schema, pointer) === false && data == null) {\n        return false;\n    }\n    // resolve $ref and copy schema\n    let templateSchema = copy(getTemplate_resolveRef(draft, schema, pointer));\n    // @feature anyOf\n    if (Array.isArray(schema.anyOf) && schema.anyOf.length > 0) {\n        // test if we may resolve\n        if (shouldResolveRef(schema.anyOf[0], `${pointer}/anyOf/0`)) {\n            const resolvedAnyOf = getTemplate_resolveRef(draft, schema.anyOf[0], `${pointer}/anyOf/0`);\n            templateSchema = utils_merge(templateSchema, resolvedAnyOf);\n            // add pointer return-value, if any\n            templateSchema.pointer = schema.anyOf[0].$ref || templateSchema.pointer;\n        }\n        delete templateSchema.anyOf;\n    }\n    // @feature allOf\n    if (Array.isArray(schema.allOf)) {\n        const mayResolve = schema.allOf\n            .map((allOf, index) => shouldResolveRef(allOf, `${pointer}/allOf/${index}`))\n            .reduceRight((next, before) => next && before, true);\n        if (mayResolve) {\n            // before merging all-of, we need to resolve all if-then-else statesments\n            // we need to udpate data on the way to trigger if-then-else schemas sequentially.\n            // Note that this will make if-then-else order-dependent\n            const allOf = [];\n            let extendedData = copy(data);\n            for (let i = 0; i < schema.allOf.length; i += 1) {\n                const allNode = draft.createNode(schema.allOf[i], pointer);\n                allOf.push(resolveSchema(allNode, extendedData).schema);\n                extendedData = getTemplate(draft, extendedData, { type: schema.type, ...allOf[i] }, `${pointer}/allOf/${i}`, opts);\n            }\n            const resolvedSchema = mergeAllOfSchema(draft, { allOf });\n            if (resolvedSchema) {\n                templateSchema = mergeSchema(templateSchema, resolvedSchema);\n            }\n        }\n    }\n    templateSchema.pointer = templateSchema.pointer || schema.$ref || pointer;\n    return templateSchema;\n}\nconst isJsonSchema = (template) => template && typeof template === "object";\n/**\n * Create data object matching the given schema\n *\n * @param draft - json schema draft\n * @param [data] - optional template data\n * @param [schema] - json schema, defaults to rootSchema\n * @return created template data\n */\nfunction getTemplate(draft, data, _schema, pointer, opts) {\n    var _a;\n    if (_schema == null) {\n        throw new Error(`getTemplate: missing schema for data: ${JSON.stringify(data)}`);\n    }\n    if (pointer == null) {\n        throw new Error("Missing pointer");\n    }\n    // resolve $ref references, allOf and first anyOf definitions\n    let schema = createTemplateSchema(draft, _schema, data, pointer, opts);\n    if (!isJsonSchema(schema)) {\n        return undefined;\n    }\n    pointer = schema.pointer;\n    if (schema === null || schema === void 0 ? void 0 : schema.const) {\n        return schema.const;\n    }\n    // @feature oneOf\n    if (Array.isArray(schema.oneOf)) {\n        if (isEmpty(data)) {\n            const type = schema.oneOf[0].type || schema.type || (schema.const && typeof schema.const) || getTypeOf(data);\n            schema = { ...schema.oneOf[0], type };\n        }\n        else {\n            // find correct schema for data\n            const oneNode = draft.createNode(schema, pointer);\n            const resolvedNode = resolveOneOfFuzzy(oneNode, data);\n            if (isJsonError(resolvedNode)) {\n                if (data != null && opts.removeInvalidData !== true) {\n                    return data;\n                }\n                // override\n                schema = schema.oneOf[0];\n                data = undefined;\n            }\n            else {\n                const resolvedSchema = resolvedNode.schema;\n                resolvedSchema.type = (_a = resolvedSchema.type) !== null && _a !== void 0 ? _a : schema.type;\n                schema = resolvedSchema;\n            }\n        }\n    }\n    // @todo Array.isArray(schema.type)\n    // -> hasDefault? return\n    // if not -> pick first types\n    if (!isJsonSchema(schema) || schema.type == null) {\n        return undefined;\n    }\n    // @attention - very special case to support file instances\n    if (data instanceof File) {\n        return data;\n    }\n    const type = Array.isArray(schema.type) ? selectType(schema.type, data, schema.default) : schema.type;\n    // reset invalid type\n    const javascriptTypeOfData = getTypeOf(data);\n    if (data != null && javascriptTypeOfData !== type && !(javascriptTypeOfData === "number" && type === "integer")) {\n        data = convertValue(type, data);\n    }\n    if (TYPE[type] == null) {\n        // in case we could not resolve the type\n        // (schema-type could not be resolved and returned an error)\n        if (opts.removeInvalidData) {\n            return undefined;\n        }\n        return data;\n    }\n    const templateData = TYPE[type](draft, schema, data, pointer, opts);\n    return templateData;\n}\nfunction selectType(types, data, defaultValue) {\n    if (data == undefined) {\n        if (defaultValue != null) {\n            const defaultType = getTypeOf(defaultValue);\n            if (types.includes(defaultType)) {\n                return defaultType;\n            }\n        }\n        return types[0];\n    }\n    const dataType = getTypeOf(data);\n    if (types.includes(dataType)) {\n        return dataType;\n    }\n    return types[0];\n}\nconst TYPE = {\n    null: (draft, schema, data) => getDefault(schema, data, null),\n    string: (draft, schema, data) => getDefault(schema, data, ""),\n    number: (draft, schema, data) => getDefault(schema, data, 0),\n    integer: (draft, schema, data) => getDefault(schema, data, 0),\n    boolean: (draft, schema, data) => getDefault(schema, data, false),\n    object: (draft, schema, data, pointer, opts) => {\n        var _a;\n        const template = schema.default === undefined ? {} : schema.default;\n        const d = {}; // do not assign data here, to keep ordering from json-schema\n        const required = opts.extendDefaults === false && schema.default !== undefined ? [] : ((_a = schema.required) !== null && _a !== void 0 ? _a : []);\n        if (schema.properties) {\n            Object.keys(schema.properties).forEach((key) => {\n                const value = data == null || data[key] == null ? template[key] : data[key];\n                const isRequired = required.includes(key);\n                // Omit adding a property if it is not required or optional props should be added\n                if (value != null || isRequired || opts.addOptionalProps) {\n                    d[key] = getTemplate(draft, value, schema.properties[key], `${pointer}/properties/${key}`, opts);\n                }\n            });\n        }\n        // @feature dependencies\n        // has to be done after resolving properties so dependency may trigger\n        const dNode = draft.createNode(schema, pointer);\n        let dependenciesSchema = resolveDependencies(dNode, d);\n        if (dependenciesSchema) {\n            dependenciesSchema = mergeSchema(schema, dependenciesSchema);\n            delete dependenciesSchema.dependencies;\n            const dependencyData = getTemplate(draft, data, dependenciesSchema, `${pointer}/dependencies`, opts);\n            Object.assign(d, dependencyData);\n        }\n        if (data) {\n            if (opts.removeInvalidData === true &&\n                (schema.additionalProperties === false || getTypeOf(schema.additionalProperties) === "object")) {\n                if (getTypeOf(schema.additionalProperties) === "object") {\n                    Object.keys(data).forEach((key) => {\n                        if (d[key] == null) {\n                            // merge valid missing data (additionals) to resulting object\n                            if (draft.isValid(data[key], schema.additionalProperties)) {\n                                d[key] = data[key];\n                            }\n                        }\n                    });\n                }\n            }\n            else {\n                // merge any missing data (additionals) to resulting object\n                Object.keys(data).forEach((key) => d[key] == null && (d[key] = data[key]));\n            }\n        }\n        // @feature if-then-else\n        const node = draft.createNode(schema, pointer);\n        const ifSchema = resolveIfSchema(node, d);\n        if (isSchemaNode(ifSchema)) {\n            const additionalData = getTemplate(draft, d, { type: "object", ...ifSchema.schema }, pointer, opts);\n            Object.assign(d, additionalData);\n        }\n        // returns object, which is ordered by json-schema\n        return d;\n    },\n    // build array type of items, ignores additionalItems\n    array: (draft, schema, data, pointer, opts) => {\n        var _a, _b, _c;\n        const template = schema.default === undefined ? [] : schema.default;\n        const d = data || template;\n        const minItems = opts.extendDefaults === false && schema.default !== undefined ? 0 : ((_a = schema.minItems) !== null && _a !== void 0 ? _a : 0);\n        if (schema.items == null) {\n            if (schema.additionalItems) {\n                // items-array was processed & this is not an items-schema\n                // => all items are additionalItems\n                const itemCount = Math.max(minItems, d.length);\n                for (let i = 0; i < itemCount; i += 1) {\n                    d[i] = getTemplate(draft, d[i], schema.additionalItems, `${pointer}/additionalItems`, opts);\n                }\n            }\n            return data || []; // items are undefined\n        }\n        // build defined set of items\n        if (Array.isArray(schema.items)) {\n            const length = Math.max(minItems !== null && minItems !== void 0 ? minItems : 0, (_c = (_b = schema.items) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0);\n            for (let i = 0; i < length; i += 1) {\n                if (schema.items[i]) {\n                    d[i] = getTemplate(draft, d[i] == null ? template[i] : d[i], schema.items[i], `${pointer}/items/${i}`, opts);\n                }\n                else if (schema.additionalItems) {\n                    d[i] = getTemplate(draft, d[i] == null ? template[i] : d[i], schema.additionalItems, `${pointer}/additionalItems`, opts);\n                }\n            }\n            return d;\n        }\n        // no items-schema - return\n        if (getTypeOf(schema.items) !== "object") {\n            return d;\n        }\n        // resolve allOf and first anyOf definition\n        const templateSchema = createTemplateSchema(draft, schema.items, data, pointer, opts);\n        if (templateSchema === false) {\n            return d;\n        }\n        pointer = templateSchema.pointer || pointer;\n        // build data for first oneOf-schema\n        if (templateSchema.oneOf && d.length === 0) {\n            const oneOfSchema = templateSchema.oneOf[0];\n            for (let i = 0; i < minItems; i += 1) {\n                d[i] = getTemplate(draft, d[i] == null ? template[i] : d[i], oneOfSchema, `${pointer}/oneOf/0`, opts);\n            }\n            return d;\n        }\n        // complete data selecting correct oneOf-schema\n        if (templateSchema.oneOf && d.length > 0) {\n            const itemCount = Math.max(minItems, d.length);\n            for (let i = 0; i < itemCount; i += 1) {\n                let value = d[i] == null ? template[i] : d[i];\n                const oneNode = draft.createNode(templateSchema, pointer);\n                let one = resolveOneOfFuzzy(oneNode, value);\n                if (one == null || isJsonError(one)) {\n                    // schema could not be resolved or data is invalid\n                    if (value != null && opts.removeInvalidData !== true) {\n                        // keep invalid value\n                        d[i] = value;\n                    }\n                    else {\n                        // replace invalid value\n                        value = undefined;\n                        one = templateSchema.oneOf[0];\n                        d[i] = getTemplate(draft, value, one, `${pointer}/oneOf/${i}`, opts);\n                    }\n                }\n                else {\n                    // schema is valid\n                    d[i] = getTemplate(draft, value, one.schema, `${pointer}/oneOf/${i}`, opts);\n                }\n            }\n            return d;\n        }\n        // build data from items-definition\n        if (templateSchema.type) {\n            for (let i = 0, l = Math.max(minItems, d.length); i < l; i += 1) {\n                d[i] = getTemplate(draft, d[i] == null ? template[i] : d[i], templateSchema, `${pointer}/items`, opts);\n            }\n            return d;\n        }\n        return d;\n    }\n};\nfunction getDefault(schema, templateValue, initValue) {\n    if (templateValue != null) {\n        return templateValue;\n    }\n    else if (schema.const) {\n        return schema.const;\n    }\n    else if (schema.default === undefined && Array.isArray(schema.enum)) {\n        return schema.enum[0];\n    }\n    else if (schema.default === undefined) {\n        return initValue;\n    }\n    return schema.default;\n}\n/* harmony default export */ const lib_getTemplate = ((draft, data, schema = draft.rootSchema, opts) => {\n    cache = {};\n    if (opts) {\n        return getTemplate(draft, data, schema, "#", { ...defaultOptions, ...opts });\n    }\n    return getTemplate(draft, data, schema, "#", defaultOptions);\n});\n\n;// ./node_modules/json-schema-library/dist/module/lib/isValid.js\n/**\n * Test if the data is valid according to the given schema\n *\n * @param draft - validator\n * @param value - value to validate\n * @param [schema] - json schema\n * @param [pointer] - json pointer pointing to value\n * @return if schema does match given value\n */\nfunction isValid(draft, value, schema = draft.rootSchema, pointer = "#") {\n    const node = draft.createNode(schema, pointer);\n    return draft.validate(node, value).length === 0;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/punycode.ucs2decode.js\n/* eslint no-bitwise: 0 */\n/**\n * taken from punycode@2.1.0\n *\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param string The Unicode input string (UCS-2).\n * @returns The new array of code points.\n */\nfunction ucs2decode(string) {\n    const output = [];\n    let counter = 0;\n    const length = string.length;\n    while (counter < length) {\n        const value = string.charCodeAt(counter++);\n        if (value >= 0xd800 && value <= 0xdbff && counter < length) {\n            // It\'s a high surrogate, and there is a next character.\n            const extra = string.charCodeAt(counter++);\n            // eslint-disable-next-line eqeqeq\n            if ((extra & 0xfc00) == 0xdc00) {\n                // Low surrogate.\n                output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\n            }\n            else {\n                // It\'s an unmatched surrogate; only append this code unit, in case the\n                // next code unit is the high surrogate of a surrogate pair.\n                output.push(value);\n                counter--;\n            }\n        }\n        else {\n            output.push(value);\n        }\n    }\n    return output;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/getPrecision.js\n/**\n * returns the floating point precision of a decimal number or 0\n */\nfunction getPrecision(value) {\n    const string = `${value}`;\n    if (string.includes("e-")) {\n        return parseInt(string.replace(/.*e-/, ""));\n    }\n    const index = string.indexOf(".");\n    return index === -1 ? 0 : string.length - (index + 1);\n}\n\n// EXTERNAL MODULE: ./node_modules/fast-deep-equal/index.js\nvar fast_deep_equal = __webpack_require__(2017);\nvar fast_deep_equal_default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal);\n;// ./node_modules/json-schema-library/dist/module/lib/validation/keyword.js\n\n\n\n\n\n\n\n\n\n\n\nconst keyword_hasOwnProperty = Object.prototype.hasOwnProperty;\nconst hasProperty = (value, property) => !(value[property] === undefined || !keyword_hasOwnProperty.call(value, property));\n// list of validation keywords: http://json-schema.org/latest/json-schema-validation.html#rfc.section.5\nconst KeywordValidation = {\n    additionalProperties: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (schema.additionalProperties === true || schema.additionalProperties == null) {\n            return undefined;\n        }\n        if (getTypeOf(schema.patternProperties) === "object" &&\n            schema.additionalProperties === false) {\n            // this is an arrangement with patternProperties. patternProperties validate before additionalProperties:\n            // https://spacetelescope.github.io/understanding-json-schema/reference/object.html#index-5\n            return undefined;\n        }\n        const errors = [];\n        let receivedProperties = Object.keys(value).filter((prop) => settings.propertyBlacklist.includes(prop) === false);\n        const expectedProperties = Object.keys(schema.properties || {});\n        if (getTypeOf(schema.patternProperties) === "object") {\n            // filter received properties by matching patternProperties\n            const patterns = Object.keys(schema.patternProperties).map((pattern) => new RegExp(pattern));\n            receivedProperties = receivedProperties.filter((prop) => {\n                for (let i = 0; i < patterns.length; i += 1) {\n                    if (patterns[i].test(prop)) {\n                        return false; // remove\n                    }\n                }\n                return true;\n            });\n        }\n        // adds an error for each an unexpected property\n        for (let i = 0, l = receivedProperties.length; i < l; i += 1) {\n            const property = receivedProperties[i];\n            if (expectedProperties.indexOf(property) === -1) {\n                const additionalIsObject = isObject(schema.additionalProperties);\n                // additionalProperties { oneOf: [] }\n                if (additionalIsObject && Array.isArray(schema.additionalProperties.oneOf)) {\n                    const result = draft.resolveOneOf(node.next(schema.additionalProperties), value[property]);\n                    if (isJsonError(result)) {\n                        errors.push(draft.errors.additionalPropertiesError({\n                            pointer,\n                            schema: schema.additionalProperties,\n                            value,\n                            property: receivedProperties[i],\n                            properties: expectedProperties,\n                            // pass all validation errors\n                            errors: result.data.errors\n                        }));\n                    }\n                    else {\n                        errors.push(...draft.validate(node.next(result, property), value[property]));\n                    }\n                    // additionalProperties {}\n                }\n                else if (additionalIsObject) {\n                    const res = draft.validate(node.next(schema.additionalProperties, property), value[property]);\n                    errors.push(...res);\n                }\n                else {\n                    errors.push(draft.errors.noAdditionalPropertiesError({\n                        pointer,\n                        schema,\n                        value,\n                        property: receivedProperties[i],\n                        properties: expectedProperties\n                    }));\n                }\n            }\n        }\n        return errors;\n    },\n    allOf: validateAllOf,\n    anyOf: validateAnyOf,\n    dependencies: validateDependencies,\n    enum: (node, value) => {\n        const { draft, schema, pointer } = node;\n        const type = getTypeOf(value);\n        if (type === "object" || type === "array") {\n            const valueStr = JSON.stringify(value);\n            for (let i = 0; i < schema.enum.length; i += 1) {\n                if (JSON.stringify(schema.enum[i]) === valueStr) {\n                    return undefined;\n                }\n            }\n        }\n        else if (schema.enum.includes(value)) {\n            return undefined;\n        }\n        return draft.errors.enumError({ pointer, schema, value, values: schema.enum });\n    },\n    format: (node, value) => {\n        const { draft, schema } = node;\n        if (draft.validateFormat[schema.format]) {\n            const errors = draft.validateFormat[schema.format](node, value);\n            return errors;\n        }\n        // fail silently if given format is not defined\n        return undefined;\n    },\n    items: (node, value) => {\n        const { draft, schema, pointer } = node;\n        // @draft >= 7 bool schema\n        if (schema.items === false) {\n            if (Array.isArray(value) && value.length === 0) {\n                return undefined;\n            }\n            return draft.errors.invalidDataError({ pointer, value, schema });\n        }\n        const errors = [];\n        for (let i = 0; i < value.length; i += 1) {\n            const itemData = value[i];\n            // @todo reevaluate: incomplete schema is created here\n            const itemNode = draft.step(node.next(schema), i, value);\n            if (isJsonError(itemNode)) {\n                return [itemNode];\n            }\n            const itemErrors = draft.validate(itemNode, itemData);\n            errors.push(...itemErrors);\n        }\n        return errors;\n    },\n    maximum: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.maximum)) {\n            return undefined;\n        }\n        if (schema.maximum && schema.maximum < value) {\n            return draft.errors.maximumError({\n                maximum: schema.maximum,\n                length: value,\n                value,\n                pointer,\n                schema\n            });\n        }\n        if (schema.maximum && schema.exclusiveMaximum === true && schema.maximum === value) {\n            return draft.errors.maximumError({\n                maximum: schema.maximum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    maxItems: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.maxItems)) {\n            return undefined;\n        }\n        if (schema.maxItems < value.length) {\n            return draft.errors.maxItemsError({\n                maximum: schema.maxItems,\n                length: value.length,\n                schema,\n                value,\n                pointer\n            });\n        }\n        return undefined;\n    },\n    maxLength: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.maxLength)) {\n            return undefined;\n        }\n        const lengthOfString = ucs2decode(value).length;\n        if (schema.maxLength < lengthOfString) {\n            return draft.errors.maxLengthError({\n                maxLength: schema.maxLength,\n                length: lengthOfString,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    maxProperties: (node, value) => {\n        const { draft, schema, pointer } = node;\n        const propertyCount = Object.keys(value).length;\n        if (isNaN(schema.maxProperties) === false && schema.maxProperties < propertyCount) {\n            return draft.errors.maxPropertiesError({\n                maxProperties: schema.maxProperties,\n                length: propertyCount,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    minLength: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.minLength)) {\n            return undefined;\n        }\n        const lengthOfString = ucs2decode(value).length;\n        if (schema.minLength > lengthOfString) {\n            if (schema.minLength === 1) {\n                return draft.errors.minLengthOneError({\n                    minLength: schema.minLength,\n                    length: lengthOfString,\n                    pointer,\n                    schema,\n                    value\n                });\n            }\n            return draft.errors.minLengthError({\n                minLength: schema.minLength,\n                length: lengthOfString,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    minimum: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.minimum)) {\n            return undefined;\n        }\n        if (schema.minimum > value) {\n            return draft.errors.minimumError({\n                minimum: schema.minimum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        if (schema.exclusiveMinimum === true && schema.minimum === value) {\n            return draft.errors.minimumError({\n                minimum: schema.minimum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    minItems: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.minItems)) {\n            return undefined;\n        }\n        if (schema.minItems > value.length) {\n            if (schema.minItems === 1) {\n                return draft.errors.minItemsOneError({\n                    minItems: schema.minItems,\n                    length: value.length,\n                    pointer,\n                    schema,\n                    value\n                });\n            }\n            return draft.errors.minItemsError({\n                minItems: schema.minItems,\n                length: value.length,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    minProperties: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.minProperties)) {\n            return undefined;\n        }\n        const propertyCount = Object.keys(value).length;\n        if (schema.minProperties > propertyCount) {\n            return draft.errors.minPropertiesError({\n                minProperties: schema.minProperties,\n                length: propertyCount,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    multipleOf: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.multipleOf) || typeof value !== "number") {\n            return undefined;\n        }\n        const valuePrecision = getPrecision(value);\n        const multiplePrecision = getPrecision(schema.multipleOf);\n        if (valuePrecision > multiplePrecision) {\n            // value with higher precision then multipleOf-precision can never be multiple\n            return draft.errors.multipleOfError({\n                multipleOf: schema.multipleOf,\n                value,\n                pointer,\n                schema\n            });\n        }\n        const precision = Math.pow(10, multiplePrecision);\n        const val = Math.round(value * precision);\n        const multiple = Math.round(schema.multipleOf * precision);\n        if ((val % multiple) / precision !== 0) {\n            return draft.errors.multipleOfError({\n                multipleOf: schema.multipleOf,\n                value,\n                pointer,\n                schema\n            });\n        }\n        // maybe also check overflow\n        // https://stackoverflow.com/questions/1815367/catch-and-compute-overflow-during-multiplication-of-two-large-integers\n        return undefined;\n    },\n    not: (node, value) => {\n        const { draft, schema, pointer } = node;\n        const errors = [];\n        if (draft.validate(node.next(schema.not), value).length === 0) {\n            errors.push(draft.errors.notError({ value, not: schema.not, pointer, schema }));\n        }\n        return errors;\n    },\n    oneOf: validateOneOf,\n    pattern: (node, value) => {\n        const { draft, schema, pointer } = node;\n        const pattern = new RegExp(schema.pattern, "u");\n        if (pattern.test(value) === false) {\n            return draft.errors.patternError({\n                pattern: schema.pattern,\n                description: schema.patternExample || schema.pattern,\n                received: value,\n                schema,\n                value,\n                pointer\n            });\n        }\n        return undefined;\n    },\n    patternProperties: (node, value) => {\n        const { draft, schema, pointer } = node;\n        const properties = schema.properties || {};\n        const pp = schema.patternProperties;\n        if (getTypeOf(pp) !== "object") {\n            return undefined;\n        }\n        const errors = [];\n        const keys = Object.keys(value);\n        const patterns = Object.keys(pp).map((expr) => ({\n            regex: new RegExp(expr),\n            patternSchema: pp[expr]\n        }));\n        keys.forEach((key) => {\n            let patternFound = false;\n            for (let i = 0, l = patterns.length; i < l; i += 1) {\n                if (patterns[i].regex.test(key)) {\n                    patternFound = true;\n                    const valErrors = draft.validate(node.next(patterns[i].patternSchema, key), value[key]);\n                    if (valErrors && valErrors.length > 0) {\n                        errors.push(...valErrors);\n                    }\n                }\n            }\n            if (properties[key]) {\n                return;\n            }\n            if (patternFound === false && schema.additionalProperties === false) {\n                // this is an arrangement with additionalProperties\n                errors.push(draft.errors.patternPropertiesError({\n                    key,\n                    pointer,\n                    schema,\n                    value,\n                    patterns: Object.keys(pp).join(",")\n                }));\n            }\n        });\n        return errors;\n    },\n    properties: (node, value) => {\n        const { draft, schema } = node;\n        const errors = [];\n        const keys = Object.keys(schema.properties || {});\n        for (let i = 0; i < keys.length; i += 1) {\n            const key = keys[i];\n            if (hasProperty(value, key)) {\n                const itemNode = draft.step(node, key, value);\n                if (isJsonError(itemNode)) {\n                    errors.push(itemNode);\n                }\n                else {\n                    const keyErrors = draft.validate(itemNode, value[key]);\n                    errors.push(...keyErrors);\n                }\n            }\n        }\n        return errors;\n    },\n    // @todo move to separate file: this is custom keyword validation for JsonEditor.properties keyword\n    propertiesRequired: (node, value) => {\n        const { draft, schema, pointer } = node;\n        const errors = [];\n        const keys = Object.keys(schema.properties || {});\n        for (let i = 0; i < keys.length; i += 1) {\n            const key = keys[i];\n            if (value[key] === undefined) {\n                errors.push(draft.errors.requiredPropertyError({ key, pointer, schema, value }));\n            }\n            else {\n                const itemNode = draft.step(node, key, value);\n                const keyErrors = draft.validate(itemNode, value[key]);\n                errors.push(...keyErrors);\n            }\n        }\n        return errors;\n    },\n    required: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (Array.isArray(schema.required) === false) {\n            return undefined;\n        }\n        return schema.required.map((property) => {\n            if (!hasProperty(value, property)) {\n                return draft.errors.requiredPropertyError({\n                    key: property,\n                    pointer,\n                    schema,\n                    value\n                });\n            }\n            return undefined;\n        });\n    },\n    // @todo move to separate file: this is custom keyword validation for JsonEditor.required keyword\n    requiredNotEmpty: (node, value) => {\n        const { schema } = node;\n        if (Array.isArray(schema.required) === false) {\n            return undefined;\n        }\n        return schema.required.map((property) => {\n            const { draft, schema, pointer } = node;\n            if (value[property] == null || value[property] === "") {\n                return draft.errors.valueNotEmptyError({\n                    property,\n                    pointer: `${pointer}/${property}`,\n                    schema,\n                    value\n                });\n            }\n            return undefined;\n        });\n    },\n    uniqueItems: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if ((Array.isArray(value) && schema.uniqueItems) === false) {\n            return undefined;\n        }\n        const duplicates = [];\n        const errors = [];\n        value.forEach((item, index) => {\n            for (let i = index + 1; i < value.length; i += 1) {\n                if (fast_deep_equal_default()(item, value[i]) && !duplicates.includes(i)) {\n                    errors.push(draft.errors.uniqueItemsError({\n                        pointer: `${pointer}/${i}`,\n                        duplicatePointer: `${pointer}/${index}`,\n                        arrayPointer: pointer,\n                        value: JSON.stringify(item),\n                        schema\n                    }));\n                    duplicates.push(i);\n                }\n            }\n        });\n        return errors;\n    }\n};\n/* harmony default export */ const keyword = (KeywordValidation);\n\n;// ./node_modules/json-schema-library/dist/module/lib/step.js\n\n\n\n\nconst stepType = {\n    array: (node, key, data) => {\n        const { draft, schema, pointer } = node;\n        const itemValue = data === null || data === void 0 ? void 0 : data[key];\n        const itemsType = getTypeOf(schema.items);\n        if (itemsType === "object") {\n            // @spec: ignore additionalItems, when items is schema-object\n            return reduceSchema(node.next(schema.items, key), itemValue);\n        }\n        if (itemsType === "array") {\n            // @draft >= 7 bool schema, items:[true, false]\n            if (schema.items[key] === true) {\n                return node.next(createSchemaOf(itemValue), key);\n            }\n            // @draft >= 7 bool schema, items:[true, false]\n            if (schema.items[key] === false) {\n                return draft.errors.invalidDataError({\n                    key,\n                    value: itemValue,\n                    pointer,\n                    schema\n                });\n            }\n            if (schema.items[key]) {\n                return draft.resolveRef(node.next(schema.items[key], key));\n            }\n            if (schema.additionalItems === false) {\n                return draft.errors.additionalItemsError({\n                    key,\n                    value: itemValue,\n                    pointer,\n                    schema\n                });\n            }\n            if (schema.additionalItems === true || schema.additionalItems === undefined) {\n                return node.next(createSchemaOf(itemValue), key);\n            }\n            if (getTypeOf(schema.additionalItems) === "object") {\n                return node.next(schema.additionalItems, key);\n            }\n            throw new Error(`Invalid schema ${JSON.stringify(schema, null, 2)} for ${JSON.stringify(data, null, 2)}`);\n        }\n        if (schema.additionalItems !== false && itemValue) {\n            // @todo reevaluate: incomplete schema is created here\n            // @todo support additionalItems: {schema}\n            return node.next(createSchemaOf(itemValue), key);\n        }\n        return new Error(`Invalid array schema for ${key} at ${pointer}`);\n    },\n    object: (node, key, data) => {\n        var _a, _b;\n        const { draft, pointer } = node;\n        const reduction = reduceSchema(node, data);\n        const schema = ((_a = reduction.schema) !== null && _a !== void 0 ? _a : reduction);\n        // @feature properties\n        const property = (_b = schema === null || schema === void 0 ? void 0 : schema.properties) === null || _b === void 0 ? void 0 : _b[key];\n        if (property !== undefined) {\n            // @todo patternProperties also validate properties\n            // @feature boolean schema\n            if (property === false) {\n                return draft.errors.forbiddenPropertyError({\n                    property: key,\n                    value: data,\n                    pointer,\n                    schema\n                });\n            }\n            else if (property === true) {\n                return node.next(createSchemaOf(data === null || data === void 0 ? void 0 : data[key]), key);\n            }\n            const nextPropertyNode = draft.resolveRef(node.next(property, key));\n            if (isJsonError(nextPropertyNode)) {\n                return nextPropertyNode;\n            }\n            // check if there is a oneOf selection, which must be resolved\n            if (nextPropertyNode && Array.isArray(nextPropertyNode.schema.oneOf)) {\n                // @special case: this is a mix of a schema and optional definitions\n                // we resolve the schema here and add the original schema to `oneOfSchema`\n                const nextNode = node.next(nextPropertyNode.schema, key);\n                const result = draft.resolveOneOf(nextNode, data[key]);\n                if (isJsonError(result)) {\n                    return result;\n                }\n                return nextNode.merge(result.schema, "oneOf");\n            }\n            if (nextPropertyNode) {\n                return nextPropertyNode;\n            }\n        }\n        // @feature patternProperties\n        const { patternProperties } = schema;\n        if (getTypeOf(patternProperties) === "object") {\n            // find matching property key\n            let regex;\n            const patterns = Object.keys(patternProperties);\n            for (let i = 0, l = patterns.length; i < l; i += 1) {\n                regex = new RegExp(patterns[i]);\n                if (regex.test(key)) {\n                    return node.next(patternProperties[patterns[i]], key);\n                }\n            }\n        }\n        // @feature additionalProperties\n        const { additionalProperties } = schema;\n        if (getTypeOf(additionalProperties) === "object") {\n            return node.next(schema.additionalProperties, key);\n        }\n        if (data && (additionalProperties === undefined || additionalProperties === true)) {\n            const generatedSchema = createSchemaOf(data[key]);\n            return generatedSchema ? node.next(generatedSchema, key) : undefined;\n        }\n        return draft.errors.unknownPropertyError({\n            property: key,\n            value: data,\n            pointer: `${pointer}`,\n            schema\n        });\n    }\n};\n/**\n * Returns the json-schema of the given object property or array item.\n * e.g. it steps by one key into the data\n *\n *  This helper determines the location of the property within the schema (additional properties, oneOf, ...) and\n *  returns the correct schema.\n *\n * @param  draft      - validator\n * @param  key       - property-name or array-index\n * @param  schema    - json schema of current data\n * @param  data      - parent of key\n * @param  [pointer] - pointer to schema and data (parent of key)\n * @return Schema or Error if failed resolving key\n */\nfunction step(node, key, data) {\n    var _a;\n    const { draft, schema, pointer } = node;\n    const typeOfData = getTypeOf(data);\n    let schemaType = (_a = schema.type) !== null && _a !== void 0 ? _a : typeOfData;\n    // @draft >= 4 ?\n    if (Array.isArray(schemaType)) {\n        if (!schemaType.includes(typeOfData)) {\n            return draft.errors.typeError({\n                value: data,\n                pointer,\n                expected: schema.type,\n                received: typeOfData,\n                schema\n            });\n        }\n        schemaType = typeOfData;\n    }\n    const stepFunction = stepType[schemaType];\n    if (stepFunction) {\n        const childNode = stepFunction(node, `${key}`, data);\n        if (childNode === undefined) {\n            return draft.errors.schemaWarning({ pointer, value: data, schema, key });\n        }\n        return childNode;\n    }\n    return new Error(`Unsupported schema type ${schema.type} for key ${key}`);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/validation/type.js\n/**\n * @todo: type is also a keyword, as is properties, items, etc\n *\n * An instance has one of six primitive types (http://json-schema.org/latest/json-schema-node.draft.html#rfc.section.4.2)\n * or seven in case of ajv https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#type\n * 1 null, 2 boolean, 3 object, 4 array, 5 number, 6 string (7 integer)\n */\nconst typeValidators = {\n    array: (node, value) => node.draft.typeKeywords.array\n        .filter((key) => node.schema && node.schema[key] != null)\n        .map((key) => node.draft.validateKeyword[key](node, value)),\n    object: (node, value) => node.draft.typeKeywords.object\n        .filter((key) => node.schema && node.schema[key] != null)\n        .map((key) => node.draft.validateKeyword[key](node, value)),\n    string: (node, value) => node.draft.typeKeywords.string\n        .filter((key) => node.schema && node.schema[key] != null)\n        .map((key) => node.draft.validateKeyword[key](node, value)),\n    integer: (node, value) => node.draft.typeKeywords.number\n        .filter((key) => node.schema && node.schema[key] != null)\n        .map((key) => node.draft.validateKeyword[key](node, value)),\n    number: (node, value) => node.draft.typeKeywords.number\n        .filter((key) => node.schema && node.schema[key] != null)\n        .map((key) => node.draft.validateKeyword[key](node, value)),\n    boolean: (node, value) => node.draft.typeKeywords.boolean\n        .filter((key) => node.schema && node.schema[key] != null)\n        .map((key) => node.draft.validateKeyword[key](node, value)),\n    null: (node, value) => node.draft.typeKeywords.null\n        .filter((key) => node.schema && node.schema[key] != null)\n        .map((key) => node.draft.validateKeyword[key](node, value))\n};\n/* harmony default export */ const type = (typeValidators);\n\n;// ./node_modules/json-schema-library/dist/module/lib/validate.js\n\n\n\n\n\n\nfunction getJsonSchemaType(value, expectedType) {\n    const jsType = getTypeOf(value);\n    if (jsType === "number" &&\n        (expectedType === "integer" ||\n            (Array.isArray(expectedType) && expectedType.includes("integer")))) {\n        return Number.isInteger(value) || isNaN(value) ? "integer" : "number";\n    }\n    return jsType;\n}\n/**\n * Validates data with json schema\n *\n * @param draft - validator\n * @param value - value to validate\n * @param [schema] - json schema, defaults to rootSchema\n * @param [pointer] - json pointer pointing to value (used for error-messages only)\n * @return list of errors or empty\n */\nfunction validate(node, value) {\n    if (!isSchemaNode(node)) {\n        throw new Error("node expected");\n    }\n    const { draft, pointer } = node;\n    node = node.resolveRef();\n    const schema = node.schema;\n    if (schema == null) {\n        throw new Error("missing schema");\n    }\n    // @draft >= 07\n    if (getTypeOf(schema) === "boolean") {\n        if (schema) {\n            return [];\n        }\n        return [draft.errors.invalidDataError({ pointer, schema, value })];\n    }\n    if (isJsonError(schema)) {\n        return [schema];\n    }\n    // @draft >= 6 const\n    if (schema.const !== undefined) {\n        if (fast_deep_equal_default()(schema.const, value)) {\n            return [];\n        }\n        return [draft.errors.constError({ pointer, schema, value, expected: schema.const })];\n    }\n    const receivedType = getJsonSchemaType(value, schema.type);\n    const expectedType = schema.type || receivedType;\n    if (receivedType !== expectedType &&\n        (!Array.isArray(expectedType) || !expectedType.includes(receivedType))) {\n        return [\n            draft.errors.typeError({\n                pointer,\n                schema,\n                value,\n                received: receivedType,\n                expected: expectedType\n            })\n        ];\n    }\n    if (draft.validateType[receivedType] == null) {\n        return [draft.errors.invalidTypeError({ pointer, schema, value, receivedType })];\n    }\n    // get type validation results\n    const errors = flattenArray(draft.validateType[receivedType](node, value));\n    return errors.filter(errorOrPromise); // ignore promises here\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/each.js\n\n\n/**\n * Iterates over data, retrieving its schema\n *\n * @param draft - validator\n * @param data - the data to iterate\n * @param callback - will be called with (schema, data, pointer) on each item\n * @param [schema] - the schema matching the data. Defaults to rootSchema\n * @param [pointer] - pointer to current data. Default to rootPointer\n */\nfunction each(schemaNode, data, callback) {\n    const node = schemaNode.resolveRef();\n    const { draft, schema, pointer } = node;\n    callback(schema, data, pointer);\n    const dataType = getTypeOf(data);\n    if (dataType === "object") {\n        Object.keys(data).forEach((key) => {\n            const nextNode = draft.step(node, key, data);\n            if (isSchemaNode(nextNode)) {\n                each(nextNode, data[key], callback);\n            }\n        });\n    }\n    else if (dataType === "array") {\n        data.forEach((next, key) => {\n            const nextNode = draft.step(node, key, data);\n            if (isSchemaNode(nextNode)) {\n                each(nextNode, data[key], callback);\n            }\n        });\n    }\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft04/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst draft04Config = {\n    typeKeywords: {\n        array: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "items",\n            "maxItems",\n            "minItems",\n            "not",\n            "oneOf",\n            "uniqueItems"\n        ],\n        boolean: ["enum", "not", "allOf", "anyOf", "oneOf"],\n        object: [\n            "additionalProperties",\n            "dependencies",\n            "enum",\n            "format",\n            "minProperties",\n            "maxProperties",\n            "patternProperties",\n            "properties",\n            "required",\n            "not",\n            "oneOf",\n            "allOf",\n            "anyOf"\n        ],\n        string: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "format",\n            "maxLength",\n            "minLength",\n            "not",\n            "oneOf",\n            "pattern"\n        ],\n        number: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "format",\n            "maximum",\n            "minimum",\n            "multipleOf",\n            "not",\n            "oneOf"\n        ],\n        null: ["allOf", "anyOf", "enum", "format", "not", "oneOf"]\n    },\n    createNode: createNode,\n    validateKeyword: keyword,\n    validateType: type,\n    validateFormat: format,\n    errors: validation_errors,\n    addRemoteSchema: addRemoteSchema,\n    compileSchema: compileSchema,\n    createSchemaOf: createSchemaOf,\n    each: each,\n    eachSchema: eachSchema,\n    getChildSchemaSelection: getChildSchemaSelection,\n    getSchema: getSchema,\n    getTemplate: lib_getTemplate,\n    isValid: isValid,\n    resolveAllOf: resolveAllOf,\n    resolveAnyOf: resolveAnyOf,\n    resolveOneOf: resolveOneOf,\n    resolveRef: resolveRef_strict_resolveRef,\n    step: step,\n    validate: validate,\n    templateDefaultOptions: settings.templateDefaultOptions\n};\nclass Draft04 extends Draft {\n    constructor(schema, config = {}) {\n        super(utils_merge(draft04Config, config), schema);\n    }\n}\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/addRemoteSchema.js\n/**\n * register a json-schema to be referenced from another json-schema\n * @param url    base-url of json-schema (aka id)\n * @param schema\n */\nfunction addRemoteSchema_addRemoteSchema(draft, url, schema) {\n    // @draft >= 6\n    schema.$id = schema.$id || url;\n    draft.remotes[url] = draft.compileSchema(schema);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft06/compile/index.js\n\n// import remotes from "../../../remotes";\n\n\n\nconst compile_COMPILED = "__compiled";\nconst compile_COMPILED_REF = "__ref";\nconst compile_GET_REF = "getRef";\nconst compile_GET_ROOT = "getRoot";\nconst GET_CONTEXT = "getContext";\nconst draft06_compile_suffixes = /(#|\\/)+$/g;\n/**\n * @draft 6, 2019-09\n * - starting with _draft 2019-09_ plain name fragments are no longer defined with $id,\n *  but instead with the new keyword $anchor (which has a different syntax)\n *  https://json-schema.org/draft/2019-09/release-notes#incompatible-changes\n * - in _draft 2019-09_ only $recursiveAnchor and $recursiveRef have been introduced\n * - starting with _draft 6_ id is named $id\n *\n * compiles the input root schema for $ref resolution and returns it again\n * @attention this modifies input schema but maintains object-structure\n *\n * for a compiled json-schema you can call getRef on any contained schema (location of type).\n * this resolves a $ref target to a valid schema (for a valid $ref)\n *\n * @param rootSchema root json-schema ($id, defs, ... ) to compile\n * @param [force] = false force compile json-schema\n * @return compiled json-schema\n */\nfunction compile_compileSchema(draft, schemaToCompile, rootSchema = schemaToCompile, force = false) {\n    // @ts-expect-error incomplete JsonSchema type\n    if (schemaToCompile === true || schemaToCompile === false || schemaToCompile === undefined) {\n        return schemaToCompile;\n    }\n    if (schemaToCompile[compile_COMPILED] !== undefined) {\n        return schemaToCompile;\n    } // eslint-disable-line\n    // console.log("compile schema", schemaToCompile.$id);\n    const context = { ids: {}, anchors: {}, remotes: draft.remotes };\n    const rootSchemaAsString = JSON.stringify(schemaToCompile);\n    const compiledSchema = JSON.parse(rootSchemaAsString);\n    Object.defineProperties(compiledSchema, {\n        [compile_COMPILED]: { enumerable: false, value: true },\n        [GET_CONTEXT]: { enumerable: false, value: () => context },\n        [compile_GET_REF]: {\n            enumerable: false,\n            value: getRef.bind(null, context, compiledSchema)\n        }\n    });\n    // bail early, when no $refs are defined\n    if (force === false && rootSchemaAsString.includes("$ref") === false) {\n        return compiledSchema;\n    }\n    // compile this schema under rootSchema, making definitions available to $ref-resolution\n    if (compiledSchema !== rootSchema) {\n        Object.defineProperty(compiledSchema, "$defs", {\n            enumerable: true,\n            value: Object.assign({}, rootSchema.definitions, rootSchema.$defs, compiledSchema.definitions, compiledSchema.$defs)\n        });\n    }\n    const scopes = {};\n    const getRoot = () => compiledSchema;\n    eachSchema(compiledSchema, (schema, pointer) => {\n        var _a;\n        if (schema.$id) {\n            // if this is a schema being merged on root object, we cannot override\n            // parents locations, but must reuse it\n            if (schema.$id.startsWith("http") && /(allOf|anyOf|oneOf|if)\\/\\d+$/.test(pointer)) {\n                const parentPointer = pointer.replace(/\\/(allOf|anyOf|oneOf|if)\\/\\d+$/, "");\n                const parentSchema = (0,jsonPointer.get)(compiledSchema, parentPointer);\n                schema.$id = (_a = parentSchema.$id) !== null && _a !== void 0 ? _a : schema.$id;\n            }\n            context.ids[schema.$id.replace(draft06_compile_suffixes, "")] = pointer;\n        }\n        // build up scopes and add them to $ref-resolution map\n        pointer = `#${pointer}`.replace(/##+/, "#");\n        const previousPointer = pointer.replace(/\\/[^/]+$/, "");\n        const parentPointer = pointer.replace(/\\/[^/]+\\/[^/]+$/, "");\n        const previousScope = scopes[previousPointer] || scopes[parentPointer];\n        const scope = joinScope(previousScope, schema.$id);\n        // // @todo specify behaviour - we do not save ids with trailing slashes...\n        scopes[pointer] = scope;\n        if (context.ids[scope] == null) {\n            context.ids[scope] = pointer;\n        }\n        if (schema.$anchor) {\n            context.anchors[`${scope}#${schema.$anchor}`] = pointer;\n        }\n        if (schema.$ref && !schema[compile_COMPILED_REF]) {\n            Object.defineProperty(schema, compile_COMPILED_REF, {\n                enumerable: false,\n                value: joinScope(scope, schema.$ref)\n            });\n            Object.defineProperty(schema, compile_GET_ROOT, { enumerable: false, value: getRoot });\n        }\n    });\n    // console.log("ids", context.ids);\n    // console.log("anchors", context.anchors);\n    return compiledSchema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft06/validation/keyword.js\n\n\n\nconst keyword_KeywordValidation = {\n    ...keyword,\n    // @draft >= 6\n    contains: (node, value) => {\n        var _a, _b;\n        const { draft, schema, pointer } = node;\n        if (schema.contains === false) {\n            return draft.errors.containsArrayError({ pointer, value, schema });\n        }\n        if (schema.contains === true) {\n            if (Array.isArray(value) && value.length === 0) {\n                return draft.errors.containsAnyError({ pointer, value, schema });\n            }\n            return undefined;\n        }\n        if (getTypeOf(schema.contains) !== "object") {\n            // ignore invalid schema\n            return undefined;\n        }\n        let count = 0;\n        for (let i = 0; i < value.length; i += 1) {\n            if (draft.validate(node.next(schema.contains, i), value[i]).length === 0) {\n                count++;\n            }\n        }\n        // @draft >= 2019-09\n        const max = (_a = schema.maxContains) !== null && _a !== void 0 ? _a : Infinity;\n        const min = (_b = schema.minContains) !== null && _b !== void 0 ? _b : 1;\n        if (max >= count && min <= count) {\n            return undefined;\n        }\n        if (max < count) {\n            return draft.errors.containsMaxError({ pointer, schema, delta: count - max, value });\n        }\n        if (min > count) {\n            return draft.errors.containsMinError({ pointer, schema, delta: min - count, value });\n        }\n        return draft.errors.containsError({ pointer, schema, value });\n    },\n    exclusiveMaximum: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.exclusiveMaximum)) {\n            return undefined;\n        }\n        if (schema.exclusiveMaximum <= value) {\n            return draft.errors.maximumError({\n                maximum: schema.exclusiveMaximum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    exclusiveMinimum: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.exclusiveMinimum)) {\n            return undefined;\n        }\n        if (schema.exclusiveMinimum >= value) {\n            return draft.errors.minimumError({\n                minimum: schema.exclusiveMinimum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    // @feature if-then-else\n    if: validateIf,\n    maximum: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.maximum)) {\n            return undefined;\n        }\n        if (schema.maximum && schema.maximum < value) {\n            return draft.errors.maximumError({\n                maximum: schema.maximum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    minimum: (node, value) => {\n        const { draft, schema, pointer } = node;\n        if (isNaN(schema.minimum)) {\n            return undefined;\n        }\n        if (schema.minimum > value) {\n            return draft.errors.minimumError({\n                minimum: schema.minimum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    patternProperties: (node, value) => {\n        const { draft, schema, pointer } = node;\n        const properties = schema.properties || {};\n        const pp = schema.patternProperties;\n        if (getTypeOf(pp) !== "object") {\n            return undefined;\n        }\n        const errors = [];\n        const keys = Object.keys(value);\n        const patterns = Object.keys(pp).map((expr) => ({\n            regex: new RegExp(expr),\n            patternSchema: pp[expr]\n        }));\n        keys.forEach((key) => {\n            let patternFound = false;\n            for (let i = 0, l = patterns.length; i < l; i += 1) {\n                if (patterns[i].regex.test(key)) {\n                    patternFound = true;\n                    // for a boolean schema `false`, always invalidate\n                    if (patterns[i].patternSchema === false) {\n                        errors.push(draft.errors.patternPropertiesError({\n                            key,\n                            pointer,\n                            patterns: Object.keys(pp).join(","),\n                            schema,\n                            value\n                        }));\n                        return;\n                    }\n                    const valErrors = draft.validate(node.next(patterns[i].patternSchema, key), value[key]);\n                    if (valErrors && valErrors.length > 0) {\n                        errors.push(...valErrors);\n                    }\n                }\n            }\n            if (properties[key]) {\n                return;\n            }\n            if (patternFound === false && schema.additionalProperties === false) {\n                // this is an arrangement with additionalProperties\n                errors.push(draft.errors.patternPropertiesError({\n                    key,\n                    pointer,\n                    patterns: Object.keys(pp).join(","),\n                    schema,\n                    value\n                }));\n            }\n        });\n        return errors;\n    },\n    // @draft >= 6\n    propertyNames: (node, value) => {\n        const { draft, schema, pointer } = node;\n        // bool schema\n        if (schema.propertyNames === false) {\n            // empty objects are valid\n            if (Object.keys(value).length === 0) {\n                return undefined;\n            }\n            return draft.errors.invalidPropertyNameError({\n                property: Object.keys(value),\n                pointer,\n                value,\n                schema\n            });\n        }\n        if (schema.propertyNames === true) {\n            return undefined;\n        }\n        if (getTypeOf(schema.propertyNames) !== "object") {\n            // ignore invalid schema\n            return undefined;\n        }\n        const errors = [];\n        const properties = Object.keys(value);\n        const propertySchema = { ...schema.propertyNames, type: "string" };\n        properties.forEach((prop) => {\n            const nextNode = node.next(propertySchema, prop);\n            const validationResult = draft.validate(nextNode, prop);\n            if (validationResult.length > 0) {\n                errors.push(draft.errors.invalidPropertyNameError({\n                    property: prop,\n                    pointer,\n                    validationError: validationResult[0],\n                    value: value[prop],\n                    schema\n                }));\n            }\n        });\n        return errors;\n    }\n};\n/* harmony default export */ const validation_keyword = (keyword_KeywordValidation);\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft06/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst draft06Config = {\n    typeKeywords: {\n        array: [\n            "allOf",\n            "anyOf",\n            "contains",\n            "enum",\n            "if",\n            "items",\n            "maxItems",\n            "minItems",\n            "not",\n            "oneOf",\n            "uniqueItems"\n        ],\n        boolean: ["allOf", "anyOf", "enum", "not", "oneOf"],\n        object: [\n            "additionalProperties",\n            "allOf",\n            "anyOf",\n            "dependencies",\n            "enum",\n            "format",\n            "if",\n            "maxProperties",\n            "minProperties",\n            "not",\n            "oneOf",\n            "patternProperties",\n            "properties",\n            "propertyNames",\n            "required"\n        ],\n        string: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "format",\n            "if",\n            "maxLength",\n            "minLength",\n            "not",\n            "oneOf",\n            "pattern"\n        ],\n        number: [\n            "enum",\n            "exclusiveMaximum",\n            "exclusiveMinimum",\n            "format",\n            "maximum",\n            "minimum",\n            "multipleOf",\n            "not",\n            "oneOf",\n            "allOf",\n            "anyOf",\n            "if"\n        ],\n        null: ["allOf", "anyOf", "enum", "format", "not", "oneOf"]\n    },\n    validateKeyword: validation_keyword,\n    validateType: type,\n    validateFormat: format,\n    errors: validation_errors,\n    createNode: createNode,\n    addRemoteSchema: addRemoteSchema_addRemoteSchema,\n    compileSchema: compile_compileSchema,\n    createSchemaOf: createSchemaOf,\n    each: each,\n    eachSchema: eachSchema,\n    getChildSchemaSelection: getChildSchemaSelection,\n    getSchema: getSchema,\n    getTemplate: lib_getTemplate,\n    isValid: isValid,\n    resolveAllOf: resolveAllOf,\n    resolveAnyOf: resolveAnyOf,\n    resolveOneOf: resolveOneOf,\n    resolveRef: resolveRef_strict_resolveRef,\n    step: step,\n    validate: validate,\n    templateDefaultOptions: settings.templateDefaultOptions\n};\nclass Draft06 extends Draft {\n    constructor(schema, config = {}) {\n        super(utils_merge(draft06Config, config), schema);\n    }\n}\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft07/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst draft07Config = {\n    typeKeywords: {\n        array: [\n            "allOf",\n            "anyOf",\n            "contains",\n            "enum",\n            "if",\n            "items",\n            "maxItems",\n            "minItems",\n            "not",\n            "oneOf",\n            "uniqueItems"\n        ],\n        boolean: ["allOf", "anyOf", "enum", "not", "oneOf"],\n        object: [\n            "additionalProperties",\n            "allOf",\n            "anyOf",\n            "dependencies",\n            "enum",\n            "format",\n            "if",\n            "maxProperties",\n            "minProperties",\n            "not",\n            "oneOf",\n            "patternProperties",\n            "properties",\n            "propertyNames",\n            "required"\n        ],\n        string: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "format",\n            "if",\n            "maxLength",\n            "minLength",\n            "not",\n            "oneOf",\n            "pattern"\n        ],\n        number: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "exclusiveMaximum",\n            "exclusiveMinimum",\n            "format",\n            "if",\n            "maximum",\n            "minimum",\n            "multipleOf",\n            "not",\n            "oneOf"\n        ],\n        null: ["allOf", "anyOf", "enum", "format", "not", "oneOf"]\n    },\n    validateKeyword: validation_keyword,\n    validateType: type,\n    validateFormat: format,\n    errors: validation_errors,\n    createNode: createNode,\n    addRemoteSchema: addRemoteSchema_addRemoteSchema,\n    compileSchema: compile_compileSchema,\n    createSchemaOf: createSchemaOf,\n    each: each,\n    eachSchema: eachSchema,\n    getChildSchemaSelection: getChildSchemaSelection,\n    getSchema: getSchema,\n    getTemplate: lib_getTemplate,\n    isValid: isValid,\n    resolveAllOf: resolveAllOf,\n    resolveAnyOf: resolveAnyOf,\n    resolveOneOf: resolveOneOf,\n    resolveRef: resolveRef_strict_resolveRef,\n    step: step,\n    validate: validate,\n    templateDefaultOptions: settings.templateDefaultOptions\n};\nclass Draft07 extends Draft {\n    constructor(schema, config = {}) {\n        super(utils_merge(draft07Config, config), schema);\n    }\n}\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft2019/validation/keyword.js\n\n\n\n\n/**\n * Get a list of tests to search for a matching pattern to a property\n */\nconst getPatternTests = (patternProperties) => isObject(patternProperties)\n    ? Object.keys(patternProperties).map((pattern) => new RegExp(pattern))\n    : [];\n/** tests if a property is evaluated by the given schema */\nfunction isPropertyEvaluated(schemaNode, propertyName, value) {\n    var _a, _b;\n    const node = schemaNode.draft.resolveRef(schemaNode);\n    const { schema } = node;\n    if (schema.additionalProperties === true) {\n        return true;\n    }\n    // PROPERTIES\n    if ((_a = schema.properties) === null || _a === void 0 ? void 0 : _a[propertyName]) {\n        const nextSchema = (_b = schema.properties) === null || _b === void 0 ? void 0 : _b[propertyName];\n        if (node.draft.isValid(value, nextSchema)) {\n            return true;\n        }\n    }\n    // PATTERN-PROPERTIES\n    const patterns = getPatternTests(schema.patternProperties);\n    if (patterns.find((pattern) => pattern.test(propertyName))) {\n        return true;\n    }\n    // ADDITIONAL-PROPERTIES\n    if (isObject(schema.additionalProperties)) {\n        const nextSchema = schema.additionalProperties;\n        return node.draft.validate(node.next(nextSchema), value);\n    }\n    return false;\n}\nconst validation_keyword_KeywordValidation = {\n    // ...omit(Keywords, "dependencies"),\n    ...validation_keyword,\n    dependencies: undefined,\n    dependentSchemas: validateDependentSchemas,\n    dependentRequired: validateDependentRequired,\n    /**\n     * @draft >= 2019-09\n     * Similar to additionalProperties, but can "see" into subschemas and across references\n     * https://json-schema.org/draft/2019-09/json-schema-core#rfc.section.9.3.2.4\n     */\n    unevaluatedProperties: (node, value) => {\n        var _a;\n        const { draft, schema, pointer } = node;\n        // if not in properties, evaluated by additionalProperties and not matches patternProperties\n        // @todo we need to know dynamic parent statements - they should not be counted as evaluated...\n        if (!isObject(value) || schema.unevaluatedProperties == null) {\n            return undefined;\n        }\n        let unevaluated = Object.keys(value);\n        if (unevaluated.length === 0) {\n            return undefined;\n        }\n        // resolve all dynamic schemas\n        const reduction = reduceSchema(node, value);\n        const resolvedSchema = ((_a = reduction.schema) !== null && _a !== void 0 ? _a : reduction);\n        // console.log("unevaluatedProperties", JSON.stringify(resolvedSchema, null, 2), value);\n        if (resolvedSchema.unevaluatedProperties === true) {\n            return undefined;\n        }\n        const testPatterns = getPatternTests(resolvedSchema.patternProperties);\n        unevaluated = unevaluated.filter((key) => {\n            var _a;\n            if ((_a = resolvedSchema.properties) === null || _a === void 0 ? void 0 : _a[key]) {\n                return false;\n            }\n            // special case: an evaluation in if statement counts too\n            // we have an unevaluated prop only if the if-schema does not match\n            if (isObject(schema.if) &&\n                isPropertyEvaluated(node.next({ type: "object", ...schema.if }), key, value[key])) {\n                return false;\n            }\n            if (testPatterns.find((pattern) => pattern.test(key))) {\n                return false;\n            }\n            // @todo is this evaluated by additionaProperties per property\n            if (resolvedSchema.additionalProperties) {\n                return false;\n            }\n            return true;\n        });\n        if (unevaluated.length === 0) {\n            return undefined;\n        }\n        const errors = [];\n        if (resolvedSchema.unevaluatedProperties === false) {\n            unevaluated.forEach((key) => {\n                errors.push(draft.errors.unevaluatedPropertyError({\n                    pointer: `${pointer}/${key}`,\n                    value: JSON.stringify(value[key]),\n                    schema\n                }));\n            });\n            return errors;\n        }\n        unevaluated.forEach((key) => {\n            if (isObject(resolvedSchema.unevaluatedProperties)) {\n                // note: only key changes\n                const keyErrors = draft.validate(node.next(resolvedSchema.unevaluatedProperties, key), value[key]);\n                errors.push(...keyErrors);\n            }\n        });\n        return errors;\n    },\n    /**\n     * @draft >= 2019-09\n     * Similar to additionalItems, but can "see" into subschemas and across references\n     * https://json-schema.org/draft/2019-09/json-schema-core#rfc.section.9.3.1.3\n     */\n    unevaluatedItems: (node, value) => {\n        var _a;\n        const { draft, schema, pointer } = node;\n        // if not in items, and not matches additionalItems\n        if (!Array.isArray(value) ||\n            value.length === 0 ||\n            schema.unevaluatedItems == null ||\n            schema.unevaluatedItems === true) {\n            return undefined;\n        }\n        // resolve all dynamic schemas\n        const reduction = reduceSchema(draft.resolveRef(node), value);\n        const resolvedSchema = ((_a = reduction.schema) !== null && _a !== void 0 ? _a : reduction);\n        // console.log("unevaluatedItems", JSON.stringify(resolvedSchema, null, 2), value);\n        if (resolvedSchema.unevaluatedItems === true || resolvedSchema.additionalItems === true) {\n            return undefined;\n        }\n        if (isObject(schema.if)) {\n            const nextSchemaNode = { type: "array", ...schema.if };\n            if (draft.isValid(value, nextSchemaNode)) {\n                if (Array.isArray(nextSchemaNode.items) &&\n                    nextSchemaNode.items.length === value.length) {\n                    return undefined;\n                }\n            }\n            // need to test remaining items?\n        }\n        if (isObject(resolvedSchema.items)) {\n            const nextSchemaNode = { ...resolvedSchema, unevaluatedItems: undefined };\n            const errors = draft.validate(node.next(nextSchemaNode), value);\n            return errors.map((e) => draft.errors.unevaluatedItemsError({ ...e.data }));\n        }\n        if (Array.isArray(resolvedSchema.items)) {\n            const items = [];\n            for (let i = resolvedSchema.items.length; i < value.length; i += 1) {\n                if (i < resolvedSchema.items.length) {\n                    if (draft.validate(node.next(resolvedSchema.items[i], i), value[i]).length > 0) {\n                        items.push({ index: i, value: value[i] });\n                    }\n                }\n                else {\n                    items.push({ index: i, value: value[i] });\n                }\n            }\n            return items.map((item) => draft.errors.unevaluatedItemsError({\n                pointer: `${pointer}/${item.index}`,\n                value: JSON.stringify(item.value),\n                schema: resolvedSchema.unevaluatedItems\n            }));\n        }\n        if (isObject(resolvedSchema.unevaluatedItems)) {\n            return value.map((item, index) => {\n                if (!draft.isValid(item, resolvedSchema.unevaluatedItems)) {\n                    return draft.errors.unevaluatedItemsError({\n                        pointer: `${pointer}/${index}`,\n                        value: JSON.stringify(item),\n                        schema: resolvedSchema.unevaluatedItems\n                    });\n                }\n            });\n        }\n        const errors = [];\n        value.forEach((item, index) => {\n            errors.push(draft.errors.unevaluatedItemsError({\n                pointer: `${pointer}/${index}`,\n                value: JSON.stringify(item),\n                schema\n            }));\n        });\n        return errors;\n    }\n};\n/* harmony default export */ const draft2019_validation_keyword = (validation_keyword_KeywordValidation);\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft2019/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst draft2019Config = {\n    typeKeywords: {\n        array: [\n            "allOf",\n            "anyOf",\n            "contains",\n            "enum",\n            "if",\n            "items",\n            "maxItems",\n            "minItems",\n            "not",\n            "oneOf",\n            "unevaluatedItems",\n            "uniqueItems"\n        ],\n        boolean: ["allOf", "anyOf", "enum", "not", "oneOf"],\n        object: [\n            "additionalProperties",\n            "allOf",\n            "anyOf",\n            // "dependencies",\n            "dependentSchemas",\n            "dependentRequired",\n            "enum",\n            "format",\n            "if",\n            "maxProperties",\n            "minProperties",\n            "not",\n            "oneOf",\n            "patternProperties",\n            "properties",\n            "propertyNames",\n            "required",\n            "unevaluatedProperties" // 2019-09\n        ],\n        string: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "format",\n            "if",\n            "maxLength",\n            "minLength",\n            "not",\n            "oneOf",\n            "pattern"\n        ],\n        number: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "exclusiveMaximum",\n            "exclusiveMinimum",\n            "format",\n            "if",\n            "maximum",\n            "minimum",\n            "multipleOf",\n            "not",\n            "oneOf"\n        ],\n        null: ["allOf", "anyOf", "enum", "format", "not", "oneOf"]\n    },\n    validateKeyword: draft2019_validation_keyword,\n    validateType: type,\n    validateFormat: format,\n    errors: validation_errors,\n    createNode: createNode,\n    addRemoteSchema: addRemoteSchema_addRemoteSchema,\n    compileSchema: compile_compileSchema,\n    createSchemaOf: createSchemaOf,\n    each: each,\n    eachSchema: eachSchema,\n    getChildSchemaSelection: getChildSchemaSelection,\n    getSchema: getSchema,\n    getTemplate: lib_getTemplate,\n    isValid: isValid,\n    resolveAllOf: resolveAllOf,\n    resolveAnyOf: resolveAnyOf,\n    resolveOneOf: resolveOneOf,\n    resolveRef: resolveRef_resolveRef,\n    step: step,\n    validate: validate,\n    templateDefaultOptions: settings.templateDefaultOptions\n};\nclass Draft2019 extends Draft {\n    constructor(schema, config = {}) {\n        super(utils_merge(draft2019Config, config), schema);\n    }\n}\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/jsoneditor/index.js\n\n\n\n\n\nconst draftJsonEditorConfig = {\n    ...draft07Config,\n    resolveOneOf: resolveOneOfFuzzy,\n    resolveRef: resolveRef_resolveRef\n};\nclass JsonEditor extends Draft {\n    constructor(schema, config = {}) {\n        super(utils_merge(draftJsonEditorConfig, config), schema);\n    }\n}\n\n\n;// ./node_modules/json-schema-library/dist/module/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst config = { strings: strings };\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1399\n')},2017:module=>{"use strict";eval("\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAxNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7OztBQUlBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixVQUFVO0FBQ2pDO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFVBQVU7QUFDL0I7O0FBRUEscUJBQXFCLFVBQVU7QUFDL0I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BzYXAvY3NuLWludGVyb3AtcmVuZGVyZXItd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9mYXN0LWRlZXAtZXF1YWwvaW5kZXguanM/MGJjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIGRvIG5vdCBlZGl0IC5qcyBmaWxlcyBkaXJlY3RseSAtIGVkaXQgc3JjL2luZGV4LmpzdFxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09ICdvYmplY3QnICYmIHR5cGVvZiBiID09ICdvYmplY3QnKSB7XG4gICAgaWYgKGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBsZW5ndGgsIGksIGtleXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cblxuXG4gICAgaWYgKGEuY29uc3RydWN0b3IgPT09IFJlZ0V4cCkgcmV0dXJuIGEuc291cmNlID09PSBiLnNvdXJjZSAmJiBhLmZsYWdzID09PSBiLmZsYWdzO1xuICAgIGlmIChhLnZhbHVlT2YgIT09IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZikgcmV0dXJuIGEudmFsdWVPZigpID09PSBiLnZhbHVlT2YoKTtcbiAgICBpZiAoYS50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykgcmV0dXJuIGEudG9TdHJpbmcoKSA9PT0gYi50b1N0cmluZygpO1xuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyB0cnVlIGlmIGJvdGggTmFOLCBmYWxzZSBvdGhlcndpc2VcbiAgcmV0dXJuIGEhPT1hICYmIGIhPT1iO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2017\n")},2084:(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n// Generated automatically by nearley, version 2.20.1\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d) { return d[0]; }\nconst deepFlatten = (arr) => [].concat(...arr.map((v) => (Array.isArray(v) ? deepFlatten(v) : v)));\nfunction flat_string(d) {\n    if (d) {\n        if (Array.isArray(d))\n            return deepFlatten(d).join("");\n        return d;\n    }\n    return "";\n}\n;\n;\n;\n;\nconst grammar = {\n    Lexer: undefined,\n    ParserRules: [\n        { "name": "Reverse_path", "symbols": ["Path"] },\n        { "name": "Reverse_path$string$1", "symbols": [{ "literal": "<" }, { "literal": ">" }], "postprocess": (d) => d.join(\'\') },\n        { "name": "Reverse_path", "symbols": ["Reverse_path$string$1"] },\n        { "name": "Forward_path$subexpression$1$subexpression$1", "symbols": [{ "literal": "<" }, /[pP]/, /[oO]/, /[sS]/, /[tT]/, /[mM]/, /[aA]/, /[sS]/, /[tT]/, /[eE]/, /[rR]/, { "literal": "@" }], "postprocess": function (d) { return d.join(""); } },\n        { "name": "Forward_path$subexpression$1", "symbols": ["Forward_path$subexpression$1$subexpression$1", "Domain", { "literal": ">" }] },\n        { "name": "Forward_path", "symbols": ["Forward_path$subexpression$1"] },\n        { "name": "Forward_path$subexpression$2", "symbols": [{ "literal": "<" }, /[pP]/, /[oO]/, /[sS]/, /[tT]/, /[mM]/, /[aA]/, /[sS]/, /[tT]/, /[eE]/, /[rR]/, { "literal": ">" }], "postprocess": function (d) { return d.join(""); } },\n        { "name": "Forward_path", "symbols": ["Forward_path$subexpression$2"] },\n        { "name": "Forward_path", "symbols": ["Path"] },\n        { "name": "Path$ebnf$1$subexpression$1", "symbols": ["A_d_l", { "literal": ":" }] },\n        { "name": "Path$ebnf$1", "symbols": ["Path$ebnf$1$subexpression$1"], "postprocess": id },\n        { "name": "Path$ebnf$1", "symbols": [], "postprocess": () => null },\n        { "name": "Path", "symbols": [{ "literal": "<" }, "Path$ebnf$1", "Mailbox", { "literal": ">" }] },\n        { "name": "A_d_l$ebnf$1", "symbols": [] },\n        { "name": "A_d_l$ebnf$1$subexpression$1", "symbols": [{ "literal": "," }, "At_domain"] },\n        { "name": "A_d_l$ebnf$1", "symbols": ["A_d_l$ebnf$1", "A_d_l$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "A_d_l", "symbols": ["At_domain", "A_d_l$ebnf$1"] },\n        { "name": "At_domain", "symbols": [{ "literal": "@" }, "Domain"] },\n        { "name": "Domain$ebnf$1", "symbols": [] },\n        { "name": "Domain$ebnf$1$subexpression$1", "symbols": [{ "literal": "." }, "sub_domain"] },\n        { "name": "Domain$ebnf$1", "symbols": ["Domain$ebnf$1", "Domain$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "Domain", "symbols": ["sub_domain", "Domain$ebnf$1"] },\n        { "name": "sub_domain", "symbols": ["U_label"] },\n        { "name": "Let_dig", "symbols": ["ALPHA_DIGIT"], "postprocess": id },\n        { "name": "Ldh_str$ebnf$1", "symbols": [] },\n        { "name": "Ldh_str$ebnf$1", "symbols": ["Ldh_str$ebnf$1", "ALPHA_DIG_DASH"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "Ldh_str", "symbols": ["Ldh_str$ebnf$1", "Let_dig"] },\n        { "name": "U_Let_dig", "symbols": ["ALPHA_DIGIT_U"], "postprocess": id },\n        { "name": "U_Ldh_str$ebnf$1", "symbols": [] },\n        { "name": "U_Ldh_str$ebnf$1", "symbols": ["U_Ldh_str$ebnf$1", "ALPHA_DIG_DASH_U"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "U_Ldh_str", "symbols": ["U_Ldh_str$ebnf$1", "U_Let_dig"] },\n        { "name": "U_label$ebnf$1$subexpression$1", "symbols": ["U_Ldh_str"] },\n        { "name": "U_label$ebnf$1", "symbols": ["U_label$ebnf$1$subexpression$1"], "postprocess": id },\n        { "name": "U_label$ebnf$1", "symbols": [], "postprocess": () => null },\n        { "name": "U_label", "symbols": ["U_Let_dig", "U_label$ebnf$1"] },\n        { "name": "address_literal$subexpression$1", "symbols": ["IPv4_address_literal"] },\n        { "name": "address_literal$subexpression$1", "symbols": ["IPv6_address_literal"] },\n        { "name": "address_literal$subexpression$1", "symbols": ["General_address_literal"] },\n        { "name": "address_literal", "symbols": [{ "literal": "[" }, "address_literal$subexpression$1", { "literal": "]" }] },\n        { "name": "non_local_part", "symbols": ["Domain"], "postprocess": function (d) {\n                return { DomainName: flat_string(d[0]) };\n            }\n        },\n        { "name": "non_local_part", "symbols": ["address_literal"], "postprocess": function (d) {\n                return { AddressLiteral: flat_string(d[0]) };\n            }\n        },\n        { "name": "Mailbox", "symbols": ["Local_part", { "literal": "@" }, "non_local_part"], "postprocess": function (d) {\n                return { localPart: flat_string(d[0]), domainPart: flat_string(d[2]) };\n            }\n        },\n        { "name": "Local_part", "symbols": ["Dot_string"], "postprocess": function (d) {\n                return { DotString: flat_string(d[0]) };\n            }\n        },\n        { "name": "Local_part", "symbols": ["Quoted_string"], "postprocess": function (d) {\n                return { QuotedString: flat_string(d[0]) };\n            }\n        },\n        { "name": "Dot_string$ebnf$1", "symbols": [] },\n        { "name": "Dot_string$ebnf$1$subexpression$1", "symbols": [{ "literal": "." }, "Atom"] },\n        { "name": "Dot_string$ebnf$1", "symbols": ["Dot_string$ebnf$1", "Dot_string$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "Dot_string", "symbols": ["Atom", "Dot_string$ebnf$1"] },\n        { "name": "Atom$ebnf$1", "symbols": [/[0-9A-Za-z!#$%&\'*+\\-/=?^_`{|}~\\u0080-\\uFFFF/]/] },\n        { "name": "Atom$ebnf$1", "symbols": ["Atom$ebnf$1", /[0-9A-Za-z!#$%&\'*+\\-/=?^_`{|}~\\u0080-\\uFFFF/]/], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "Atom", "symbols": ["Atom$ebnf$1"] },\n        { "name": "Quoted_string$ebnf$1", "symbols": [] },\n        { "name": "Quoted_string$ebnf$1", "symbols": ["Quoted_string$ebnf$1", "QcontentSMTP"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "Quoted_string", "symbols": ["DQUOTE", "Quoted_string$ebnf$1", "DQUOTE"] },\n        { "name": "QcontentSMTP", "symbols": ["qtextSMTP"] },\n        { "name": "QcontentSMTP", "symbols": ["quoted_pairSMTP"] },\n        { "name": "quoted_pairSMTP", "symbols": [{ "literal": "\\\\" }, /[\\x20-\\x7e]/] },\n        { "name": "qtextSMTP", "symbols": [/[\\x20-\\x21\\x23-\\x5b\\x5d-\\x7e\\u0080-\\uFFFF]/], "postprocess": id },\n        { "name": "IPv4_address_literal$macrocall$2", "symbols": [{ "literal": "." }, "Snum"] },\n        { "name": "IPv4_address_literal$macrocall$1", "symbols": ["IPv4_address_literal$macrocall$2", "IPv4_address_literal$macrocall$2", "IPv4_address_literal$macrocall$2"] },\n        { "name": "IPv4_address_literal", "symbols": ["Snum", "IPv4_address_literal$macrocall$1"] },\n        { "name": "IPv6_address_literal$subexpression$1", "symbols": [/[iI]/, /[pP]/, /[vV]/, { "literal": "6" }, { "literal": ":" }], "postprocess": function (d) { return d.join(""); } },\n        { "name": "IPv6_address_literal", "symbols": ["IPv6_address_literal$subexpression$1", "IPv6_addr"] },\n        { "name": "General_address_literal$ebnf$1", "symbols": ["dcontent"] },\n        { "name": "General_address_literal$ebnf$1", "symbols": ["General_address_literal$ebnf$1", "dcontent"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "General_address_literal", "symbols": ["Standardized_tag", { "literal": ":" }, "General_address_literal$ebnf$1"] },\n        { "name": "Standardized_tag", "symbols": ["Ldh_str"] },\n        { "name": "dcontent", "symbols": [/[\\x21-\\x5a\\x5e-\\x7e]/], "postprocess": id },\n        { "name": "Snum", "symbols": ["DIGIT"] },\n        { "name": "Snum$subexpression$1", "symbols": [/[1-9]/, "DIGIT"] },\n        { "name": "Snum", "symbols": ["Snum$subexpression$1"] },\n        { "name": "Snum$subexpression$2", "symbols": [{ "literal": "1" }, "DIGIT", "DIGIT"] },\n        { "name": "Snum", "symbols": ["Snum$subexpression$2"] },\n        { "name": "Snum$subexpression$3", "symbols": [{ "literal": "2" }, /[0-4]/, "DIGIT"] },\n        { "name": "Snum", "symbols": ["Snum$subexpression$3"] },\n        { "name": "Snum$subexpression$4", "symbols": [{ "literal": "2" }, { "literal": "5" }, /[0-5]/] },\n        { "name": "Snum", "symbols": ["Snum$subexpression$4"] },\n        { "name": "IPv6_addr", "symbols": ["IPv6_full"] },\n        { "name": "IPv6_addr", "symbols": ["IPv6_comp"] },\n        { "name": "IPv6_addr", "symbols": ["IPv6v4_full"] },\n        { "name": "IPv6_addr", "symbols": ["IPv6v4_comp"] },\n        { "name": "IPv6_hex", "symbols": ["HEXDIG"] },\n        { "name": "IPv6_hex$subexpression$1", "symbols": ["HEXDIG", "HEXDIG"] },\n        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$1"] },\n        { "name": "IPv6_hex$subexpression$2", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG"] },\n        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$2"] },\n        { "name": "IPv6_hex$subexpression$3", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG", "HEXDIG"] },\n        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$3"] },\n        { "name": "IPv6_full$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6_full$macrocall$1", "symbols": ["IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2"] },\n        { "name": "IPv6_full", "symbols": ["IPv6_hex", "IPv6_full$macrocall$1"] },\n        { "name": "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6_comp$ebnf$1$subexpression$1$macrocall$1", "symbols": ["IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2"] },\n        { "name": "IPv6_comp$ebnf$1$subexpression$1", "symbols": ["IPv6_hex", "IPv6_comp$ebnf$1$subexpression$1$macrocall$1"] },\n        { "name": "IPv6_comp$ebnf$1", "symbols": ["IPv6_comp$ebnf$1$subexpression$1"], "postprocess": id },\n        { "name": "IPv6_comp$ebnf$1", "symbols": [], "postprocess": () => null },\n        { "name": "IPv6_comp$string$1", "symbols": [{ "literal": ":" }, { "literal": ":" }], "postprocess": (d) => d.join(\'\') },\n        { "name": "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6_comp$ebnf$2$subexpression$1$macrocall$1", "symbols": ["IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2"] },\n        { "name": "IPv6_comp$ebnf$2$subexpression$1", "symbols": ["IPv6_hex", "IPv6_comp$ebnf$2$subexpression$1$macrocall$1"] },\n        { "name": "IPv6_comp$ebnf$2", "symbols": ["IPv6_comp$ebnf$2$subexpression$1"], "postprocess": id },\n        { "name": "IPv6_comp$ebnf$2", "symbols": [], "postprocess": () => null },\n        { "name": "IPv6_comp", "symbols": ["IPv6_comp$ebnf$1", "IPv6_comp$string$1", "IPv6_comp$ebnf$2"] },\n        { "name": "IPv6v4_full$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6v4_full$macrocall$1", "symbols": ["IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2"] },\n        { "name": "IPv6v4_full", "symbols": ["IPv6_hex", "IPv6v4_full$macrocall$1", { "literal": ":" }, "IPv4_address_literal"] },\n        { "name": "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$1", "symbols": ["IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2"] },\n        { "name": "IPv6v4_comp$ebnf$1$subexpression$1", "symbols": ["IPv6_hex", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$1"] },\n        { "name": "IPv6v4_comp$ebnf$1", "symbols": ["IPv6v4_comp$ebnf$1$subexpression$1"], "postprocess": id },\n        { "name": "IPv6v4_comp$ebnf$1", "symbols": [], "postprocess": () => null },\n        { "name": "IPv6v4_comp$string$1", "symbols": [{ "literal": ":" }, { "literal": ":" }], "postprocess": (d) => d.join(\'\') },\n        { "name": "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$1", "symbols": ["IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2"] },\n        { "name": "IPv6v4_comp$ebnf$2$subexpression$1", "symbols": ["IPv6_hex", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$1", { "literal": ":" }] },\n        { "name": "IPv6v4_comp$ebnf$2", "symbols": ["IPv6v4_comp$ebnf$2$subexpression$1"], "postprocess": id },\n        { "name": "IPv6v4_comp$ebnf$2", "symbols": [], "postprocess": () => null },\n        { "name": "IPv6v4_comp", "symbols": ["IPv6v4_comp$ebnf$1", "IPv6v4_comp$string$1", "IPv6v4_comp$ebnf$2", "IPv4_address_literal"] },\n        { "name": "DIGIT", "symbols": [/[0-9]/], "postprocess": id },\n        { "name": "ALPHA_DIGIT_U", "symbols": [/[0-9A-Za-z\\u0080-\\uFFFF]/], "postprocess": id },\n        { "name": "ALPHA_DIGIT", "symbols": [/[0-9A-Za-z]/], "postprocess": id },\n        { "name": "ALPHA_DIG_DASH", "symbols": [/[-0-9A-Za-z]/], "postprocess": id },\n        { "name": "ALPHA_DIG_DASH_U", "symbols": [/[-0-9A-Za-z\\u0080-\\uFFFF]/], "postprocess": id },\n        { "name": "HEXDIG", "symbols": [/[0-9A-Fa-f]/], "postprocess": id },\n        { "name": "DQUOTE", "symbols": [{ "literal": "\\"" }], "postprocess": id }\n    ],\n    ParserStart: "Reverse_path",\n};\nexports["default"] = grammar;\n//# sourceMappingURL=grammar.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2084\n')},2546:function(module){eval('!function(t,e){ true?module.exports=e():0}("undefined"!=typeof self?self:this,(()=>(()=>{"use strict";var t={d:(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};function n(t){return"#"===t||""===t||Array.isArray(t)&&0===t.length||!1}t.r(e),t.d(e,{default:()=>_,get:()=>s,isRoot:()=>n,join:()=>P,remove:()=>m,removeUndefinedItems:()=>v,set:()=>g,split:()=>f,splitLast:()=>O});const o=/~1/g,r=/~0/g,i=/(^#?\\/?)/g;function l(t){return t.replace(o,"/").replace(r,"~")}function u(t){return l(decodeURIComponent(t))}function f(t){if(null==t||"string"!=typeof t||n(t))return Array.isArray(t)?t:[];const e=t.indexOf("#")>=0?u:l,o=(t=t.replace(i,"")).split("/");for(let t=0,n=o.length;t<n;t+=1)o[t]=e(o[t]);return o}function s(t,e,o=void 0){if(null==e||null==t)return o;if(n(e))return t;const r=c(t,f(e));return void 0===r?o:r}function c(t,e){const n=e.shift();if(void 0!==t)return void 0!==n?c(t[n],e):t}const p=/^\\[.*\\]$/,d=/^\\[(.+)\\]$/;function a(t,e){return"__proto__"===t||"constructor"==t&&e.length>0&&"prototype"==e[0]}function g(t,e,n){if(null==e)return t;const o=f(e);if(0===o.length)return t;null==t&&(t=p.test(o[0])?[]:{});let r,i,l=t;for(;o.length>1;)r=o.shift(),i=p.test(o[0]),a(r,o)||(l=h(l,r,i));return r=o.pop(),y(l,r,n),t}function y(t,e,n){let o;const r=e.match(d);"[]"===e&&Array.isArray(t)?t.push(n):r?(o=r.pop(),t[o]=n):t[e]=n}function h(t,e,n){var o,r;const i=null!==(r=null===(o=e.match(d))||void 0===o?void 0:o.pop())&&void 0!==r?r:e;if(null!=t[i])return t[i];const l=n?[]:{};return y(t,e,l),l}function v(t){let e=0,n=0;for(;e+n<t.length;)void 0===t[e+n]&&(n+=1),t[e]=t[e+n],e+=1;return t.length=t.length-n,t}function m(t,e,n){const o=f(e),r=o.pop(),i=s(t,o);return i&&delete i[r],Array.isArray(i)&&!0!==n&&v(i),t}const j=/~/g,b=/\\//g;function A(t,e){if(0===t.length)return e?"#":"";for(let n=0,o=t.length;n<o;n+=1)t[n]=t[n].replace(j,"~0").replace(b,"~1"),e&&(t[n]=encodeURIComponent(t[n]));return(e?"#/":"/")+t.join("/")}function P(t,...e){const n=[];if(Array.isArray(t))return A(t,!0===arguments[1]);const o=arguments[arguments.length-1],r="boolean"==typeof o?o:t&&"#"===t[0];for(let t=0,e=arguments.length;t<e;t+=1)n.push.apply(n,f(arguments[t]));const i=[];for(let t=0,e=n.length;t<e;t+=1)if(".."===n[t]){if(0===i.length)return r?"#":"";i.pop()}else i.push(n[t]);return A(i,r)}function O(t){const e=f(t);if(0===e.length)return"string"==typeof t&&"#"===t[0]?["#",e[0]]:["",void 0];if(1===e.length)return"#"===t[0]?["#",e[0]]:["",e[0]];const n=e.pop();return[P(e,"#"===t[0]),n]}const _={get:s,set:g,remove:m,join:P,split:f,splitLast:O,isRoot:n,removeUndefinedItems:v};return e})()));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU0Ni5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLEtBQWlELG9CQUFvQixDQUFtSSxDQUFDLCtDQUErQyxhQUFhLE9BQU8sVUFBVSwrREFBK0QsdUJBQXVCLEVBQUUsMERBQTBELDRGQUE0RixlQUFlLHdDQUF3QyxTQUFTLEdBQUcsTUFBTSxjQUFjLDBEQUEwRCxjQUFjLDhIQUE4SCxFQUFFLG9DQUFvQyxjQUFjLHVDQUF1QyxjQUFjLGdDQUFnQyxjQUFjLGtFQUFrRSwrREFBK0QsdUJBQXVCLElBQUksa0JBQWtCLFNBQVMseUJBQXlCLDZCQUE2QixpQkFBaUIsa0JBQWtCLHNCQUFzQixnQkFBZ0Isa0JBQWtCLDRDQUE0QyxrQ0FBa0MsZ0JBQWdCLHVFQUF1RSxrQkFBa0Isb0JBQW9CLGFBQWEseUJBQXlCLDhCQUE4QixFQUFFLFlBQVksS0FBSyxXQUFXLGlEQUFpRCw0QkFBNEIsa0JBQWtCLE1BQU0sbUJBQW1CLGlFQUFpRSxrQkFBa0IsUUFBUSxvRkFBb0YsMEJBQTBCLGdCQUFnQixrQkFBa0IsY0FBYyxZQUFZLEtBQUssYUFBYSwwQ0FBMEMsNkJBQTZCLGtCQUFrQixnQ0FBZ0MsdURBQXVELHFCQUFxQixnQkFBZ0IsZ0NBQWdDLHVCQUF1QixJQUFJLGtGQUFrRiwrQkFBK0IsbUJBQW1CLFdBQVcsa0RBQWtELDRFQUE0RSwrQkFBK0IsSUFBSSxxQ0FBcUMsV0FBVyx1QkFBdUIsSUFBSSxxQkFBcUIsZ0NBQWdDLFFBQVEsa0JBQWtCLGNBQWMsY0FBYyxhQUFhLDRFQUE0RSxzREFBc0QsZ0JBQWdCLDBCQUEwQixTQUFTLGlGQUFpRixTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNhcC9jc24taW50ZXJvcC1yZW5kZXJlci13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0BzYWdvbGQvanNvbi1wb2ludGVyL2Rpc3QvanNvblBvaW50ZXIuanM/MzZkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImpzb25Qb2ludGVyXCIsW10sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5qc29uUG9pbnRlcj1lKCk6dC5qc29uUG9pbnRlcj1lKCl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcywoKCk9PigoKT0+e1widXNlIHN0cmljdFwiO3ZhciB0PXtkOihlLG4pPT57Zm9yKHZhciBvIGluIG4pdC5vKG4sbykmJiF0Lm8oZSxvKSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbyx7ZW51bWVyYWJsZTohMCxnZXQ6bltvXX0pfSxvOih0LGUpPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKSxyOnQ9PntcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfX0sZT17fTtmdW5jdGlvbiBuKHQpe3JldHVyblwiI1wiPT09dHx8XCJcIj09PXR8fEFycmF5LmlzQXJyYXkodCkmJjA9PT10Lmxlbmd0aHx8ITF9dC5yKGUpLHQuZChlLHtkZWZhdWx0OigpPT5fLGdldDooKT0+cyxpc1Jvb3Q6KCk9Pm4sam9pbjooKT0+UCxyZW1vdmU6KCk9Pm0scmVtb3ZlVW5kZWZpbmVkSXRlbXM6KCk9PnYsc2V0OigpPT5nLHNwbGl0OigpPT5mLHNwbGl0TGFzdDooKT0+T30pO2NvbnN0IG89L34xL2cscj0vfjAvZyxpPS8oXiM/XFwvPykvZztmdW5jdGlvbiBsKHQpe3JldHVybiB0LnJlcGxhY2UobyxcIi9cIikucmVwbGFjZShyLFwiflwiKX1mdW5jdGlvbiB1KHQpe3JldHVybiBsKGRlY29kZVVSSUNvbXBvbmVudCh0KSl9ZnVuY3Rpb24gZih0KXtpZihudWxsPT10fHxcInN0cmluZ1wiIT10eXBlb2YgdHx8bih0KSlyZXR1cm4gQXJyYXkuaXNBcnJheSh0KT90OltdO2NvbnN0IGU9dC5pbmRleE9mKFwiI1wiKT49MD91Omwsbz0odD10LnJlcGxhY2UoaSxcIlwiKSkuc3BsaXQoXCIvXCIpO2ZvcihsZXQgdD0wLG49by5sZW5ndGg7dDxuO3QrPTEpb1t0XT1lKG9bdF0pO3JldHVybiBvfWZ1bmN0aW9uIHModCxlLG89dm9pZCAwKXtpZihudWxsPT1lfHxudWxsPT10KXJldHVybiBvO2lmKG4oZSkpcmV0dXJuIHQ7Y29uc3Qgcj1jKHQsZihlKSk7cmV0dXJuIHZvaWQgMD09PXI/bzpyfWZ1bmN0aW9uIGModCxlKXtjb25zdCBuPWUuc2hpZnQoKTtpZih2b2lkIDAhPT10KXJldHVybiB2b2lkIDAhPT1uP2ModFtuXSxlKTp0fWNvbnN0IHA9L15cXFsuKlxcXSQvLGQ9L15cXFsoLispXFxdJC87ZnVuY3Rpb24gYSh0LGUpe3JldHVyblwiX19wcm90b19fXCI9PT10fHxcImNvbnN0cnVjdG9yXCI9PXQmJmUubGVuZ3RoPjAmJlwicHJvdG90eXBlXCI9PWVbMF19ZnVuY3Rpb24gZyh0LGUsbil7aWYobnVsbD09ZSlyZXR1cm4gdDtjb25zdCBvPWYoZSk7aWYoMD09PW8ubGVuZ3RoKXJldHVybiB0O251bGw9PXQmJih0PXAudGVzdChvWzBdKT9bXTp7fSk7bGV0IHIsaSxsPXQ7Zm9yKDtvLmxlbmd0aD4xOylyPW8uc2hpZnQoKSxpPXAudGVzdChvWzBdKSxhKHIsbyl8fChsPWgobCxyLGkpKTtyZXR1cm4gcj1vLnBvcCgpLHkobCxyLG4pLHR9ZnVuY3Rpb24geSh0LGUsbil7bGV0IG87Y29uc3Qgcj1lLm1hdGNoKGQpO1wiW11cIj09PWUmJkFycmF5LmlzQXJyYXkodCk/dC5wdXNoKG4pOnI/KG89ci5wb3AoKSx0W29dPW4pOnRbZV09bn1mdW5jdGlvbiBoKHQsZSxuKXt2YXIgbyxyO2NvbnN0IGk9bnVsbCE9PShyPW51bGw9PT0obz1lLm1hdGNoKGQpKXx8dm9pZCAwPT09bz92b2lkIDA6by5wb3AoKSkmJnZvaWQgMCE9PXI/cjplO2lmKG51bGwhPXRbaV0pcmV0dXJuIHRbaV07Y29uc3QgbD1uP1tdOnt9O3JldHVybiB5KHQsZSxsKSxsfWZ1bmN0aW9uIHYodCl7bGV0IGU9MCxuPTA7Zm9yKDtlK248dC5sZW5ndGg7KXZvaWQgMD09PXRbZStuXSYmKG4rPTEpLHRbZV09dFtlK25dLGUrPTE7cmV0dXJuIHQubGVuZ3RoPXQubGVuZ3RoLW4sdH1mdW5jdGlvbiBtKHQsZSxuKXtjb25zdCBvPWYoZSkscj1vLnBvcCgpLGk9cyh0LG8pO3JldHVybiBpJiZkZWxldGUgaVtyXSxBcnJheS5pc0FycmF5KGkpJiYhMCE9PW4mJnYoaSksdH1jb25zdCBqPS9+L2csYj0vXFwvL2c7ZnVuY3Rpb24gQSh0LGUpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gZT9cIiNcIjpcIlwiO2ZvcihsZXQgbj0wLG89dC5sZW5ndGg7bjxvO24rPTEpdFtuXT10W25dLnJlcGxhY2UoaixcIn4wXCIpLnJlcGxhY2UoYixcIn4xXCIpLGUmJih0W25dPWVuY29kZVVSSUNvbXBvbmVudCh0W25dKSk7cmV0dXJuKGU/XCIjL1wiOlwiL1wiKSt0LmpvaW4oXCIvXCIpfWZ1bmN0aW9uIFAodCwuLi5lKXtjb25zdCBuPVtdO2lmKEFycmF5LmlzQXJyYXkodCkpcmV0dXJuIEEodCwhMD09PWFyZ3VtZW50c1sxXSk7Y29uc3Qgbz1hcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXSxyPVwiYm9vbGVhblwiPT10eXBlb2Ygbz9vOnQmJlwiI1wiPT09dFswXTtmb3IobGV0IHQ9MCxlPWFyZ3VtZW50cy5sZW5ndGg7dDxlO3QrPTEpbi5wdXNoLmFwcGx5KG4sZihhcmd1bWVudHNbdF0pKTtjb25zdCBpPVtdO2ZvcihsZXQgdD0wLGU9bi5sZW5ndGg7dDxlO3QrPTEpaWYoXCIuLlwiPT09blt0XSl7aWYoMD09PWkubGVuZ3RoKXJldHVybiByP1wiI1wiOlwiXCI7aS5wb3AoKX1lbHNlIGkucHVzaChuW3RdKTtyZXR1cm4gQShpLHIpfWZ1bmN0aW9uIE8odCl7Y29uc3QgZT1mKHQpO2lmKDA9PT1lLmxlbmd0aClyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdCYmXCIjXCI9PT10WzBdP1tcIiNcIixlWzBdXTpbXCJcIix2b2lkIDBdO2lmKDE9PT1lLmxlbmd0aClyZXR1cm5cIiNcIj09PXRbMF0/W1wiI1wiLGVbMF1dOltcIlwiLGVbMF1dO2NvbnN0IG49ZS5wb3AoKTtyZXR1cm5bUChlLFwiI1wiPT09dFswXSksbl19Y29uc3QgXz17Z2V0OnMsc2V0OmcscmVtb3ZlOm0sam9pbjpQLHNwbGl0OmYsc3BsaXRMYXN0Ok8saXNSb290Om4scmVtb3ZlVW5kZWZpbmVkSXRlbXM6dn07cmV0dXJuIGV9KSgpKSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2546\n')},4744:module=>{"use strict";eval("\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn Object.propertyIsEnumerable.call(target, symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc0NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFLElBQUk7QUFDTjs7QUFFQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BzYXAvY3NuLWludGVyb3AtcmVuZGVyZXItd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kZWVwbWVyZ2UvZGlzdC9janMuanM/Njg2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0JiYgIWlzU3BlY2lhbCh2YWx1ZSlcbn07XG5cbmZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHR2YXIgc3RyaW5nVmFsdWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG5cdHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcblx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0fHwgaXNSZWFjdEVsZW1lbnQodmFsdWUpXG59XG5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxudmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gKG9wdGlvbnMuY2xvbmUgIT09IGZhbHNlICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKVxuXHRcdD8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnMpXG5cdFx0OiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKGVsZW1lbnQsIG9wdGlvbnMpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIGdldE1lcmdlRnVuY3Rpb24oa2V5LCBvcHRpb25zKSB7XG5cdGlmICghb3B0aW9ucy5jdXN0b21NZXJnZSkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2Vcblx0fVxuXHR2YXIgY3VzdG9tTWVyZ2UgPSBvcHRpb25zLmN1c3RvbU1lcmdlKGtleSk7XG5cdHJldHVybiB0eXBlb2YgY3VzdG9tTWVyZ2UgPT09ICdmdW5jdGlvbicgPyBjdXN0b21NZXJnZSA6IGRlZXBtZXJnZVxufVxuXG5mdW5jdGlvbiBnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkge1xuXHRyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc1xuXHRcdD8gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpLmZpbHRlcihmdW5jdGlvbihzeW1ib2wpIHtcblx0XHRcdHJldHVybiBPYmplY3QucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh0YXJnZXQsIHN5bWJvbClcblx0XHR9KVxuXHRcdDogW11cbn1cblxuZnVuY3Rpb24gZ2V0S2V5cyh0YXJnZXQpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKHRhcmdldCkuY29uY2F0KGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSlcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlJc09uT2JqZWN0KG9iamVjdCwgcHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gcHJvcGVydHkgaW4gb2JqZWN0XG5cdH0gY2F0Y2goXykge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59XG5cbi8vIFByb3RlY3RzIGZyb20gcHJvdG90eXBlIHBvaXNvbmluZyBhbmQgdW5leHBlY3RlZCBtZXJnaW5nIHVwIHRoZSBwcm90b3R5cGUgY2hhaW4uXG5mdW5jdGlvbiBwcm9wZXJ0eUlzVW5zYWZlKHRhcmdldCwga2V5KSB7XG5cdHJldHVybiBwcm9wZXJ0eUlzT25PYmplY3QodGFyZ2V0LCBrZXkpIC8vIFByb3BlcnRpZXMgYXJlIHNhZmUgdG8gbWVyZ2UgaWYgdGhleSBkb24ndCBleGlzdCBpbiB0aGUgdGFyZ2V0IHlldCxcblx0XHQmJiAhKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSAvLyB1bnNhZmUgaWYgdGhleSBleGlzdCB1cCB0aGUgcHJvdG90eXBlIGNoYWluLFxuXHRcdFx0JiYgT2JqZWN0LnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGFyZ2V0LCBrZXkpKSAvLyBhbmQgYWxzbyB1bnNhZmUgaWYgdGhleSdyZSBub25lbnVtZXJhYmxlLlxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHR2YXIgZGVzdGluYXRpb24gPSB7fTtcblx0aWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuXHRcdGdldEtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHRhcmdldFtrZXldLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fVxuXHRnZXRLZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRpZiAocHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkpIHtcblx0XHRcdHJldHVyblxuXHRcdH1cblxuXHRcdGlmIChwcm9wZXJ0eUlzT25PYmplY3QodGFyZ2V0LCBrZXkpICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pKSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0b3B0aW9ucy5hcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXHRvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0ID0gb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCB8fCBpc01lcmdlYWJsZU9iamVjdDtcblx0Ly8gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQgaXMgYWRkZWQgdG8gYG9wdGlvbnNgIHNvIHRoYXQgY3VzdG9tIGFycmF5TWVyZ2UoKVxuXHQvLyBpbXBsZW1lbnRhdGlvbnMgY2FuIHVzZSBpdC4gVGhlIGNhbGxlciBtYXkgbm90IHJlcGxhY2UgaXQuXG5cdG9wdGlvbnMuY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQgPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZDtcblxuXHR2YXIgc291cmNlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcblx0dmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG5cdHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuXHRpZiAoIXNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2gpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5hcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheScpXG5cdH1cblxuXHRyZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnMpXG5cdH0sIHt9KVxufTtcblxudmFyIGRlZXBtZXJnZV8xID0gZGVlcG1lcmdlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBtZXJnZV8xO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4744\n")},6125:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.canonicalize = exports.canonicalize_quoted_string = exports.normalize = exports.normalize_dot_string = exports.parse = void 0;\n// const punycode = require(\'punycode\');\nconst nearley = __webpack_require__(8515);\nconst grammar_1 = __importDefault(__webpack_require__(2084));\ngrammar_1.default.ParserStart = "Mailbox";\nconst grammar = nearley.Grammar.fromCompiled(grammar_1.default);\n// <https://tools.ietf.org/html/rfc5321#section-4.1.2>\nfunction parse(address) {\n    const parser = new nearley.Parser(grammar);\n    parser.feed(address);\n    if (parser.results.length !== 1) {\n        throw new Error("address parsing failed: ambiguous grammar");\n    }\n    return parser.results[0];\n}\nexports.parse = parse;\n/** Strip +something, strip \'.\'s, and map to lower case.\n */\nfunction normalize_dot_string(dot_string) {\n    const tagless = (function () {\n        const plus_loc = dot_string.indexOf("+");\n        if (plus_loc === -1) {\n            return dot_string;\n        }\n        return dot_string.substr(0, plus_loc);\n    })();\n    const dotless = tagless.replace(/\\./g, "");\n    return dotless.toLowerCase();\n}\nexports.normalize_dot_string = normalize_dot_string;\n/** The G style address normalization.\n */\nfunction normalize(address) {\n    var _a, _b;\n    const a = parse(address);\n    const domain = (_a = a.domainPart.AddressLiteral) !== null && _a !== void 0 ? _a : a.domainPart.DomainName.toLowerCase();\n    const local = (_b = a.localPart.QuotedString) !== null && _b !== void 0 ? _b : normalize_dot_string(a.localPart.DotString);\n    return `${local}@${domain}`;\n}\nexports.normalize = normalize;\nfunction canonicalize_quoted_string(quoted_string) {\n    const unquoted = quoted_string.substr(1).substr(0, quoted_string.length - 2);\n    const unescaped = unquoted.replace(/(?:\\\\(.))/g, "$1");\n    const reescaped = unescaped.replace(/(?:(["\\\\]))/g, "\\\\$1");\n    return `"${reescaped}"`; // re-quote\n}\nexports.canonicalize_quoted_string = canonicalize_quoted_string;\n/**\n * Apply a canonicalization consistent with standards to support\n * comparison as a string.\n */\nfunction canonicalize(address) {\n    var _a;\n    const a = parse(address);\n    const domain = (_a = a.domainPart.AddressLiteral) !== null && _a !== void 0 ? _a : a.domainPart.DomainName.toLowerCase();\n    const local = a.localPart.QuotedString\n        ? canonicalize_quoted_string(a.localPart.QuotedString)\n        : a.localPart.DotString;\n    return `${local}@${domain}`;\n}\nexports.canonicalize = canonicalize;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEyNS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLGtDQUFrQyxHQUFHLGlCQUFpQixHQUFHLDRCQUE0QixHQUFHLGFBQWE7QUFDNUg7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyxJQUFTO0FBQ2pDLGtDQUFrQyxtQkFBTyxDQUFDLElBQVc7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxNQUFNLEdBQUcsT0FBTztBQUM5QjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVSxJQUFJO0FBQzdCO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE1BQU0sR0FBRyxPQUFPO0FBQzlCO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNhcC9jc24taW50ZXJvcC1yZW5kZXJlci13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3NtdHAtYWRkcmVzcy1wYXJzZXIvZGlzdC9saWIvaW5kZXguanM/ZTZiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2Fub25pY2FsaXplID0gZXhwb3J0cy5jYW5vbmljYWxpemVfcXVvdGVkX3N0cmluZyA9IGV4cG9ydHMubm9ybWFsaXplID0gZXhwb3J0cy5ub3JtYWxpemVfZG90X3N0cmluZyA9IGV4cG9ydHMucGFyc2UgPSB2b2lkIDA7XG4vLyBjb25zdCBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG5jb25zdCBuZWFybGV5ID0gcmVxdWlyZShcIm5lYXJsZXlcIik7XG5jb25zdCBncmFtbWFyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZ3JhbW1hclwiKSk7XG5ncmFtbWFyXzEuZGVmYXVsdC5QYXJzZXJTdGFydCA9IFwiTWFpbGJveFwiO1xuY29uc3QgZ3JhbW1hciA9IG5lYXJsZXkuR3JhbW1hci5mcm9tQ29tcGlsZWQoZ3JhbW1hcl8xLmRlZmF1bHQpO1xuLy8gPGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM1MzIxI3NlY3Rpb24tNC4xLjI+XG5mdW5jdGlvbiBwYXJzZShhZGRyZXNzKSB7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IG5lYXJsZXkuUGFyc2VyKGdyYW1tYXIpO1xuICAgIHBhcnNlci5mZWVkKGFkZHJlc3MpO1xuICAgIGlmIChwYXJzZXIucmVzdWx0cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWRkcmVzcyBwYXJzaW5nIGZhaWxlZDogYW1iaWd1b3VzIGdyYW1tYXJcIik7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZXIucmVzdWx0c1swXTtcbn1cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbi8qKiBTdHJpcCArc29tZXRoaW5nLCBzdHJpcCAnLidzLCBhbmQgbWFwIHRvIGxvd2VyIGNhc2UuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZV9kb3Rfc3RyaW5nKGRvdF9zdHJpbmcpIHtcbiAgICBjb25zdCB0YWdsZXNzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgcGx1c19sb2MgPSBkb3Rfc3RyaW5nLmluZGV4T2YoXCIrXCIpO1xuICAgICAgICBpZiAocGx1c19sb2MgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gZG90X3N0cmluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG90X3N0cmluZy5zdWJzdHIoMCwgcGx1c19sb2MpO1xuICAgIH0pKCk7XG4gICAgY29uc3QgZG90bGVzcyA9IHRhZ2xlc3MucmVwbGFjZSgvXFwuL2csIFwiXCIpO1xuICAgIHJldHVybiBkb3RsZXNzLnRvTG93ZXJDYXNlKCk7XG59XG5leHBvcnRzLm5vcm1hbGl6ZV9kb3Rfc3RyaW5nID0gbm9ybWFsaXplX2RvdF9zdHJpbmc7XG4vKiogVGhlIEcgc3R5bGUgYWRkcmVzcyBub3JtYWxpemF0aW9uLlxuICovXG5mdW5jdGlvbiBub3JtYWxpemUoYWRkcmVzcykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgYSA9IHBhcnNlKGFkZHJlc3MpO1xuICAgIGNvbnN0IGRvbWFpbiA9IChfYSA9IGEuZG9tYWluUGFydC5BZGRyZXNzTGl0ZXJhbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogYS5kb21haW5QYXJ0LkRvbWFpbk5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBsb2NhbCA9IChfYiA9IGEubG9jYWxQYXJ0LlF1b3RlZFN0cmluZykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbm9ybWFsaXplX2RvdF9zdHJpbmcoYS5sb2NhbFBhcnQuRG90U3RyaW5nKTtcbiAgICByZXR1cm4gYCR7bG9jYWx9QCR7ZG9tYWlufWA7XG59XG5leHBvcnRzLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZTtcbmZ1bmN0aW9uIGNhbm9uaWNhbGl6ZV9xdW90ZWRfc3RyaW5nKHF1b3RlZF9zdHJpbmcpIHtcbiAgICBjb25zdCB1bnF1b3RlZCA9IHF1b3RlZF9zdHJpbmcuc3Vic3RyKDEpLnN1YnN0cigwLCBxdW90ZWRfc3RyaW5nLmxlbmd0aCAtIDIpO1xuICAgIGNvbnN0IHVuZXNjYXBlZCA9IHVucXVvdGVkLnJlcGxhY2UoLyg/OlxcXFwoLikpL2csIFwiJDFcIik7XG4gICAgY29uc3QgcmVlc2NhcGVkID0gdW5lc2NhcGVkLnJlcGxhY2UoLyg/OihbXCJcXFxcXSkpL2csIFwiXFxcXCQxXCIpO1xuICAgIHJldHVybiBgXCIke3JlZXNjYXBlZH1cImA7IC8vIHJlLXF1b3RlXG59XG5leHBvcnRzLmNhbm9uaWNhbGl6ZV9xdW90ZWRfc3RyaW5nID0gY2Fub25pY2FsaXplX3F1b3RlZF9zdHJpbmc7XG4vKipcbiAqIEFwcGx5IGEgY2Fub25pY2FsaXphdGlvbiBjb25zaXN0ZW50IHdpdGggc3RhbmRhcmRzIHRvIHN1cHBvcnRcbiAqIGNvbXBhcmlzb24gYXMgYSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGNhbm9uaWNhbGl6ZShhZGRyZXNzKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGEgPSBwYXJzZShhZGRyZXNzKTtcbiAgICBjb25zdCBkb21haW4gPSAoX2EgPSBhLmRvbWFpblBhcnQuQWRkcmVzc0xpdGVyYWwpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGEuZG9tYWluUGFydC5Eb21haW5OYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgbG9jYWwgPSBhLmxvY2FsUGFydC5RdW90ZWRTdHJpbmdcbiAgICAgICAgPyBjYW5vbmljYWxpemVfcXVvdGVkX3N0cmluZyhhLmxvY2FsUGFydC5RdW90ZWRTdHJpbmcpXG4gICAgICAgIDogYS5sb2NhbFBhcnQuRG90U3RyaW5nO1xuICAgIHJldHVybiBgJHtsb2NhbH1AJHtkb21haW59YDtcbn1cbmV4cG9ydHMuY2Fub25pY2FsaXplID0gY2Fub25pY2FsaXplO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6125\n')},7853:(module,__unused_webpack_exports,__webpack_require__)=>{eval("/* module decorator */ module = __webpack_require__.nmd(module);\n(function(module) {\n    'use strict';\n\n    module.exports.is_uri = is_iri;\n    module.exports.is_http_uri = is_http_iri;\n    module.exports.is_https_uri = is_https_iri;\n    module.exports.is_web_uri = is_web_iri;\n    // Create aliases\n    module.exports.isUri = is_iri;\n    module.exports.isHttpUri = is_http_iri;\n    module.exports.isHttpsUri = is_https_iri;\n    module.exports.isWebUri = is_web_iri;\n\n\n    // private function\n    // internal URI spitter method - direct from RFC 3986\n    var splitUri = function(uri) {\n        var splitted = uri.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n        return splitted;\n    };\n\n    function is_iri(value) {\n        if (!value) {\n            return;\n        }\n\n        // check for illegal characters\n        if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return;\n\n        // check for hex escapes that aren't complete\n        if (/%[^0-9a-f]/i.test(value)) return;\n        if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\n\n        var splitted = [];\n        var scheme = '';\n        var authority = '';\n        var path = '';\n        var query = '';\n        var fragment = '';\n        var out = '';\n\n        // from RFC 3986\n        splitted = splitUri(value);\n        scheme = splitted[1]; \n        authority = splitted[2];\n        path = splitted[3];\n        query = splitted[4];\n        fragment = splitted[5];\n\n        // scheme and path are required, though the path can be empty\n        if (!(scheme && scheme.length && path.length >= 0)) return;\n\n        // if authority is present, the path must be empty or begin with a /\n        if (authority && authority.length) {\n            if (!(path.length === 0 || /^\\//.test(path))) return;\n        } else {\n            // if authority is not present, the path must not start with //\n            if (/^\\/\\//.test(path)) return;\n        }\n\n        // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n        if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase()))  return;\n\n        // re-assemble the URL per section 5.3 in RFC 3986\n        out += scheme + ':';\n        if (authority && authority.length) {\n            out += '//' + authority;\n        }\n\n        out += path;\n\n        if (query && query.length) {\n            out += '?' + query;\n        }\n\n        if (fragment && fragment.length) {\n            out += '#' + fragment;\n        }\n\n        return out;\n    }\n\n    function is_http_iri(value, allowHttps) {\n        if (!is_iri(value)) {\n            return;\n        }\n\n        var splitted = [];\n        var scheme = '';\n        var authority = '';\n        var path = '';\n        var port = '';\n        var query = '';\n        var fragment = '';\n        var out = '';\n\n        // from RFC 3986\n        splitted = splitUri(value);\n        scheme = splitted[1]; \n        authority = splitted[2];\n        path = splitted[3];\n        query = splitted[4];\n        fragment = splitted[5];\n\n        if (!scheme)  return;\n\n        if(allowHttps) {\n            if (scheme.toLowerCase() != 'https') return;\n        } else {\n            if (scheme.toLowerCase() != 'http') return;\n        }\n\n        // fully-qualified URIs must have an authority section that is\n        // a valid host\n        if (!authority) {\n            return;\n        }\n\n        // enable port component\n        if (/:(\\d+)$/.test(authority)) {\n            port = authority.match(/:(\\d+)$/)[0];\n            authority = authority.replace(/:\\d+$/, '');\n        }\n\n        out += scheme + ':';\n        out += '//' + authority;\n        \n        if (port) {\n            out += port;\n        }\n        \n        out += path;\n        \n        if(query && query.length){\n            out += '?' + query;\n        }\n\n        if(fragment && fragment.length){\n            out += '#' + fragment;\n        }\n        \n        return out;\n    }\n\n    function is_https_iri(value) {\n        return is_http_iri(value, true);\n    }\n\n    function is_web_iri(value) {\n        return (is_http_iri(value) || is_https_iri(value));\n    }\n\n})(module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg1My5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVEQUF1RDs7QUFFdkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BzYXAvY3NuLWludGVyb3AtcmVuZGVyZXItd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy92YWxpZC11cmwvaW5kZXguanM/MWJlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgbW9kdWxlLmV4cG9ydHMuaXNfdXJpID0gaXNfaXJpO1xuICAgIG1vZHVsZS5leHBvcnRzLmlzX2h0dHBfdXJpID0gaXNfaHR0cF9pcmk7XG4gICAgbW9kdWxlLmV4cG9ydHMuaXNfaHR0cHNfdXJpID0gaXNfaHR0cHNfaXJpO1xuICAgIG1vZHVsZS5leHBvcnRzLmlzX3dlYl91cmkgPSBpc193ZWJfaXJpO1xuICAgIC8vIENyZWF0ZSBhbGlhc2VzXG4gICAgbW9kdWxlLmV4cG9ydHMuaXNVcmkgPSBpc19pcmk7XG4gICAgbW9kdWxlLmV4cG9ydHMuaXNIdHRwVXJpID0gaXNfaHR0cF9pcmk7XG4gICAgbW9kdWxlLmV4cG9ydHMuaXNIdHRwc1VyaSA9IGlzX2h0dHBzX2lyaTtcbiAgICBtb2R1bGUuZXhwb3J0cy5pc1dlYlVyaSA9IGlzX3dlYl9pcmk7XG5cblxuICAgIC8vIHByaXZhdGUgZnVuY3Rpb25cbiAgICAvLyBpbnRlcm5hbCBVUkkgc3BpdHRlciBtZXRob2QgLSBkaXJlY3QgZnJvbSBSRkMgMzk4NlxuICAgIHZhciBzcGxpdFVyaSA9IGZ1bmN0aW9uKHVyaSkge1xuICAgICAgICB2YXIgc3BsaXR0ZWQgPSB1cmkubWF0Y2goLyg/OihbXjpcXC8/I10rKTopPyg/OlxcL1xcLyhbXlxcLz8jXSopKT8oW14/I10qKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8vKTtcbiAgICAgICAgcmV0dXJuIHNwbGl0dGVkO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpc19pcmkodmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIGlsbGVnYWwgY2hhcmFjdGVyc1xuICAgICAgICBpZiAoL1teYS16MC05XFw6XFwvXFw/XFwjXFxbXFxdXFxAXFwhXFwkXFwmXFwnXFwoXFwpXFwqXFwrXFwsXFw7XFw9XFwuXFwtXFxfXFx+XFwlXS9pLnRlc3QodmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIGhleCBlc2NhcGVzIHRoYXQgYXJlbid0IGNvbXBsZXRlXG4gICAgICAgIGlmICgvJVteMC05YS1mXS9pLnRlc3QodmFsdWUpKSByZXR1cm47XG4gICAgICAgIGlmICgvJVswLTlhLWZdKDo/W14wLTlhLWZdfCQpL2kudGVzdCh2YWx1ZSkpIHJldHVybjtcblxuICAgICAgICB2YXIgc3BsaXR0ZWQgPSBbXTtcbiAgICAgICAgdmFyIHNjaGVtZSA9ICcnO1xuICAgICAgICB2YXIgYXV0aG9yaXR5ID0gJyc7XG4gICAgICAgIHZhciBwYXRoID0gJyc7XG4gICAgICAgIHZhciBxdWVyeSA9ICcnO1xuICAgICAgICB2YXIgZnJhZ21lbnQgPSAnJztcbiAgICAgICAgdmFyIG91dCA9ICcnO1xuXG4gICAgICAgIC8vIGZyb20gUkZDIDM5ODZcbiAgICAgICAgc3BsaXR0ZWQgPSBzcGxpdFVyaSh2YWx1ZSk7XG4gICAgICAgIHNjaGVtZSA9IHNwbGl0dGVkWzFdOyBcbiAgICAgICAgYXV0aG9yaXR5ID0gc3BsaXR0ZWRbMl07XG4gICAgICAgIHBhdGggPSBzcGxpdHRlZFszXTtcbiAgICAgICAgcXVlcnkgPSBzcGxpdHRlZFs0XTtcbiAgICAgICAgZnJhZ21lbnQgPSBzcGxpdHRlZFs1XTtcblxuICAgICAgICAvLyBzY2hlbWUgYW5kIHBhdGggYXJlIHJlcXVpcmVkLCB0aG91Z2ggdGhlIHBhdGggY2FuIGJlIGVtcHR5XG4gICAgICAgIGlmICghKHNjaGVtZSAmJiBzY2hlbWUubGVuZ3RoICYmIHBhdGgubGVuZ3RoID49IDApKSByZXR1cm47XG5cbiAgICAgICAgLy8gaWYgYXV0aG9yaXR5IGlzIHByZXNlbnQsIHRoZSBwYXRoIG11c3QgYmUgZW1wdHkgb3IgYmVnaW4gd2l0aCBhIC9cbiAgICAgICAgaWYgKGF1dGhvcml0eSAmJiBhdXRob3JpdHkubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoIShwYXRoLmxlbmd0aCA9PT0gMCB8fCAvXlxcLy8udGVzdChwYXRoKSkpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIGF1dGhvcml0eSBpcyBub3QgcHJlc2VudCwgdGhlIHBhdGggbXVzdCBub3Qgc3RhcnQgd2l0aCAvL1xuICAgICAgICAgICAgaWYgKC9eXFwvXFwvLy50ZXN0KHBhdGgpKSByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzY2hlbWUgbXVzdCBiZWdpbiB3aXRoIGEgbGV0dGVyLCB0aGVuIGNvbnNpc3Qgb2YgbGV0dGVycywgZGlnaXRzLCArLCAuLCBvciAtXG4gICAgICAgIGlmICghL15bYS16XVthLXowLTlcXCtcXC1cXC5dKiQvLnRlc3Qoc2NoZW1lLnRvTG93ZXJDYXNlKCkpKSAgcmV0dXJuO1xuXG4gICAgICAgIC8vIHJlLWFzc2VtYmxlIHRoZSBVUkwgcGVyIHNlY3Rpb24gNS4zIGluIFJGQyAzOTg2XG4gICAgICAgIG91dCArPSBzY2hlbWUgKyAnOic7XG4gICAgICAgIGlmIChhdXRob3JpdHkgJiYgYXV0aG9yaXR5Lmxlbmd0aCkge1xuICAgICAgICAgICAgb3V0ICs9ICcvLycgKyBhdXRob3JpdHk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXQgKz0gcGF0aDtcblxuICAgICAgICBpZiAocXVlcnkgJiYgcXVlcnkubGVuZ3RoKSB7XG4gICAgICAgICAgICBvdXQgKz0gJz8nICsgcXVlcnk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhZ21lbnQgJiYgZnJhZ21lbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyMnICsgZnJhZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzX2h0dHBfaXJpKHZhbHVlLCBhbGxvd0h0dHBzKSB7XG4gICAgICAgIGlmICghaXNfaXJpKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNwbGl0dGVkID0gW107XG4gICAgICAgIHZhciBzY2hlbWUgPSAnJztcbiAgICAgICAgdmFyIGF1dGhvcml0eSA9ICcnO1xuICAgICAgICB2YXIgcGF0aCA9ICcnO1xuICAgICAgICB2YXIgcG9ydCA9ICcnO1xuICAgICAgICB2YXIgcXVlcnkgPSAnJztcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gJyc7XG4gICAgICAgIHZhciBvdXQgPSAnJztcblxuICAgICAgICAvLyBmcm9tIFJGQyAzOTg2XG4gICAgICAgIHNwbGl0dGVkID0gc3BsaXRVcmkodmFsdWUpO1xuICAgICAgICBzY2hlbWUgPSBzcGxpdHRlZFsxXTsgXG4gICAgICAgIGF1dGhvcml0eSA9IHNwbGl0dGVkWzJdO1xuICAgICAgICBwYXRoID0gc3BsaXR0ZWRbM107XG4gICAgICAgIHF1ZXJ5ID0gc3BsaXR0ZWRbNF07XG4gICAgICAgIGZyYWdtZW50ID0gc3BsaXR0ZWRbNV07XG5cbiAgICAgICAgaWYgKCFzY2hlbWUpICByZXR1cm47XG5cbiAgICAgICAgaWYoYWxsb3dIdHRwcykge1xuICAgICAgICAgICAgaWYgKHNjaGVtZS50b0xvd2VyQ2FzZSgpICE9ICdodHRwcycpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzY2hlbWUudG9Mb3dlckNhc2UoKSAhPSAnaHR0cCcpIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZ1bGx5LXF1YWxpZmllZCBVUklzIG11c3QgaGF2ZSBhbiBhdXRob3JpdHkgc2VjdGlvbiB0aGF0IGlzXG4gICAgICAgIC8vIGEgdmFsaWQgaG9zdFxuICAgICAgICBpZiAoIWF1dGhvcml0eSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5hYmxlIHBvcnQgY29tcG9uZW50XG4gICAgICAgIGlmICgvOihcXGQrKSQvLnRlc3QoYXV0aG9yaXR5KSkge1xuICAgICAgICAgICAgcG9ydCA9IGF1dGhvcml0eS5tYXRjaCgvOihcXGQrKSQvKVswXTtcbiAgICAgICAgICAgIGF1dGhvcml0eSA9IGF1dGhvcml0eS5yZXBsYWNlKC86XFxkKyQvLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXQgKz0gc2NoZW1lICsgJzonO1xuICAgICAgICBvdXQgKz0gJy8vJyArIGF1dGhvcml0eTtcbiAgICAgICAgXG4gICAgICAgIGlmIChwb3J0KSB7XG4gICAgICAgICAgICBvdXQgKz0gcG9ydDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgb3V0ICs9IHBhdGg7XG4gICAgICAgIFxuICAgICAgICBpZihxdWVyeSAmJiBxdWVyeS5sZW5ndGgpe1xuICAgICAgICAgICAgb3V0ICs9ICc/JyArIHF1ZXJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoZnJhZ21lbnQgJiYgZnJhZ21lbnQubGVuZ3RoKXtcbiAgICAgICAgICAgIG91dCArPSAnIycgKyBmcmFnbWVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc19odHRwc19pcmkodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzX2h0dHBfaXJpKHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc193ZWJfaXJpKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoaXNfaHR0cF9pcmkodmFsdWUpIHx8IGlzX2h0dHBzX2lyaSh2YWx1ZSkpO1xuICAgIH1cblxufSkobW9kdWxlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7853\n")},8515:function(module){eval('(function(root, factory) {\n    if ( true && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\n    function Rule(name, symbols, postprocess) {\n        this.id = ++Rule.highestId;\n        this.name = name;\n        this.symbols = symbols;        // a list of literal | regex class | nonterminal\n        this.postprocess = postprocess;\n        return this;\n    }\n    Rule.highestId = 0;\n\n    Rule.prototype.toString = function(withCursorAt) {\n        var symbolSequence = (typeof withCursorAt === "undefined")\n                             ? this.symbols.map(getSymbolShortDisplay).join(\' \')\n                             : (   this.symbols.slice(0, withCursorAt).map(getSymbolShortDisplay).join(\' \')\n                                 + " \u25cf "\n                                 + this.symbols.slice(withCursorAt).map(getSymbolShortDisplay).join(\' \')     );\n        return this.name + " \u2192 " + symbolSequence;\n    }\n\n\n    // a State is a rule at a position from a given starting point in the input stream (reference)\n    function State(rule, dot, reference, wantedBy) {\n        this.rule = rule;\n        this.dot = dot;\n        this.reference = reference;\n        this.data = [];\n        this.wantedBy = wantedBy;\n        this.isComplete = this.dot === rule.symbols.length;\n    }\n\n    State.prototype.toString = function() {\n        return "{" + this.rule.toString(this.dot) + "}, from: " + (this.reference || 0);\n    };\n\n    State.prototype.nextState = function(child) {\n        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n        state.left = this;\n        state.right = child;\n        if (state.isComplete) {\n            state.data = state.build();\n            // Having right set here will prevent the right state and its children\n            // form being garbage collected\n            state.right = undefined;\n        }\n        return state;\n    };\n\n    State.prototype.build = function() {\n        var children = [];\n        var node = this;\n        do {\n            children.push(node.right.data);\n            node = node.left;\n        } while (node.left);\n        children.reverse();\n        return children;\n    };\n\n    State.prototype.finish = function() {\n        if (this.rule.postprocess) {\n            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n        }\n    };\n\n\n    function Column(grammar, index) {\n        this.grammar = grammar;\n        this.index = index;\n        this.states = [];\n        this.wants = {}; // states indexed by the non-terminal they expect\n        this.scannable = []; // list of states that expect a token\n        this.completed = {}; // states that are nullable\n    }\n\n\n    Column.prototype.process = function(nextColumn) {\n        var states = this.states;\n        var wants = this.wants;\n        var completed = this.completed;\n\n        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n            var state = states[w];\n\n            if (state.isComplete) {\n                state.finish();\n                if (state.data !== Parser.fail) {\n                    // complete\n                    var wantedBy = state.wantedBy;\n                    for (var i = wantedBy.length; i--; ) { // this line is hot\n                        var left = wantedBy[i];\n                        this.complete(left, state);\n                    }\n\n                    // special-case nullables\n                    if (state.reference === this.index) {\n                        // make sure future predictors of this rule get completed.\n                        var exp = state.rule.name;\n                        (this.completed[exp] = this.completed[exp] || []).push(state);\n                    }\n                }\n\n            } else {\n                // queue scannable states\n                var exp = state.rule.symbols[state.dot];\n                if (typeof exp !== \'string\') {\n                    this.scannable.push(state);\n                    continue;\n                }\n\n                // predict\n                if (wants[exp]) {\n                    wants[exp].push(state);\n\n                    if (completed.hasOwnProperty(exp)) {\n                        var nulls = completed[exp];\n                        for (var i = 0; i < nulls.length; i++) {\n                            var right = nulls[i];\n                            this.complete(state, right);\n                        }\n                    }\n                } else {\n                    wants[exp] = [state];\n                    this.predict(exp);\n                }\n            }\n        }\n    }\n\n    Column.prototype.predict = function(exp) {\n        var rules = this.grammar.byName[exp] || [];\n\n        for (var i = 0; i < rules.length; i++) {\n            var r = rules[i];\n            var wantedBy = this.wants[exp];\n            var s = new State(r, 0, this.index, wantedBy);\n            this.states.push(s);\n        }\n    }\n\n    Column.prototype.complete = function(left, right) {\n        var copy = left.nextState(right);\n        this.states.push(copy);\n    }\n\n\n    function Grammar(rules, start) {\n        this.rules = rules;\n        this.start = start || this.rules[0].name;\n        var byName = this.byName = {};\n        this.rules.forEach(function(rule) {\n            if (!byName.hasOwnProperty(rule.name)) {\n                byName[rule.name] = [];\n            }\n            byName[rule.name].push(rule);\n        });\n    }\n\n    // So we can allow passing (rules, start) directly to Parser for backwards compatibility\n    Grammar.fromCompiled = function(rules, start) {\n        var lexer = rules.Lexer;\n        if (rules.ParserStart) {\n          start = rules.ParserStart;\n          rules = rules.ParserRules;\n        }\n        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n        var g = new Grammar(rules, start);\n        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable\n        return g;\n    }\n\n\n    function StreamLexer() {\n      this.reset("");\n    }\n\n    StreamLexer.prototype.reset = function(data, state) {\n        this.buffer = data;\n        this.index = 0;\n        this.line = state ? state.line : 1;\n        this.lastLineBreak = state ? -state.col : 0;\n    }\n\n    StreamLexer.prototype.next = function() {\n        if (this.index < this.buffer.length) {\n            var ch = this.buffer[this.index++];\n            if (ch === \'\\n\') {\n              this.line += 1;\n              this.lastLineBreak = this.index;\n            }\n            return {value: ch};\n        }\n    }\n\n    StreamLexer.prototype.save = function() {\n      return {\n        line: this.line,\n        col: this.index - this.lastLineBreak,\n      }\n    }\n\n    StreamLexer.prototype.formatError = function(token, message) {\n        // nb. this gets called after consuming the offending token,\n        // so the culprit is index-1\n        var buffer = this.buffer;\n        if (typeof buffer === \'string\') {\n            var lines = buffer\n                .split("\\n")\n                .slice(\n                    Math.max(0, this.line - 5), \n                    this.line\n                );\n\n            var nextLineBreak = buffer.indexOf(\'\\n\', this.index);\n            if (nextLineBreak === -1) nextLineBreak = buffer.length;\n            var col = this.index - this.lastLineBreak;\n            var lastLineDigits = String(this.line).length;\n            message += " at line " + this.line + " col " + col + ":\\n\\n";\n            message += lines\n                .map(function(line, i) {\n                    return pad(this.line - lines.length + i + 1, lastLineDigits) + " " + line;\n                }, this)\n                .join("\\n");\n            message += "\\n" + pad("", lastLineDigits + col) + "^\\n";\n            return message;\n        } else {\n            return message + " at index " + (this.index - 1);\n        }\n\n        function pad(n, length) {\n            var s = String(n);\n            return Array(length - s.length + 1).join(" ") + s;\n        }\n    }\n\n    function Parser(rules, start, options) {\n        if (rules instanceof Grammar) {\n            var grammar = rules;\n            var options = start;\n        } else {\n            var grammar = Grammar.fromCompiled(rules, start);\n        }\n        this.grammar = grammar;\n\n        // Read options\n        this.options = {\n            keepHistory: false,\n            lexer: grammar.lexer || new StreamLexer,\n        };\n        for (var key in (options || {})) {\n            this.options[key] = options[key];\n        }\n\n        // Setup lexer\n        this.lexer = this.options.lexer;\n        this.lexerState = undefined;\n\n        // Setup a table\n        var column = new Column(grammar, 0);\n        var table = this.table = [column];\n\n        // I could be expecting anything.\n        column.wants[grammar.start] = [];\n        column.predict(grammar.start);\n        // TODO what if start rule is nullable?\n        column.process();\n        this.current = 0; // token index\n    }\n\n    // create a reserved token for indicating a parse fail\n    Parser.fail = {};\n\n    Parser.prototype.feed = function(chunk) {\n        var lexer = this.lexer;\n        lexer.reset(chunk, this.lexerState);\n\n        var token;\n        while (true) {\n            try {\n                token = lexer.next();\n                if (!token) {\n                    break;\n                }\n            } catch (e) {\n                // Create the next column so that the error reporter\n                // can display the correctly predicted states.\n                var nextColumn = new Column(this.grammar, this.current + 1);\n                this.table.push(nextColumn);\n                var err = new Error(this.reportLexerError(e));\n                err.offset = this.current;\n                err.token = e.token;\n                throw err;\n            }\n            // We add new states to table[current+1]\n            var column = this.table[this.current];\n\n            // GC unused states\n            if (!this.options.keepHistory) {\n                delete this.table[this.current - 1];\n            }\n\n            var n = this.current + 1;\n            var nextColumn = new Column(this.grammar, n);\n            this.table.push(nextColumn);\n\n            // Advance all tokens that expect the symbol\n            var literal = token.text !== undefined ? token.text : token.value;\n            var value = lexer.constructor === StreamLexer ? token.value : token;\n            var scannable = column.scannable;\n            for (var w = scannable.length; w--; ) {\n                var state = scannable[w];\n                var expect = state.rule.symbols[state.dot];\n                // Try to consume the token\n                // either regex or literal\n                if (expect.test ? expect.test(value) :\n                    expect.type ? expect.type === token.type\n                                : expect.literal === literal) {\n                    // Add it\n                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});\n                    nextColumn.states.push(next);\n                }\n            }\n\n            // Next, for each of the rules, we either\n            // (a) complete it, and try to see if the reference row expected that\n            //     rule\n            // (b) predict the next nonterminal it expects by adding that\n            //     nonterminal\'s start state\n            // To prevent duplication, we also keep track of rules we have already\n            // added\n\n            nextColumn.process();\n\n            // If needed, throw an error:\n            if (nextColumn.states.length === 0) {\n                // No states at all! This is not good.\n                var err = new Error(this.reportError(token));\n                err.offset = this.current;\n                err.token = token;\n                throw err;\n            }\n\n            // maybe save lexer state\n            if (this.options.keepHistory) {\n              column.lexerState = lexer.save()\n            }\n\n            this.current++;\n        }\n        if (column) {\n          this.lexerState = lexer.save()\n        }\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n\n        // Allow chaining, for whatever it\'s worth\n        return this;\n    };\n\n    Parser.prototype.reportLexerError = function(lexerError) {\n        var tokenDisplay, lexerMessage;\n        // Planning to add a token property to moo\'s thrown error\n        // even on erroring tokens to be used in error display below\n        var token = lexerError.token;\n        if (token) {\n            tokenDisplay = "input " + JSON.stringify(token.text[0]) + " (lexer error)";\n            lexerMessage = this.lexer.formatError(token, "Syntax error");\n        } else {\n            tokenDisplay = "input (lexer error)";\n            lexerMessage = lexerError.message;\n        }\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportError = function(token) {\n        var tokenDisplay = (token.type ? token.type + " token: " : "") + JSON.stringify(token.value !== undefined ? token.value : token);\n        var lexerMessage = this.lexer.formatError(token, "Syntax error");\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportErrorCommon = function(lexerMessage, tokenDisplay) {\n        var lines = [];\n        lines.push(lexerMessage);\n        var lastColumnIndex = this.table.length - 2;\n        var lastColumn = this.table[lastColumnIndex];\n        var expectantStates = lastColumn.states\n            .filter(function(state) {\n                var nextSymbol = state.rule.symbols[state.dot];\n                return nextSymbol && typeof nextSymbol !== "string";\n            });\n\n        if (expectantStates.length === 0) {\n            lines.push(\'Unexpected \' + tokenDisplay + \'. I did not expect any more input. Here is the state of my parse table:\\n\');\n            this.displayStateStack(lastColumn.states, lines);\n        } else {\n            lines.push(\'Unexpected \' + tokenDisplay + \'. Instead, I was expecting to see one of the following:\\n\');\n            // Display a "state stack" for each expectant state\n            // - which shows you how this state came to be, step by step.\n            // If there is more than one derivation, we only display the first one.\n            var stateStacks = expectantStates\n                .map(function(state) {\n                    return this.buildFirstStateStack(state, []) || [state];\n                }, this);\n            // Display each state that is expecting a terminal symbol next.\n            stateStacks.forEach(function(stateStack) {\n                var state = stateStack[0];\n                var nextSymbol = state.rule.symbols[state.dot];\n                var symbolDisplay = this.getSymbolDisplay(nextSymbol);\n                lines.push(\'A \' + symbolDisplay + \' based on:\');\n                this.displayStateStack(stateStack, lines);\n            }, this);\n        }\n        lines.push("");\n        return lines.join("\\n");\n    }\n    \n    Parser.prototype.displayStateStack = function(stateStack, lines) {\n        var lastDisplay;\n        var sameDisplayCount = 0;\n        for (var j = 0; j < stateStack.length; j++) {\n            var state = stateStack[j];\n            var display = state.rule.toString(state.dot);\n            if (display === lastDisplay) {\n                sameDisplayCount++;\n            } else {\n                if (sameDisplayCount > 0) {\n                    lines.push(\'    ^ \' + sameDisplayCount + \' more lines identical to this\');\n                }\n                sameDisplayCount = 0;\n                lines.push(\'    \' + display);\n            }\n            lastDisplay = display;\n        }\n    };\n\n    Parser.prototype.getSymbolDisplay = function(symbol) {\n        return getSymbolLongDisplay(symbol);\n    };\n\n    /*\n    Builds a the first state stack. You can think of a state stack as the call stack\n    of the recursive-descent parser which the Nearley parse algorithm simulates.\n    A state stack is represented as an array of state objects. Within a\n    state stack, the first item of the array will be the starting\n    state, with each successive item in the array going further back into history.\n\n    This function needs to be given a starting state and an empty array representing\n    the visited states, and it returns an single state stack.\n\n    */\n    Parser.prototype.buildFirstStateStack = function(state, visited) {\n        if (visited.indexOf(state) !== -1) {\n            // Found cycle, return null\n            // to eliminate this path from the results, because\n            // we don\'t know how to display it meaningfully\n            return null;\n        }\n        if (state.wantedBy.length === 0) {\n            return [state];\n        }\n        var prevState = state.wantedBy[0];\n        var childVisited = [state].concat(visited);\n        var childResult = this.buildFirstStateStack(prevState, childVisited);\n        if (childResult === null) {\n            return null;\n        }\n        return [state].concat(childResult);\n    };\n\n    Parser.prototype.save = function() {\n        var column = this.table[this.current];\n        column.lexerState = this.lexerState;\n        return column;\n    };\n\n    Parser.prototype.restore = function(column) {\n        var index = column.index;\n        this.current = index;\n        this.table[index] = column;\n        this.table.splice(index + 1);\n        this.lexerState = column.lexerState;\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n    };\n\n    // nb. deprecated: use save/restore instead!\n    Parser.prototype.rewind = function(index) {\n        if (!this.options.keepHistory) {\n            throw new Error(\'set option `keepHistory` to enable rewinding\')\n        }\n        // nb. recall column (table) indicies fall between token indicies.\n        //        col 0   --   token 0   --   col 1\n        this.restore(this.table[index]);\n    };\n\n    Parser.prototype.finish = function() {\n        // Return the possible parsings\n        var considerations = [];\n        var start = this.grammar.start;\n        var column = this.table[this.table.length - 1]\n        column.states.forEach(function (t) {\n            if (t.rule.name === start\n                    && t.dot === t.rule.symbols.length\n                    && t.reference === 0\n                    && t.data !== Parser.fail) {\n                considerations.push(t);\n            }\n        });\n        return considerations.map(function(c) {return c.data; });\n    };\n\n    function getSymbolLongDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === "string") {\n            return symbol;\n        } else if (type === "object") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return \'character matching \' + symbol;\n            } else if (symbol.type) {\n                return symbol.type + \' token\';\n            } else if (symbol.test) {\n                return \'token matching \' + String(symbol.test);\n            } else {\n                throw new Error(\'Unknown symbol type: \' + symbol);\n            }\n        }\n    }\n\n    function getSymbolShortDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === "string") {\n            return symbol;\n        } else if (type === "object") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return symbol.toString();\n            } else if (symbol.type) {\n                return \'%\' + symbol.type;\n            } else if (symbol.test) {\n                return \'<\' + String(symbol.test) + \'>\';\n            } else {\n                throw new Error(\'Unknown symbol type: \' + symbol);\n            }\n        }\n    }\n\n    return {\n        Parser: Parser,\n        Grammar: Grammar,\n        Rule: Rule,\n    };\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8515\n')}}]);