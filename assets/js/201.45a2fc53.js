(self.webpackChunk_sap_csn_interop_renderer_website=self.webpackChunk_sap_csn_interop_renderer_website||[]).push([[201],{1594:(__unused_webpack_module,exports)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenError = void 0;\nclass TokenError extends Error {\n    constructor(message, token) {\n        super(message);\n        this.message = message;\n        this.token = token;\n        if (token && token.errors)\n            token.errors.push(this);\n        else\n            throw this;\n    }\n    inspect() {\n        return 'SyntaxError: ' + this.message;\n    }\n}\nexports.TokenError = TokenError;\n//# sourceMappingURL=TokenError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU5NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BzYXAvY3NuLWludGVyb3AtcmVuZGVyZXItd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9lYm5mL2Rpc3QvVG9rZW5FcnJvci5qcz8zOTUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ub2tlbkVycm9yID0gdm9pZCAwO1xuY2xhc3MgVG9rZW5FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCB0b2tlbikge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgICAgICBpZiAodG9rZW4gJiYgdG9rZW4uZXJyb3JzKVxuICAgICAgICAgICAgdG9rZW4uZXJyb3JzLnB1c2godGhpcyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IHRoaXM7XG4gICAgfVxuICAgIGluc3BlY3QoKSB7XG4gICAgICAgIHJldHVybiAnU3ludGF4RXJyb3I6ICcgKyB0aGlzLm1lc3NhZ2U7XG4gICAgfVxufVxuZXhwb3J0cy5Ub2tlbkVycm9yID0gVG9rZW5FcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRva2VuRXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1594\n")},2017:module=>{"use strict";eval("\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAxNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7OztBQUlBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixVQUFVO0FBQ2pDO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFVBQVU7QUFDL0I7O0FBRUEscUJBQXFCLFVBQVU7QUFDL0I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BzYXAvY3NuLWludGVyb3AtcmVuZGVyZXItd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9mYXN0LWRlZXAtZXF1YWwvaW5kZXguanM/MGJjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIGRvIG5vdCBlZGl0IC5qcyBmaWxlcyBkaXJlY3RseSAtIGVkaXQgc3JjL2luZGV4LmpzdFxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09ICdvYmplY3QnICYmIHR5cGVvZiBiID09ICdvYmplY3QnKSB7XG4gICAgaWYgKGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBsZW5ndGgsIGksIGtleXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cblxuXG4gICAgaWYgKGEuY29uc3RydWN0b3IgPT09IFJlZ0V4cCkgcmV0dXJuIGEuc291cmNlID09PSBiLnNvdXJjZSAmJiBhLmZsYWdzID09PSBiLmZsYWdzO1xuICAgIGlmIChhLnZhbHVlT2YgIT09IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZikgcmV0dXJuIGEudmFsdWVPZigpID09PSBiLnZhbHVlT2YoKTtcbiAgICBpZiAoYS50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykgcmV0dXJuIGEudG9TdHJpbmcoKSA9PT0gYi50b1N0cmluZygpO1xuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyB0cnVlIGlmIGJvdGggTmFOLCBmYWxzZSBvdGhlcndpc2VcbiAgcmV0dXJuIGEhPT1hICYmIGIhPT1iO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2017\n")},2084:(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n// Generated automatically by nearley, version 2.20.1\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d) { return d[0]; }\nconst deepFlatten = (arr) => [].concat(...arr.map((v) => (Array.isArray(v) ? deepFlatten(v) : v)));\nfunction flat_string(d) {\n    if (d) {\n        if (Array.isArray(d))\n            return deepFlatten(d).join("");\n        return d;\n    }\n    return "";\n}\n;\n;\n;\n;\nconst grammar = {\n    Lexer: undefined,\n    ParserRules: [\n        { "name": "Reverse_path", "symbols": ["Path"] },\n        { "name": "Reverse_path$string$1", "symbols": [{ "literal": "<" }, { "literal": ">" }], "postprocess": (d) => d.join(\'\') },\n        { "name": "Reverse_path", "symbols": ["Reverse_path$string$1"] },\n        { "name": "Forward_path$subexpression$1$subexpression$1", "symbols": [{ "literal": "<" }, /[pP]/, /[oO]/, /[sS]/, /[tT]/, /[mM]/, /[aA]/, /[sS]/, /[tT]/, /[eE]/, /[rR]/, { "literal": "@" }], "postprocess": function (d) { return d.join(""); } },\n        { "name": "Forward_path$subexpression$1", "symbols": ["Forward_path$subexpression$1$subexpression$1", "Domain", { "literal": ">" }] },\n        { "name": "Forward_path", "symbols": ["Forward_path$subexpression$1"] },\n        { "name": "Forward_path$subexpression$2", "symbols": [{ "literal": "<" }, /[pP]/, /[oO]/, /[sS]/, /[tT]/, /[mM]/, /[aA]/, /[sS]/, /[tT]/, /[eE]/, /[rR]/, { "literal": ">" }], "postprocess": function (d) { return d.join(""); } },\n        { "name": "Forward_path", "symbols": ["Forward_path$subexpression$2"] },\n        { "name": "Forward_path", "symbols": ["Path"] },\n        { "name": "Path$ebnf$1$subexpression$1", "symbols": ["A_d_l", { "literal": ":" }] },\n        { "name": "Path$ebnf$1", "symbols": ["Path$ebnf$1$subexpression$1"], "postprocess": id },\n        { "name": "Path$ebnf$1", "symbols": [], "postprocess": () => null },\n        { "name": "Path", "symbols": [{ "literal": "<" }, "Path$ebnf$1", "Mailbox", { "literal": ">" }] },\n        { "name": "A_d_l$ebnf$1", "symbols": [] },\n        { "name": "A_d_l$ebnf$1$subexpression$1", "symbols": [{ "literal": "," }, "At_domain"] },\n        { "name": "A_d_l$ebnf$1", "symbols": ["A_d_l$ebnf$1", "A_d_l$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "A_d_l", "symbols": ["At_domain", "A_d_l$ebnf$1"] },\n        { "name": "At_domain", "symbols": [{ "literal": "@" }, "Domain"] },\n        { "name": "Domain$ebnf$1", "symbols": [] },\n        { "name": "Domain$ebnf$1$subexpression$1", "symbols": [{ "literal": "." }, "sub_domain"] },\n        { "name": "Domain$ebnf$1", "symbols": ["Domain$ebnf$1", "Domain$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "Domain", "symbols": ["sub_domain", "Domain$ebnf$1"] },\n        { "name": "sub_domain", "symbols": ["U_label"] },\n        { "name": "Let_dig", "symbols": ["ALPHA_DIGIT"], "postprocess": id },\n        { "name": "Ldh_str$ebnf$1", "symbols": [] },\n        { "name": "Ldh_str$ebnf$1", "symbols": ["Ldh_str$ebnf$1", "ALPHA_DIG_DASH"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "Ldh_str", "symbols": ["Ldh_str$ebnf$1", "Let_dig"] },\n        { "name": "U_Let_dig", "symbols": ["ALPHA_DIGIT_U"], "postprocess": id },\n        { "name": "U_Ldh_str$ebnf$1", "symbols": [] },\n        { "name": "U_Ldh_str$ebnf$1", "symbols": ["U_Ldh_str$ebnf$1", "ALPHA_DIG_DASH_U"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "U_Ldh_str", "symbols": ["U_Ldh_str$ebnf$1", "U_Let_dig"] },\n        { "name": "U_label$ebnf$1$subexpression$1", "symbols": ["U_Ldh_str"] },\n        { "name": "U_label$ebnf$1", "symbols": ["U_label$ebnf$1$subexpression$1"], "postprocess": id },\n        { "name": "U_label$ebnf$1", "symbols": [], "postprocess": () => null },\n        { "name": "U_label", "symbols": ["U_Let_dig", "U_label$ebnf$1"] },\n        { "name": "address_literal$subexpression$1", "symbols": ["IPv4_address_literal"] },\n        { "name": "address_literal$subexpression$1", "symbols": ["IPv6_address_literal"] },\n        { "name": "address_literal$subexpression$1", "symbols": ["General_address_literal"] },\n        { "name": "address_literal", "symbols": [{ "literal": "[" }, "address_literal$subexpression$1", { "literal": "]" }] },\n        { "name": "non_local_part", "symbols": ["Domain"], "postprocess": function (d) {\n                return { DomainName: flat_string(d[0]) };\n            }\n        },\n        { "name": "non_local_part", "symbols": ["address_literal"], "postprocess": function (d) {\n                return { AddressLiteral: flat_string(d[0]) };\n            }\n        },\n        { "name": "Mailbox", "symbols": ["Local_part", { "literal": "@" }, "non_local_part"], "postprocess": function (d) {\n                return { localPart: flat_string(d[0]), domainPart: flat_string(d[2]) };\n            }\n        },\n        { "name": "Local_part", "symbols": ["Dot_string"], "postprocess": function (d) {\n                return { DotString: flat_string(d[0]) };\n            }\n        },\n        { "name": "Local_part", "symbols": ["Quoted_string"], "postprocess": function (d) {\n                return { QuotedString: flat_string(d[0]) };\n            }\n        },\n        { "name": "Dot_string$ebnf$1", "symbols": [] },\n        { "name": "Dot_string$ebnf$1$subexpression$1", "symbols": [{ "literal": "." }, "Atom"] },\n        { "name": "Dot_string$ebnf$1", "symbols": ["Dot_string$ebnf$1", "Dot_string$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "Dot_string", "symbols": ["Atom", "Dot_string$ebnf$1"] },\n        { "name": "Atom$ebnf$1", "symbols": [/[0-9A-Za-z!#$%&\'*+\\-/=?^_`{|}~\\u0080-\\uFFFF/]/] },\n        { "name": "Atom$ebnf$1", "symbols": ["Atom$ebnf$1", /[0-9A-Za-z!#$%&\'*+\\-/=?^_`{|}~\\u0080-\\uFFFF/]/], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "Atom", "symbols": ["Atom$ebnf$1"] },\n        { "name": "Quoted_string$ebnf$1", "symbols": [] },\n        { "name": "Quoted_string$ebnf$1", "symbols": ["Quoted_string$ebnf$1", "QcontentSMTP"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "Quoted_string", "symbols": ["DQUOTE", "Quoted_string$ebnf$1", "DQUOTE"] },\n        { "name": "QcontentSMTP", "symbols": ["qtextSMTP"] },\n        { "name": "QcontentSMTP", "symbols": ["quoted_pairSMTP"] },\n        { "name": "quoted_pairSMTP", "symbols": [{ "literal": "\\\\" }, /[\\x20-\\x7e]/] },\n        { "name": "qtextSMTP", "symbols": [/[\\x20-\\x21\\x23-\\x5b\\x5d-\\x7e\\u0080-\\uFFFF]/], "postprocess": id },\n        { "name": "IPv4_address_literal$macrocall$2", "symbols": [{ "literal": "." }, "Snum"] },\n        { "name": "IPv4_address_literal$macrocall$1", "symbols": ["IPv4_address_literal$macrocall$2", "IPv4_address_literal$macrocall$2", "IPv4_address_literal$macrocall$2"] },\n        { "name": "IPv4_address_literal", "symbols": ["Snum", "IPv4_address_literal$macrocall$1"] },\n        { "name": "IPv6_address_literal$subexpression$1", "symbols": [/[iI]/, /[pP]/, /[vV]/, { "literal": "6" }, { "literal": ":" }], "postprocess": function (d) { return d.join(""); } },\n        { "name": "IPv6_address_literal", "symbols": ["IPv6_address_literal$subexpression$1", "IPv6_addr"] },\n        { "name": "General_address_literal$ebnf$1", "symbols": ["dcontent"] },\n        { "name": "General_address_literal$ebnf$1", "symbols": ["General_address_literal$ebnf$1", "dcontent"], "postprocess": (d) => d[0].concat([d[1]]) },\n        { "name": "General_address_literal", "symbols": ["Standardized_tag", { "literal": ":" }, "General_address_literal$ebnf$1"] },\n        { "name": "Standardized_tag", "symbols": ["Ldh_str"] },\n        { "name": "dcontent", "symbols": [/[\\x21-\\x5a\\x5e-\\x7e]/], "postprocess": id },\n        { "name": "Snum", "symbols": ["DIGIT"] },\n        { "name": "Snum$subexpression$1", "symbols": [/[1-9]/, "DIGIT"] },\n        { "name": "Snum", "symbols": ["Snum$subexpression$1"] },\n        { "name": "Snum$subexpression$2", "symbols": [{ "literal": "1" }, "DIGIT", "DIGIT"] },\n        { "name": "Snum", "symbols": ["Snum$subexpression$2"] },\n        { "name": "Snum$subexpression$3", "symbols": [{ "literal": "2" }, /[0-4]/, "DIGIT"] },\n        { "name": "Snum", "symbols": ["Snum$subexpression$3"] },\n        { "name": "Snum$subexpression$4", "symbols": [{ "literal": "2" }, { "literal": "5" }, /[0-5]/] },\n        { "name": "Snum", "symbols": ["Snum$subexpression$4"] },\n        { "name": "IPv6_addr", "symbols": ["IPv6_full"] },\n        { "name": "IPv6_addr", "symbols": ["IPv6_comp"] },\n        { "name": "IPv6_addr", "symbols": ["IPv6v4_full"] },\n        { "name": "IPv6_addr", "symbols": ["IPv6v4_comp"] },\n        { "name": "IPv6_hex", "symbols": ["HEXDIG"] },\n        { "name": "IPv6_hex$subexpression$1", "symbols": ["HEXDIG", "HEXDIG"] },\n        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$1"] },\n        { "name": "IPv6_hex$subexpression$2", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG"] },\n        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$2"] },\n        { "name": "IPv6_hex$subexpression$3", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG", "HEXDIG"] },\n        { "name": "IPv6_hex", "symbols": ["IPv6_hex$subexpression$3"] },\n        { "name": "IPv6_full$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6_full$macrocall$1", "symbols": ["IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2", "IPv6_full$macrocall$2"] },\n        { "name": "IPv6_full", "symbols": ["IPv6_hex", "IPv6_full$macrocall$1"] },\n        { "name": "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6_comp$ebnf$1$subexpression$1$macrocall$1", "symbols": ["IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6_comp$ebnf$1$subexpression$1$macrocall$2"] },\n        { "name": "IPv6_comp$ebnf$1$subexpression$1", "symbols": ["IPv6_hex", "IPv6_comp$ebnf$1$subexpression$1$macrocall$1"] },\n        { "name": "IPv6_comp$ebnf$1", "symbols": ["IPv6_comp$ebnf$1$subexpression$1"], "postprocess": id },\n        { "name": "IPv6_comp$ebnf$1", "symbols": [], "postprocess": () => null },\n        { "name": "IPv6_comp$string$1", "symbols": [{ "literal": ":" }, { "literal": ":" }], "postprocess": (d) => d.join(\'\') },\n        { "name": "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6_comp$ebnf$2$subexpression$1$macrocall$1", "symbols": ["IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6_comp$ebnf$2$subexpression$1$macrocall$2"] },\n        { "name": "IPv6_comp$ebnf$2$subexpression$1", "symbols": ["IPv6_hex", "IPv6_comp$ebnf$2$subexpression$1$macrocall$1"] },\n        { "name": "IPv6_comp$ebnf$2", "symbols": ["IPv6_comp$ebnf$2$subexpression$1"], "postprocess": id },\n        { "name": "IPv6_comp$ebnf$2", "symbols": [], "postprocess": () => null },\n        { "name": "IPv6_comp", "symbols": ["IPv6_comp$ebnf$1", "IPv6_comp$string$1", "IPv6_comp$ebnf$2"] },\n        { "name": "IPv6v4_full$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6v4_full$macrocall$1", "symbols": ["IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2", "IPv6v4_full$macrocall$2"] },\n        { "name": "IPv6v4_full", "symbols": ["IPv6_hex", "IPv6v4_full$macrocall$1", { "literal": ":" }, "IPv4_address_literal"] },\n        { "name": "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$1", "symbols": ["IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$2"] },\n        { "name": "IPv6v4_comp$ebnf$1$subexpression$1", "symbols": ["IPv6_hex", "IPv6v4_comp$ebnf$1$subexpression$1$macrocall$1"] },\n        { "name": "IPv6v4_comp$ebnf$1", "symbols": ["IPv6v4_comp$ebnf$1$subexpression$1"], "postprocess": id },\n        { "name": "IPv6v4_comp$ebnf$1", "symbols": [], "postprocess": () => null },\n        { "name": "IPv6v4_comp$string$1", "symbols": [{ "literal": ":" }, { "literal": ":" }], "postprocess": (d) => d.join(\'\') },\n        { "name": "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "symbols": [{ "literal": ":" }, "IPv6_hex"] },\n        { "name": "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$1", "symbols": ["IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$2"] },\n        { "name": "IPv6v4_comp$ebnf$2$subexpression$1", "symbols": ["IPv6_hex", "IPv6v4_comp$ebnf$2$subexpression$1$macrocall$1", { "literal": ":" }] },\n        { "name": "IPv6v4_comp$ebnf$2", "symbols": ["IPv6v4_comp$ebnf$2$subexpression$1"], "postprocess": id },\n        { "name": "IPv6v4_comp$ebnf$2", "symbols": [], "postprocess": () => null },\n        { "name": "IPv6v4_comp", "symbols": ["IPv6v4_comp$ebnf$1", "IPv6v4_comp$string$1", "IPv6v4_comp$ebnf$2", "IPv4_address_literal"] },\n        { "name": "DIGIT", "symbols": [/[0-9]/], "postprocess": id },\n        { "name": "ALPHA_DIGIT_U", "symbols": [/[0-9A-Za-z\\u0080-\\uFFFF]/], "postprocess": id },\n        { "name": "ALPHA_DIGIT", "symbols": [/[0-9A-Za-z]/], "postprocess": id },\n        { "name": "ALPHA_DIG_DASH", "symbols": [/[-0-9A-Za-z]/], "postprocess": id },\n        { "name": "ALPHA_DIG_DASH_U", "symbols": [/[-0-9A-Za-z\\u0080-\\uFFFF]/], "postprocess": id },\n        { "name": "HEXDIG", "symbols": [/[0-9A-Fa-f]/], "postprocess": id },\n        { "name": "DQUOTE", "symbols": [{ "literal": "\\"" }], "postprocess": id }\n    ],\n    ParserStart: "Reverse_path",\n};\nexports["default"] = grammar;\n//# sourceMappingURL=grammar.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2084\n')},2546:function(module){eval('!function(e,t){ true?module.exports=t():0}("undefined"!=typeof self?self:this,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};function n(e){return"#"===e||""===e||Array.isArray(e)&&0===e.length||!1}e.r(t),e.d(t,{default:()=>S,get:()=>c,isRoot:()=>n,join:()=>_,remove:()=>j,removeUndefinedItems:()=>v,set:()=>y,split:()=>s,splitLast:()=>x});const r=/~1/g,o=/~0/g,i=/\\/+/g,l=/(^[#/]*|\\/+$)/g;function u(e){return e.replace(r,"/").replace(o,"~")}function f(e){return u(decodeURIComponent(e))}function s(e){if(null==e||"string"!=typeof e||n(e))return Array.isArray(e)?e:[];const t=e.indexOf("#")>=0?f:u,r=(e=(e=e.replace(i,"/")).replace(l,"")).split("/");for(let e=0,n=r.length;e<n;e+=1)r[e]=t(r[e]);return r}function c(e,t,r=void 0){if(null==t||null==e)return r;if(n(t))return e;const o=p(e,s(t));return void 0===o?r:o}function p(e,t){const n=t.shift();if(void 0!==e)return void 0!==n?p(e[n],t):e}const a=/^\\[.*\\]$/,d=/^\\[(.+)\\]$/;function g(e,t){return"__proto__"===e||"constructor"==e&&t.length>0&&"prototype"==t[0]}function y(e,t,n){if(null==t)return e;const r=s(t);if(0===r.length)return e;null==e&&(e=a.test(r[0])?[]:{});let o,i,l=e;for(;r.length>1;)o=r.shift(),i=a.test(r[0]),g(o,r)||(l=m(l,o,i));return o=r.pop(),h(l,o,n),e}function h(e,t,n){let r;const o=t.match(d);"[]"===t&&Array.isArray(e)?e.push(n):o?(r=o.pop(),e[r]=n):e[t]=n}function m(e,t,n){if(null!=e[t])return e[t];const r=n?[]:{};return h(e,t,r),r}function v(e){let t=0,n=0;for(;t+n<e.length;)void 0===e[t+n]&&(n+=1),e[t]=e[t+n],t+=1;return e.length=e.length-n,e}function j(e,t,n){const r=s(t),o=r.pop(),i=c(e,r);return i&&delete i[o],Array.isArray(i)&&!0!==n&&v(i),e}const b=/\\/+/g,A=/~/g,P=/\\//g;function O(e,t){if(0===e.length)return t?"#":"";for(let n=0,r=e.length;n<r;n+=1)e[n]=e[n].replace(A,"~0").replace(P,"~1"),t&&(e[n]=encodeURIComponent(e[n]));return((t?"#/":"/")+e.join("/")).replace(b,"/")}function _(e,...t){const n=[];if(Array.isArray(e))return O(e,!0===arguments[1]);const r=arguments[arguments.length-1],o="boolean"==typeof r?r:e&&"#"===e[0];for(let e=0,t=arguments.length;e<t;e+=1)n.push.apply(n,s(arguments[e]));const i=[];for(let e=0,t=n.length;e<t;e+=1)if(".."===n[e]){if(0===i.length)return o?"#":"";i.pop()}else i.push(n[e]);return O(i,o)}function x(e){const t=s(e);if(0===t.length)return"string"==typeof e&&"#"===e[0]?["#",t[0]]:["",void 0];if(1===t.length)return"#"===e[0]?["#",t[0]]:["",t[0]];const n=t.pop();return[_(t,"#"===e[0]),n]}const S={get:c,set:y,remove:j,join:_,split:s,splitLast:x,isRoot:n,removeUndefinedItems:v};return t})()));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU0Ni5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLEtBQWlELG9CQUFvQixDQUFtSSxDQUFDLCtDQUErQyxhQUFhLE9BQU8sVUFBVSwrREFBK0QsdUJBQXVCLEVBQUUsMERBQTBELDRGQUE0RixlQUFlLHdDQUF3QyxTQUFTLEdBQUcsTUFBTSxjQUFjLDBEQUEwRCxjQUFjLDhIQUE4SCxFQUFFLGtEQUFrRCxjQUFjLHVDQUF1QyxjQUFjLGdDQUFnQyxjQUFjLGtFQUFrRSxrRkFBa0YsdUJBQXVCLElBQUksa0JBQWtCLFNBQVMseUJBQXlCLDZCQUE2QixpQkFBaUIsa0JBQWtCLHNCQUFzQixnQkFBZ0Isa0JBQWtCLDRDQUE0QyxrQ0FBa0MsZ0JBQWdCLHVFQUF1RSxrQkFBa0Isb0JBQW9CLGFBQWEseUJBQXlCLDhCQUE4QixFQUFFLFlBQVksS0FBSyxXQUFXLGlEQUFpRCw0QkFBNEIsa0JBQWtCLE1BQU0sbUJBQW1CLGlFQUFpRSxrQkFBa0IsMEJBQTBCLGdCQUFnQixrQkFBa0IsY0FBYyxZQUFZLEtBQUssYUFBYSwwQ0FBMEMsNkJBQTZCLGtCQUFrQixnQ0FBZ0MsdURBQXVELDhCQUE4QixnQkFBZ0IsZ0NBQWdDLHVCQUF1QixJQUFJLGtGQUFrRixnREFBZ0QsbUJBQW1CLFdBQVcsa0RBQWtELDRFQUE0RSwrQkFBK0IsSUFBSSxxQ0FBcUMsV0FBVyx1QkFBdUIsSUFBSSxxQkFBcUIsZ0NBQWdDLFFBQVEsa0JBQWtCLGNBQWMsY0FBYyxhQUFhLDRFQUE0RSxzREFBc0QsZ0JBQWdCLDBCQUEwQixTQUFTLGlGQUFpRixTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNhcC9jc24taW50ZXJvcC1yZW5kZXJlci13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL0BzYWdvbGQvanNvbi1wb2ludGVyL2Rpc3QvanNvblBvaW50ZXIuanM/MzZkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImpzb25Qb2ludGVyXCIsW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5qc29uUG9pbnRlcj10KCk6ZS5qc29uUG9pbnRlcj10KCl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcywoKCk9PigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBlPXtkOih0LG4pPT57Zm9yKHZhciByIGluIG4pZS5vKG4scikmJiFlLm8odCxyKSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQscix7ZW51bWVyYWJsZTohMCxnZXQ6bltyXX0pfSxvOihlLHQpPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KSxyOmU9PntcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfX0sdD17fTtmdW5jdGlvbiBuKGUpe3JldHVyblwiI1wiPT09ZXx8XCJcIj09PWV8fEFycmF5LmlzQXJyYXkoZSkmJjA9PT1lLmxlbmd0aHx8ITF9ZS5yKHQpLGUuZCh0LHtkZWZhdWx0OigpPT5TLGdldDooKT0+Yyxpc1Jvb3Q6KCk9Pm4sam9pbjooKT0+XyxyZW1vdmU6KCk9PmoscmVtb3ZlVW5kZWZpbmVkSXRlbXM6KCk9PnYsc2V0OigpPT55LHNwbGl0OigpPT5zLHNwbGl0TGFzdDooKT0+eH0pO2NvbnN0IHI9L34xL2csbz0vfjAvZyxpPS9cXC8rL2csbD0vKF5bIy9dKnxcXC8rJCkvZztmdW5jdGlvbiB1KGUpe3JldHVybiBlLnJlcGxhY2UocixcIi9cIikucmVwbGFjZShvLFwiflwiKX1mdW5jdGlvbiBmKGUpe3JldHVybiB1KGRlY29kZVVSSUNvbXBvbmVudChlKSl9ZnVuY3Rpb24gcyhlKXtpZihudWxsPT1lfHxcInN0cmluZ1wiIT10eXBlb2YgZXx8bihlKSlyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9lOltdO2NvbnN0IHQ9ZS5pbmRleE9mKFwiI1wiKT49MD9mOnUscj0oZT0oZT1lLnJlcGxhY2UoaSxcIi9cIikpLnJlcGxhY2UobCxcIlwiKSkuc3BsaXQoXCIvXCIpO2ZvcihsZXQgZT0wLG49ci5sZW5ndGg7ZTxuO2UrPTEpcltlXT10KHJbZV0pO3JldHVybiByfWZ1bmN0aW9uIGMoZSx0LHI9dm9pZCAwKXtpZihudWxsPT10fHxudWxsPT1lKXJldHVybiByO2lmKG4odCkpcmV0dXJuIGU7Y29uc3Qgbz1wKGUscyh0KSk7cmV0dXJuIHZvaWQgMD09PW8/cjpvfWZ1bmN0aW9uIHAoZSx0KXtjb25zdCBuPXQuc2hpZnQoKTtpZih2b2lkIDAhPT1lKXJldHVybiB2b2lkIDAhPT1uP3AoZVtuXSx0KTplfWNvbnN0IGE9L15cXFsuKlxcXSQvLGQ9L15cXFsoLispXFxdJC87ZnVuY3Rpb24gZyhlLHQpe3JldHVyblwiX19wcm90b19fXCI9PT1lfHxcImNvbnN0cnVjdG9yXCI9PWUmJnQubGVuZ3RoPjAmJlwicHJvdG90eXBlXCI9PXRbMF19ZnVuY3Rpb24geShlLHQsbil7aWYobnVsbD09dClyZXR1cm4gZTtjb25zdCByPXModCk7aWYoMD09PXIubGVuZ3RoKXJldHVybiBlO251bGw9PWUmJihlPWEudGVzdChyWzBdKT9bXTp7fSk7bGV0IG8saSxsPWU7Zm9yKDtyLmxlbmd0aD4xOylvPXIuc2hpZnQoKSxpPWEudGVzdChyWzBdKSxnKG8scil8fChsPW0obCxvLGkpKTtyZXR1cm4gbz1yLnBvcCgpLGgobCxvLG4pLGV9ZnVuY3Rpb24gaChlLHQsbil7bGV0IHI7Y29uc3Qgbz10Lm1hdGNoKGQpO1wiW11cIj09PXQmJkFycmF5LmlzQXJyYXkoZSk/ZS5wdXNoKG4pOm8/KHI9by5wb3AoKSxlW3JdPW4pOmVbdF09bn1mdW5jdGlvbiBtKGUsdCxuKXtpZihudWxsIT1lW3RdKXJldHVybiBlW3RdO2NvbnN0IHI9bj9bXTp7fTtyZXR1cm4gaChlLHQscikscn1mdW5jdGlvbiB2KGUpe2xldCB0PTAsbj0wO2Zvcig7dCtuPGUubGVuZ3RoOyl2b2lkIDA9PT1lW3Qrbl0mJihuKz0xKSxlW3RdPWVbdCtuXSx0Kz0xO3JldHVybiBlLmxlbmd0aD1lLmxlbmd0aC1uLGV9ZnVuY3Rpb24gaihlLHQsbil7Y29uc3Qgcj1zKHQpLG89ci5wb3AoKSxpPWMoZSxyKTtyZXR1cm4gaSYmZGVsZXRlIGlbb10sQXJyYXkuaXNBcnJheShpKSYmITAhPT1uJiZ2KGkpLGV9Y29uc3QgYj0vXFwvKy9nLEE9L34vZyxQPS9cXC8vZztmdW5jdGlvbiBPKGUsdCl7aWYoMD09PWUubGVuZ3RoKXJldHVybiB0P1wiI1wiOlwiXCI7Zm9yKGxldCBuPTAscj1lLmxlbmd0aDtuPHI7bis9MSllW25dPWVbbl0ucmVwbGFjZShBLFwifjBcIikucmVwbGFjZShQLFwifjFcIiksdCYmKGVbbl09ZW5jb2RlVVJJQ29tcG9uZW50KGVbbl0pKTtyZXR1cm4oKHQ/XCIjL1wiOlwiL1wiKStlLmpvaW4oXCIvXCIpKS5yZXBsYWNlKGIsXCIvXCIpfWZ1bmN0aW9uIF8oZSwuLi50KXtjb25zdCBuPVtdO2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIE8oZSwhMD09PWFyZ3VtZW50c1sxXSk7Y29uc3Qgcj1hcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXSxvPVwiYm9vbGVhblwiPT10eXBlb2Ygcj9yOmUmJlwiI1wiPT09ZVswXTtmb3IobGV0IGU9MCx0PWFyZ3VtZW50cy5sZW5ndGg7ZTx0O2UrPTEpbi5wdXNoLmFwcGx5KG4scyhhcmd1bWVudHNbZV0pKTtjb25zdCBpPVtdO2ZvcihsZXQgZT0wLHQ9bi5sZW5ndGg7ZTx0O2UrPTEpaWYoXCIuLlwiPT09bltlXSl7aWYoMD09PWkubGVuZ3RoKXJldHVybiBvP1wiI1wiOlwiXCI7aS5wb3AoKX1lbHNlIGkucHVzaChuW2VdKTtyZXR1cm4gTyhpLG8pfWZ1bmN0aW9uIHgoZSl7Y29uc3QgdD1zKGUpO2lmKDA9PT10Lmxlbmd0aClyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmXCIjXCI9PT1lWzBdP1tcIiNcIix0WzBdXTpbXCJcIix2b2lkIDBdO2lmKDE9PT10Lmxlbmd0aClyZXR1cm5cIiNcIj09PWVbMF0/W1wiI1wiLHRbMF1dOltcIlwiLHRbMF1dO2NvbnN0IG49dC5wb3AoKTtyZXR1cm5bXyh0LFwiI1wiPT09ZVswXSksbl19Y29uc3QgUz17Z2V0OmMsc2V0OnkscmVtb3ZlOmosam9pbjpfLHNwbGl0OnMsc3BsaXRMYXN0OngsaXNSb290Om4scmVtb3ZlVW5kZWZpbmVkSXRlbXM6dn07cmV0dXJuIHR9KSgpKSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2546\n')},4744:module=>{"use strict";eval("\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn Object.propertyIsEnumerable.call(target, symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc0NC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFLElBQUk7QUFDTjs7QUFFQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BzYXAvY3NuLWludGVyb3AtcmVuZGVyZXItd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9kZWVwbWVyZ2UvZGlzdC9janMuanM/Njg2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0JiYgIWlzU3BlY2lhbCh2YWx1ZSlcbn07XG5cbmZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHR2YXIgc3RyaW5nVmFsdWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG5cdHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcblx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0fHwgaXNSZWFjdEVsZW1lbnQodmFsdWUpXG59XG5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxudmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gKG9wdGlvbnMuY2xvbmUgIT09IGZhbHNlICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKVxuXHRcdD8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnMpXG5cdFx0OiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKGVsZW1lbnQsIG9wdGlvbnMpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIGdldE1lcmdlRnVuY3Rpb24oa2V5LCBvcHRpb25zKSB7XG5cdGlmICghb3B0aW9ucy5jdXN0b21NZXJnZSkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2Vcblx0fVxuXHR2YXIgY3VzdG9tTWVyZ2UgPSBvcHRpb25zLmN1c3RvbU1lcmdlKGtleSk7XG5cdHJldHVybiB0eXBlb2YgY3VzdG9tTWVyZ2UgPT09ICdmdW5jdGlvbicgPyBjdXN0b21NZXJnZSA6IGRlZXBtZXJnZVxufVxuXG5mdW5jdGlvbiBnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkge1xuXHRyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc1xuXHRcdD8gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpLmZpbHRlcihmdW5jdGlvbihzeW1ib2wpIHtcblx0XHRcdHJldHVybiBPYmplY3QucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh0YXJnZXQsIHN5bWJvbClcblx0XHR9KVxuXHRcdDogW11cbn1cblxuZnVuY3Rpb24gZ2V0S2V5cyh0YXJnZXQpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKHRhcmdldCkuY29uY2F0KGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSlcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlJc09uT2JqZWN0KG9iamVjdCwgcHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gcHJvcGVydHkgaW4gb2JqZWN0XG5cdH0gY2F0Y2goXykge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59XG5cbi8vIFByb3RlY3RzIGZyb20gcHJvdG90eXBlIHBvaXNvbmluZyBhbmQgdW5leHBlY3RlZCBtZXJnaW5nIHVwIHRoZSBwcm90b3R5cGUgY2hhaW4uXG5mdW5jdGlvbiBwcm9wZXJ0eUlzVW5zYWZlKHRhcmdldCwga2V5KSB7XG5cdHJldHVybiBwcm9wZXJ0eUlzT25PYmplY3QodGFyZ2V0LCBrZXkpIC8vIFByb3BlcnRpZXMgYXJlIHNhZmUgdG8gbWVyZ2UgaWYgdGhleSBkb24ndCBleGlzdCBpbiB0aGUgdGFyZ2V0IHlldCxcblx0XHQmJiAhKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSAvLyB1bnNhZmUgaWYgdGhleSBleGlzdCB1cCB0aGUgcHJvdG90eXBlIGNoYWluLFxuXHRcdFx0JiYgT2JqZWN0LnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGFyZ2V0LCBrZXkpKSAvLyBhbmQgYWxzbyB1bnNhZmUgaWYgdGhleSdyZSBub25lbnVtZXJhYmxlLlxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHR2YXIgZGVzdGluYXRpb24gPSB7fTtcblx0aWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuXHRcdGdldEtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHRhcmdldFtrZXldLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fVxuXHRnZXRLZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRpZiAocHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkpIHtcblx0XHRcdHJldHVyblxuXHRcdH1cblxuXHRcdGlmIChwcm9wZXJ0eUlzT25PYmplY3QodGFyZ2V0LCBrZXkpICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pKSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0b3B0aW9ucy5hcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXHRvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0ID0gb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCB8fCBpc01lcmdlYWJsZU9iamVjdDtcblx0Ly8gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQgaXMgYWRkZWQgdG8gYG9wdGlvbnNgIHNvIHRoYXQgY3VzdG9tIGFycmF5TWVyZ2UoKVxuXHQvLyBpbXBsZW1lbnRhdGlvbnMgY2FuIHVzZSBpdC4gVGhlIGNhbGxlciBtYXkgbm90IHJlcGxhY2UgaXQuXG5cdG9wdGlvbnMuY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQgPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZDtcblxuXHR2YXIgc291cmNlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcblx0dmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG5cdHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuXHRpZiAoIXNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2gpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5hcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheScpXG5cdH1cblxuXHRyZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnMpXG5cdH0sIHt9KVxufTtcblxudmFyIGRlZXBtZXJnZV8xID0gZGVlcG1lcmdlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBtZXJnZV8xO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4744\n")},6201:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Draft: () => (/* reexport */ Draft),\n  Draft04: () => (/* reexport */ Draft04),\n  Draft06: () => (/* reexport */ Draft06),\n  Draft07: () => (/* reexport */ Draft07),\n  JsonEditor: () => (/* reexport */ JsonEditor),\n  config: () => (/* binding */ config),\n  createCustomError: () => (/* reexport */ createCustomError),\n  createError: () => (/* reexport */ createError),\n  draft04Config: () => (/* reexport */ draft04Config),\n  draft06Config: () => (/* reexport */ draft06Config),\n  draft07Config: () => (/* reexport */ draft07Config),\n  draftJsonEditorConfig: () => (/* reexport */ draftJsonEditorConfig),\n  getTypeOf: () => (/* reexport */ getTypeOf),\n  isDynamicSchema: () => (/* reexport */ isDynamicSchema),\n  isJsonError: () => (/* reexport */ isJsonError),\n  mergeSchema: () => (/* reexport */ mergeSchema),\n  reduceSchema: () => (/* reexport */ reduceSchema),\n  render: () => (/* reexport */ render),\n  resolveAllOf: () => (/* reexport */ resolveAllOf),\n  resolveDynamicSchema: () => (/* reexport */ resolveDynamicSchema),\n  resolveOneOf: () => (/* reexport */ resolveOneOf),\n  resolveOneOfFuzzy: () => (/* reexport */ resolveOneOfFuzzy),\n  resolveRef: () => (/* reexport */ resolveRef),\n  resolveRefMerge: () => (/* reexport */ resolveRefMerge),\n  settings: () => (/* reexport */ settings),\n  validateAsync: () => (/* reexport */ validateAsync)\n});\n\n;// ./node_modules/json-schema-library/dist/module/lib/config/strings.js\n/* eslint max-len: 0 */\n/* harmony default export */ const strings = ({\n    // validation errors\n    AdditionalItemsError: "Array at `{{pointer}}` may not have an additional item `{{key}}`",\n    AdditionalPropertiesError: "Additional property `{{property}}` on `{{pointer}}` does not match schema `{{schema}}`",\n    AllOfError: "Value `{{value}}` at `{{pointer}}` does not match schema of `{{allOf}}`",\n    AnyOfError: "Value `{{value}}` at `{{pointer}}` does not match any schema of `{{anyOf}}`",\n    ConstError: "Expected value at `{{pointer}}` to be `{{expected}}`, but value given is `{{value}}`",\n    containsAnyError: "The array at `{{pointer}}` must contain at least one item",\n    ContainsArrayError: "The property at `{{pointer}}` must not be an array",\n    ContainsError: "The array at `{{pointer}}` must contain an element that matches `{{schema}}`",\n    EnumError: "Expected given value `{{value}}` in `{{pointer}}` to be one of `{{values}}`",\n    ForbiddenPropertyError: "Property name `{{property}}` at `{{pointer}}` is not allowed",\n    FormatDateError: "Value `{{value}}` at `{{pointer}}` is not a valid date",\n    FormatDateTimeError: "Value `{{value}}` at `{{pointer}}` is not a valid date-time",\n    FormatEmailError: "Value `{{value}}` at `{{pointer}}` is not a valid email",\n    FormatHostnameError: "Value `{{value}}` at `{{pointer}}` is not a valid hostname",\n    FormatIPV4Error: "Value `{{value}}` at `{{pointer}}` is not a valid IPv4 address",\n    FormatIPV4LeadingZeroError: "IPv4 addresses starting with zero are invalid, since they are interpreted as octals",\n    FormatIPV6Error: "Value `{{value}}` at `{{pointer}}` is not a valid IPv6 address",\n    FormatIPV6LeadingZeroError: "IPv6 addresses starting with zero are invalid, since they are interpreted as octals",\n    FormatJsonPointerError: "Value `{{value}}` at `{{pointer}}` is not a valid json-pointer",\n    FormatRegExError: "Value `{{value}}` at `{{pointer}}` is not a valid regular expression",\n    FormatTimeError: "Value `{{value}}` at `{{pointer}}` is not a valid time",\n    FormatURIError: "Value `{{value}}` at `{{pointer}}` is not a valid uri",\n    FormatURIReferenceError: "Value `{{value}}` at `{{pointer}}` is not a valid uri-reference",\n    FormatURITemplateError: "Value `{{value}}` at `{{pointer}}` is not a valid uri-template",\n    FormatURLError: "Value `{{value}}` at `{{pointer}}` is not a valid url",\n    InvalidDataError: "No value may be specified in `{{pointer}}`",\n    InvalidPropertyNameError: "Invalid property name `{{property}}` at `{{pointer}}`",\n    MaximumError: "Value in `{{pointer}}` is `{{length}}`, but should be `{{maximum}}` at maximum",\n    MaxItemsError: "Too many items in `{{pointer}}`, should be `{{maximum}}` at most, but got `{{length}}`",\n    MaxLengthError: "Value `{{pointer}}` should have a maximum length of `{{maxLength}}`, but got `{{length}}`.",\n    MaxPropertiesError: "Too many properties in `{{pointer}}`, should be `{{maximum}}` at most, but got `{{length}}`",\n    MinimumError: "Value in `{{pointer}}` is `{{length}}`, but should be `{{minimum}}` at minimum",\n    MinItemsError: "Too few items in `{{pointer}}`, should be at least `{{minimum}}`, but got `{{length}}`",\n    MinItemsOneError: "At least one item is required in `{{pointer}}`",\n    MinLengthError: "Value `{{pointer}}` should have a minimum length of `{{minLength}}`, but got `{{length}}`.",\n    MinLengthOneError: "A value is required in `{{pointer}}`",\n    MinPropertiesError: "Too few properties in `{{pointer}}`, should be at least `{{minimum}}`, but got `{{length}}`",\n    MissingDependencyError: "The required propery \'{{missingProperty}}\' in `{{pointer}}` is missing",\n    MissingOneOfPropertyError: "Value at `{{pointer}}` property: `{{property}}`",\n    MultipleOfError: "Expected `{{value}}` in `{{pointer}}` to be multiple of `{{multipleOf}}`",\n    MultipleOneOfError: "Value `{{value}}` should not match multiple schemas in oneOf `{{matches}}`",\n    NoAdditionalPropertiesError: "Additional property `{{property}}` in `{{pointer}}` is not allowed",\n    NotError: "Value `{{value}}` at pointer should not match schema `{{not}}`",\n    OneOfError: "Value `{{value}}` in `{{pointer}}` does not match any given oneof schema",\n    OneOfPropertyError: "Failed finding a matching oneOfProperty schema in `{{pointer}}` where `{{property}}` matches `{{value}}`",\n    PatternError: "Value in `{{pointer}}` should match `{{description}}`, but received `{{received}}`",\n    PatternPropertiesError: "Property `{{key}}` does not match any patterns in `{{pointer}}`. Valid patterns are: {{patterns}}",\n    RequiredPropertyError: "The required property `{{key}}` is missing at `{{pointer}}`",\n    SchemaWarning: "Failed retrieving a schema from \'{{pointer}}\' to key \'{{key}}\'",\n    TypeError: "Expected `{{value}}` ({{received}}) in `{{pointer}}` to be of type `{{expected}}`",\n    UndefinedValueError: "Value must not be undefined in `{{pointer}}`",\n    UniqueItemsError: "Items in array must be unique. Value `{{value}}` in `{{pointer}}` is a duplicate of {{duplicatePointer}}.",\n    UnknownPropertyError: "Could not find a valid schema for property `{{pointer}}` within object",\n    ValueNotEmptyError: "A value for `{{property}}` is required at `{{pointer}}`"\n});\n\n;// ./node_modules/json-schema-library/dist/module/lib/getTypeOf.js\nconst getTypeOf_toString = Object.prototype.toString;\nfunction getTypeOf(value) {\n    const type = getTypeOf_toString\n        .call(value)\n        .match(/\\s([^\\]]+)\\]/)\n        .pop()\n        .toLowerCase();\n    if (type === "file") {\n        return "object";\n    }\n    return type;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/render.js\n\nconst OBJECT_TYPE = "object";\nconst ARRAY_TYPE = "array";\n/**\n * Renders data into a string by {{variables}}.\n * Given a template string, removes all {{property}} substrings and replaces them with the property in the given data\n *\n * @param template - template string containing variables in handelbars/mustache style\n * @param data - flat object containing properties matching variables\n * @return rendered string\n */\nfunction render(template, data = {}) {\n    return template.replace(/\\{\\{\\w+\\}\\}/g, (match) => {\n        const key = match.replace(/[{}]/g, "");\n        const variable = data[key];\n        const variableType = getTypeOf(variable);\n        if (variableType === OBJECT_TYPE || variableType === ARRAY_TYPE) {\n            return JSON.stringify(variable);\n        }\n        return variable;\n    });\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/__.js\n\n\n/**\n * Renders the given string as defined in __@see config/strings.js__\n * @param keyword\n * @param data - template data\n * @param fallback - fallback template\n * @return resulting string\n */\nfunction __(keyword, data, fallback = keyword) {\n    var _a;\n    const template = (_a = strings[keyword]) !== null && _a !== void 0 ? _a : fallback;\n    return render(template, data);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/createCustomError.js\n\nfunction dashCase(text) {\n    return text.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();\n}\nfunction createError(name, data) {\n    return {\n        type: "error",\n        name,\n        code: dashCase(name),\n        message: __(name, data),\n        data\n    };\n}\n/**\n * Creates a custom Error Creator. Its messages are defined by strings-object @see config/strings.ts\n *\n * @param name - id of error (camelcased)\n * @return error constructor function\n */\nfunction createCustomError(name) {\n    return createError.bind(null, name);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/flattenArray.js\nfunction flattenArray(list, result = []) {\n    for (let i = 0; i < list.length; i += 1) {\n        const item = list[i];\n        if (Array.isArray(item)) {\n            flattenArray(item, result);\n        }\n        else {\n            result.push(item);\n        }\n    }\n    return result;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/config/settings.js\n/* harmony default export */ const settings = ({\n    DECLARATOR_ONEOF: "oneOfProperty",\n    GET_TEMPLATE_RECURSION_LIMIT: 1,\n    propertyBlacklist: ["_id"],\n    templateDefaultOptions: {\n        addOptionalProps: false,\n        removeInvalidData: false,\n        extendDefaults: true\n    }\n});\n\n;// ./node_modules/json-schema-library/dist/module/lib/schema/createOneOfSchemaResult.js\nfunction createOneOfSchemaResult(schema, oneOfSchema, oneOfIndex) {\n    const childSchema = { ...oneOfSchema };\n    Object.defineProperty(childSchema, "getOneOfOrigin", {\n        enumerable: false,\n        value: () => ({\n            index: oneOfIndex,\n            schema\n        })\n    });\n    return childSchema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/types.js\n/**\n * ts type guard for json error\n * @returns true if passed type is a JsonError\n */\nfunction isJsonError(error) {\n    return (error === null || error === void 0 ? void 0 : error.type) === "error";\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/filter.js\n\nfunction isPromise(obj) {\n    return obj instanceof Promise;\n}\nfunction errorOrPromise(error) {\n    return isJsonError(error) || isPromise(error);\n}\nfunction errorsOnly(error) {\n    return isJsonError(error);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/features/oneOf.js\n/**\n * @draft-04\n */\n\n\n\n\n\n\nconst { DECLARATOR_ONEOF } = settings;\n/**\n * Selects and returns a oneOf schema for the given data\n *\n * @param draft - validator\n * @param data\n * @param schema - current json schema containing property oneOf\n * @param pointer - json pointer to data\n * @return oneOf schema or an error\n */\nfunction resolveOneOf(draft, data, schema = draft.rootSchema, pointer = "#") {\n    // !keyword: oneOfProperty\n    // an additional <DECLARATOR_ONEOF> (default `oneOfProperty`) on the schema will exactly determine the\n    // oneOf value (if set in data)\n    // @fixme\n    // abort if no data is given an DECLARATOR_ONEOF is set (used by getChildSchemaSelection)\n    // this case (data != null) should not be necessary\n    if (data != null && schema[DECLARATOR_ONEOF]) {\n        const errors = [];\n        const oneOfProperty = schema[DECLARATOR_ONEOF];\n        const oneOfValue = data[schema[DECLARATOR_ONEOF]];\n        if (oneOfValue === undefined) {\n            return draft.errors.missingOneOfPropertyError({\n                property: oneOfProperty,\n                pointer,\n                schema,\n                value: data\n            });\n        }\n        for (let i = 0; i < schema.oneOf.length; i += 1) {\n            const one = draft.resolveRef(schema.oneOf[i]);\n            const oneOfPropertySchema = draft.step(oneOfProperty, one, data, pointer);\n            if (isJsonError(oneOfPropertySchema)) {\n                return oneOfPropertySchema;\n            }\n            let result = flattenArray(draft.validate(oneOfValue, oneOfPropertySchema, pointer));\n            result = result.filter(errorOrPromise);\n            if (result.length > 0) {\n                errors.push(...result);\n            }\n            else {\n                return createOneOfSchemaResult(schema, one, i); // return resolved schema\n            }\n        }\n        return draft.errors.oneOfPropertyError({\n            property: oneOfProperty,\n            value: oneOfValue,\n            pointer,\n            schema,\n            errors\n        });\n    }\n    const matches = [];\n    const errors = [];\n    for (let i = 0; i < schema.oneOf.length; i += 1) {\n        const one = draft.resolveRef(schema.oneOf[i]);\n        let result = flattenArray(draft.validate(data, one, pointer));\n        result = result.filter(errorOrPromise);\n        if (result.length > 0) {\n            errors.push(...result);\n        }\n        else {\n            matches.push({ index: i, schema: one });\n        }\n    }\n    if (matches.length === 1) {\n        return createOneOfSchemaResult(schema, matches[0].schema, matches[0].index); // return resolved schema\n    }\n    if (matches.length > 1) {\n        return draft.errors.multipleOneOfError({\n            value: data,\n            pointer,\n            schema,\n            matches\n        });\n    }\n    return draft.errors.oneOfError({\n        value: JSON.stringify(data),\n        pointer,\n        schema,\n        oneOf: schema.oneOf,\n        errors\n    });\n}\n/**\n * Returns a ranking for the data and given schema\n *\n * @param draft\n * @param - json schema type: object\n * @param data\n * @param [pointer]\n * @return ranking value (higher is better)\n */\nfunction fuzzyObjectValue(draft, one, data, pointer) {\n    if (data == null || one.properties == null) {\n        return -1;\n    }\n    let value = 0;\n    const keys = Object.keys(one.properties);\n    for (let i = 0; i < keys.length; i += 1) {\n        const key = keys[i];\n        if (data[key] != null && draft.isValid(data[key], one.properties[key], pointer)) {\n            value += 1;\n        }\n    }\n    return value;\n}\n/**\n * Selects and returns a oneOf schema for the given data\n *\n * @param draft\n * @param data\n * @param [schema] - current json schema containing property oneOf\n * @param [pointer] - json pointer to data\n * @return oneOf schema or an error\n */\nfunction resolveOneOfFuzzy(draft, data, schema = draft.rootSchema, pointer = "#") {\n    // !keyword: oneOfProperty\n    // an additional <DECLARATOR_ONEOF> (default `oneOfProperty`) on the schema will exactly determine the\n    // oneOf value (if set in data)\n    // @fixme\n    // abort if no data is given an DECLARATOR_ONEOF is set (used by getChildSchemaSelection)\n    // this case (data != null) should not be necessary\n    if (data != null && schema[DECLARATOR_ONEOF]) {\n        const errors = [];\n        const oneOfProperty = schema[DECLARATOR_ONEOF];\n        const oneOfValue = data[schema[DECLARATOR_ONEOF]];\n        if (oneOfValue === undefined) {\n            return draft.errors.missingOneOfPropertyError({\n                property: oneOfProperty,\n                pointer,\n                schema,\n                value: data\n            });\n        }\n        for (let i = 0; i < schema.oneOf.length; i += 1) {\n            const one = draft.resolveRef(schema.oneOf[i]);\n            const oneOfPropertySchema = draft.step(oneOfProperty, one, data, pointer);\n            if (isJsonError(oneOfPropertySchema)) {\n                return oneOfPropertySchema;\n            }\n            let result = flattenArray(draft.validate(oneOfValue, oneOfPropertySchema, pointer));\n            result = result.filter(errorOrPromise);\n            if (result.length > 0) {\n                errors.push(...result);\n            }\n            else {\n                return createOneOfSchemaResult(schema, one, i);\n            }\n        }\n        return draft.errors.oneOfPropertyError({\n            property: oneOfProperty,\n            value: oneOfValue,\n            pointer,\n            schema,\n            errors\n        });\n    }\n    // keyword: oneOf\n    const matches = [];\n    for (let i = 0; i < schema.oneOf.length; i += 1) {\n        const one = draft.resolveRef(schema.oneOf[i]);\n        if (draft.isValid(data, one, pointer)) {\n            matches.push({ schema: one, index: i });\n        }\n    }\n    if (matches.length === 1) {\n        return createOneOfSchemaResult(schema, matches[0].schema, matches[0].index);\n    }\n    // fuzzy match oneOf\n    if (getTypeOf(data) === "object") {\n        let schemaOfItem;\n        let schemaOfIndex = -1;\n        let fuzzyGreatest = 0;\n        for (let i = 0; i < schema.oneOf.length; i += 1) {\n            const one = draft.resolveRef(schema.oneOf[i]);\n            const fuzzyValue = fuzzyObjectValue(draft, one, data);\n            if (fuzzyGreatest < fuzzyValue) {\n                fuzzyGreatest = fuzzyValue;\n                schemaOfItem = schema.oneOf[i];\n                schemaOfIndex = i;\n            }\n        }\n        if (schemaOfItem === undefined) {\n            return draft.errors.oneOfError({\n                value: JSON.stringify(data),\n                pointer,\n                schema,\n                oneOf: schema.oneOf\n            });\n        }\n        return createOneOfSchemaResult(schema, schemaOfItem, schemaOfIndex);\n    }\n    if (matches.length > 1) {\n        return draft.errors.multipleOneOfError({ matches, pointer, schema, value: data });\n    }\n    return draft.errors.oneOfError({\n        value: JSON.stringify(data),\n        pointer,\n        schema,\n        oneOf: schema.oneOf\n    });\n}\n/**\n * validates oneOf definition for given input data\n */\nconst validateOneOf = (draft, schema, value, pointer) => {\n    if (Array.isArray(schema.oneOf)) {\n        const schemaOrError = draft.resolveOneOf(value, schema, pointer);\n        if (isJsonError(schemaOrError)) {\n            return schemaOrError;\n        }\n    }\n};\n\n\n// EXTERNAL MODULE: ./node_modules/deepmerge/dist/cjs.js\nvar cjs = __webpack_require__(4744);\nvar cjs_default = /*#__PURE__*/__webpack_require__.n(cjs);\n;// ./node_modules/json-schema-library/dist/module/lib/utils/merge.js\n\nconst overwriteMerge = (destinationArray, sourceArray) => sourceArray;\n/**\n * returns a new json-schema, where properties are combined and arrays are replaced\n */\n/* harmony default export */ const merge = ((a, b) => cjs_default()(a, b, { arrayMerge: overwriteMerge }));\n// var d = c.filter((item, pos) => c.indexOf(item) === pos)\nconst mergeUniqueItems = (destinationArray, sourceArray) => {\n    const all = destinationArray.concat(sourceArray);\n    return all.filter((item, pos) => all.indexOf(item) === pos);\n};\n/**\n * returns a new json-schema, where properties are combined and arrays are replaced\n */\nconst mergeArraysUnique = (a, b) => cjs_default()(a, b, { arrayMerge: mergeUniqueItems });\n\n;// ./node_modules/json-schema-library/dist/module/lib/mergeSchema.js\n\n\n/**\n * merges to two json schema. In case of conflicts, will use overwrite first\n * schema or directly return first json schema.\n */\nfunction mergeSchema(a, b) {\n    const aType = getTypeOf(a);\n    const bType = getTypeOf(b);\n    if (aType !== bType) {\n        return a;\n    }\n    const result = mergeArraysUnique(a, b);\n    if (a.getOneOfOrigin) {\n        Object.defineProperty(result, "getOneOfOrigin", {\n            enumerable: false,\n            value: a.getOneOfOrigin\n        });\n    }\n    else if (b.getOneOfOrigin) {\n        Object.defineProperty(result, "getOneOfOrigin", {\n            enumerable: false,\n            value: b.getOneOfOrigin\n        });\n    }\n    return result;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/omit.js\n/**\n * Omit properties from input object. Accepts any number of properties to\n * remove. Example:\n *\n * ```ts\n * omit(myObject, "if", "dependencies");\n * ```\n *\n * @returns shallow copy of input object without specified properties\n */\nfunction omit(object, ...keysToOmit) {\n    const result = {};\n    Object.keys(object).forEach((key) => {\n        if (!keysToOmit.includes(key)) {\n            result[key] = object[key];\n        }\n    });\n    if (object.getOneOfOrigin) {\n        Object.defineProperty(result, "getOneOfOrigin", {\n            enumerable: false,\n            value: object.getOneOfOrigin\n        });\n    }\n    return result;\n}\n\n;// ./node_modules/fast-copy/dist/esm/index.mjs\nvar toStringFunction = Function.prototype.toString;\nvar create = Object.create;\nvar toStringObject = Object.prototype.toString;\n/**\n * @classdesc Fallback cache for when WeakMap is not natively supported\n */\nvar LegacyCache = /** @class */ (function () {\n    function LegacyCache() {\n        this._keys = [];\n        this._values = [];\n    }\n    LegacyCache.prototype.has = function (key) {\n        return !!~this._keys.indexOf(key);\n    };\n    LegacyCache.prototype.get = function (key) {\n        return this._values[this._keys.indexOf(key)];\n    };\n    LegacyCache.prototype.set = function (key, value) {\n        this._keys.push(key);\n        this._values.push(value);\n    };\n    return LegacyCache;\n}());\nfunction createCacheLegacy() {\n    return new LegacyCache();\n}\nfunction createCacheModern() {\n    return new WeakMap();\n}\n/**\n * Get a new cache object to prevent circular references.\n */\nvar createCache = typeof WeakMap !== \'undefined\' ? createCacheModern : createCacheLegacy;\n/**\n * Get an empty version of the object with the same prototype it has.\n */\nfunction getCleanClone(prototype) {\n    if (!prototype) {\n        return create(null);\n    }\n    var Constructor = prototype.constructor;\n    if (Constructor === Object) {\n        return prototype === Object.prototype ? {} : create(prototype);\n    }\n    if (Constructor &&\n        ~toStringFunction.call(Constructor).indexOf(\'[native code]\')) {\n        try {\n            return new Constructor();\n        }\n        catch (_a) { }\n    }\n    return create(prototype);\n}\nfunction getRegExpFlagsLegacy(regExp) {\n    var flags = \'\';\n    if (regExp.global) {\n        flags += \'g\';\n    }\n    if (regExp.ignoreCase) {\n        flags += \'i\';\n    }\n    if (regExp.multiline) {\n        flags += \'m\';\n    }\n    if (regExp.unicode) {\n        flags += \'u\';\n    }\n    if (regExp.sticky) {\n        flags += \'y\';\n    }\n    return flags;\n}\nfunction getRegExpFlagsModern(regExp) {\n    return regExp.flags;\n}\n/**\n * Get the flags to apply to the copied regexp.\n */\nvar getRegExpFlags = /test/g.flags === \'g\' ? getRegExpFlagsModern : getRegExpFlagsLegacy;\nfunction getTagLegacy(value) {\n    var type = toStringObject.call(value);\n    return type.substring(8, type.length - 1);\n}\nfunction getTagModern(value) {\n    return value[Symbol.toStringTag] || getTagLegacy(value);\n}\n/**\n * Get the tag of the value passed, so that the correct copier can be used.\n */\nvar getTag = typeof Symbol !== \'undefined\' ? getTagModern : getTagLegacy;\n\nvar defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar _a = Object.prototype, esm_hasOwnProperty = _a.hasOwnProperty, propertyIsEnumerable = _a.propertyIsEnumerable;\nvar SUPPORTS_SYMBOL = typeof getOwnPropertySymbols === \'function\';\nfunction getStrictPropertiesModern(object) {\n    return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));\n}\n/**\n * Get the properites used when copying objects strictly. This includes both keys and symbols.\n */\nvar getStrictProperties = SUPPORTS_SYMBOL\n    ? getStrictPropertiesModern\n    : getOwnPropertyNames;\n/**\n * Striclty copy all properties contained on the object.\n */\nfunction copyOwnPropertiesStrict(value, clone, state) {\n    var properties = getStrictProperties(value);\n    for (var index = 0, length_1 = properties.length, property = void 0, descriptor = void 0; index < length_1; ++index) {\n        property = properties[index];\n        if (property === \'callee\' || property === \'caller\') {\n            continue;\n        }\n        descriptor = getOwnPropertyDescriptor(value, property);\n        if (!descriptor) {\n            // In extra edge cases where the property descriptor cannot be retrived, fall back to\n            // the loose assignment.\n            clone[property] = state.copier(value[property], state);\n            continue;\n        }\n        // Only clone the value if actually a value, not a getter / setter.\n        if (!descriptor.get && !descriptor.set) {\n            descriptor.value = state.copier(descriptor.value, state);\n        }\n        try {\n            defineProperty(clone, property, descriptor);\n        }\n        catch (error) {\n            // Tee above can fail on node in edge cases, so fall back to the loose assignment.\n            clone[property] = descriptor.value;\n        }\n    }\n    return clone;\n}\n/**\n * Deeply copy the indexed values in the array.\n */\nfunction copyArrayLoose(array, state) {\n    var clone = new state.Constructor();\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(array, clone);\n    for (var index = 0, length_2 = array.length; index < length_2; ++index) {\n        clone[index] = state.copier(array[index], state);\n    }\n    return clone;\n}\n/**\n * Deeply copy the indexed values in the array, as well as any custom properties.\n */\nfunction copyArrayStrict(array, state) {\n    var clone = new state.Constructor();\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(array, clone);\n    return copyOwnPropertiesStrict(array, clone, state);\n}\n/**\n * Copy the contents of the ArrayBuffer.\n */\nfunction copyArrayBuffer(arrayBuffer, _state) {\n    return arrayBuffer.slice(0);\n}\n/**\n * Create a new Blob with the contents of the original.\n */\nfunction copyBlob(blob, _state) {\n    return blob.slice(0, blob.size, blob.type);\n}\n/**\n * Create a new DataView with the contents of the original.\n */\nfunction copyDataView(dataView, state) {\n    return new state.Constructor(copyArrayBuffer(dataView.buffer));\n}\n/**\n * Create a new Date based on the time of the original.\n */\nfunction copyDate(date, state) {\n    return new state.Constructor(date.getTime());\n}\n/**\n * Deeply copy the keys and values of the original.\n */\nfunction copyMapLoose(map, state) {\n    var clone = new state.Constructor();\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(map, clone);\n    map.forEach(function (value, key) {\n        clone.set(key, state.copier(value, state));\n    });\n    return clone;\n}\n/**\n * Deeply copy the keys and values of the original, as well as any custom properties.\n */\nfunction copyMapStrict(map, state) {\n    return copyOwnPropertiesStrict(map, copyMapLoose(map, state), state);\n}\nfunction copyObjectLooseLegacy(object, state) {\n    var clone = getCleanClone(state.prototype);\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(object, clone);\n    for (var key in object) {\n        if (esm_hasOwnProperty.call(object, key)) {\n            clone[key] = state.copier(object[key], state);\n        }\n    }\n    return clone;\n}\nfunction copyObjectLooseModern(object, state) {\n    var clone = getCleanClone(state.prototype);\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(object, clone);\n    for (var key in object) {\n        if (esm_hasOwnProperty.call(object, key)) {\n            clone[key] = state.copier(object[key], state);\n        }\n    }\n    var symbols = getOwnPropertySymbols(object);\n    for (var index = 0, length_3 = symbols.length, symbol = void 0; index < length_3; ++index) {\n        symbol = symbols[index];\n        if (propertyIsEnumerable.call(object, symbol)) {\n            clone[symbol] = state.copier(object[symbol], state);\n        }\n    }\n    return clone;\n}\n/**\n * Deeply copy the properties (keys and symbols) and values of the original.\n */\nvar copyObjectLoose = SUPPORTS_SYMBOL\n    ? copyObjectLooseModern\n    : copyObjectLooseLegacy;\n/**\n * Deeply copy the properties (keys and symbols) and values of the original, as well\n * as any hidden or non-enumerable properties.\n */\nfunction copyObjectStrict(object, state) {\n    var clone = getCleanClone(state.prototype);\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(object, clone);\n    return copyOwnPropertiesStrict(object, clone, state);\n}\n/**\n * Create a new primitive wrapper from the value of the original.\n */\nfunction copyPrimitiveWrapper(primitiveObject, state) {\n    return new state.Constructor(primitiveObject.valueOf());\n}\n/**\n * Create a new RegExp based on the value and flags of the original.\n */\nfunction copyRegExp(regExp, state) {\n    var clone = new state.Constructor(regExp.source, getRegExpFlags(regExp));\n    clone.lastIndex = regExp.lastIndex;\n    return clone;\n}\n/**\n * Return the original value (an identity function).\n *\n * @note\n * THis is used for objects that cannot be copied, such as WeakMap.\n */\nfunction copySelf(value, _state) {\n    return value;\n}\n/**\n * Deeply copy the values of the original.\n */\nfunction copySetLoose(set, state) {\n    var clone = new state.Constructor();\n    // set in the cache immediately to be able to reuse the object recursively\n    state.cache.set(set, clone);\n    set.forEach(function (value) {\n        clone.add(state.copier(value, state));\n    });\n    return clone;\n}\n/**\n * Deeply copy the values of the original, as well as any custom properties.\n */\nfunction copySetStrict(set, state) {\n    return copyOwnPropertiesStrict(set, copySetLoose(set, state), state);\n}\n\nvar isArray = Array.isArray;\nvar esm_assign = Object.assign;\nvar getPrototypeOf = Object.getPrototypeOf || (function (obj) { return obj.__proto__; });\nvar DEFAULT_LOOSE_OPTIONS = {\n    array: copyArrayLoose,\n    arrayBuffer: copyArrayBuffer,\n    blob: copyBlob,\n    dataView: copyDataView,\n    date: copyDate,\n    error: copySelf,\n    map: copyMapLoose,\n    object: copyObjectLoose,\n    regExp: copyRegExp,\n    set: copySetLoose,\n};\nvar DEFAULT_STRICT_OPTIONS = esm_assign({}, DEFAULT_LOOSE_OPTIONS, {\n    array: copyArrayStrict,\n    map: copyMapStrict,\n    object: copyObjectStrict,\n    set: copySetStrict,\n});\n/**\n * Get the copiers used for each specific object tag.\n */\nfunction getTagSpecificCopiers(options) {\n    return {\n        Arguments: options.object,\n        Array: options.array,\n        ArrayBuffer: options.arrayBuffer,\n        Blob: options.blob,\n        Boolean: copyPrimitiveWrapper,\n        DataView: options.dataView,\n        Date: options.date,\n        Error: options.error,\n        Float32Array: options.arrayBuffer,\n        Float64Array: options.arrayBuffer,\n        Int8Array: options.arrayBuffer,\n        Int16Array: options.arrayBuffer,\n        Int32Array: options.arrayBuffer,\n        Map: options.map,\n        Number: copyPrimitiveWrapper,\n        Object: options.object,\n        Promise: copySelf,\n        RegExp: options.regExp,\n        Set: options.set,\n        String: copyPrimitiveWrapper,\n        WeakMap: copySelf,\n        WeakSet: copySelf,\n        Uint8Array: options.arrayBuffer,\n        Uint8ClampedArray: options.arrayBuffer,\n        Uint16Array: options.arrayBuffer,\n        Uint32Array: options.arrayBuffer,\n        Uint64Array: options.arrayBuffer,\n    };\n}\n/**\n * Create a custom copier based on the object-specific copy methods passed.\n */\nfunction createCopier(options) {\n    var normalizedOptions = esm_assign({}, DEFAULT_LOOSE_OPTIONS, options);\n    var tagSpecificCopiers = getTagSpecificCopiers(normalizedOptions);\n    var array = tagSpecificCopiers.Array, object = tagSpecificCopiers.Object;\n    function copier(value, state) {\n        state.prototype = state.Constructor = undefined;\n        if (!value || typeof value !== \'object\') {\n            return value;\n        }\n        if (state.cache.has(value)) {\n            return state.cache.get(value);\n        }\n        state.prototype = getPrototypeOf(value);\n        state.Constructor = state.prototype && state.prototype.constructor;\n        // plain objects\n        if (!state.Constructor || state.Constructor === Object) {\n            return object(value, state);\n        }\n        // arrays\n        if (isArray(value)) {\n            return array(value, state);\n        }\n        var tagSpecificCopier = tagSpecificCopiers[getTag(value)];\n        if (tagSpecificCopier) {\n            return tagSpecificCopier(value, state);\n        }\n        return typeof value.then === \'function\' ? value : object(value, state);\n    }\n    return function copy(value) {\n        return copier(value, {\n            Constructor: undefined,\n            cache: createCache(),\n            copier: copier,\n            prototype: undefined,\n        });\n    };\n}\n/**\n * Create a custom copier based on the object-specific copy methods passed, defaulting to the\n * same internals as `copyStrict`.\n */\nfunction createStrictCopier(options) {\n    return createCopier(esm_assign({}, DEFAULT_STRICT_OPTIONS, options));\n}\n/**\n * Copy an value deeply as much as possible, where strict recreation of object properties\n * are maintained. All properties (including non-enumerable ones) are copied with their\n * original property descriptors on both objects and arrays.\n */\nvar copyStrict = createStrictCopier({});\n/**\n * Copy an value deeply as much as possible.\n */\nvar index = createCopier({});\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/copy.js\n\n/* harmony default export */ const copy = (index);\n\n;// ./node_modules/json-schema-library/dist/module/lib/features/if.js\n/**\n * returns if-then-else as a json schema. does not merge with input\n * json schema. you probably will need to do so to correctly resolve\n * references.\n *\n * @returns json schema defined by if-then-else or undefined\n */\nfunction resolveIfSchema(draft, schema, data) {\n    if (schema.if == null) {\n        return undefined;\n    }\n    if (schema.if === false) {\n        return schema.else;\n    }\n    if (schema.if && (schema.then || schema.else)) {\n        const ifErrors = draft.validate(data, draft.resolveRef(schema.if));\n        if (ifErrors.length === 0 && schema.then) {\n            return draft.resolveRef(schema.then);\n        }\n        if (ifErrors.length !== 0 && schema.else) {\n            return draft.resolveRef(schema.else);\n        }\n    }\n}\n/**\n * @returns validation result of it-then-else schema\n */\nconst validateIf = (draft, schema, value, pointer) => {\n    const resolvedSchema = resolveIfSchema(draft, schema, value);\n    if (resolvedSchema) {\n        return draft.validate(value, resolvedSchema, pointer);\n    }\n};\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/features/allOf.js\n\n\n\n\n/**\n * resolves schema\n * when complete this will have much duplication to step.object etc\n */\nfunction resolveSchema(draft, schemaToResolve, data) {\n    var _a;\n    const schema = { ...((_a = draft.resolveRef(schemaToResolve)) !== null && _a !== void 0 ? _a : {}) };\n    const ifSchema = resolveIfSchema(draft, schema, data);\n    if (ifSchema) {\n        return ifSchema;\n    }\n    return omit(schema, "if", "then", "else");\n}\nfunction resolveAllOf(draft, data, schema = draft.rootSchema) {\n    let mergedSchema = copy(schema);\n    for (let i = 0; i < schema.allOf.length; i += 1) {\n        // @todo introduce draft.resolveSchema to iteratively resolve\n        const allOfSchema = resolveSchema(draft, schema.allOf[i], data);\n        mergedSchema = mergeSchema(mergedSchema, allOfSchema);\n        data = draft.getTemplate(data, mergedSchema);\n    }\n    delete mergedSchema.allOf;\n    return mergedSchema;\n}\n/**\n * @attention: subschemas have to be resolved upfront (e.g. if-else that do not apply)\n * Merge all allOf sub schema into a single schema. Returns undefined for\n * missing allOf definition.\n *\n * @returns json schema defined by allOf or undefined\n */\nfunction mergeAllOfSchema(draft, schema) {\n    const { allOf } = schema;\n    if (!Array.isArray(allOf) || allOf.length === 0) {\n        return;\n    }\n    let resolvedSchema = {};\n    allOf.forEach((subschema) => {\n        resolvedSchema = mergeSchema(resolvedSchema, draft.resolveRef(subschema));\n    });\n    return resolvedSchema;\n}\n/**\n * validate allOf definition for given input data\n */\nconst validateAllOf = (draft, schema, value, pointer) => {\n    const { allOf } = schema;\n    if (!Array.isArray(allOf) || allOf.length === 0) {\n        return;\n    }\n    const errors = [];\n    schema.allOf.forEach((subSchema) => {\n        errors.push(...draft.validate(value, subSchema, pointer));\n    });\n    return errors;\n};\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/resolveRef.strict.js\nfunction resolveRef(schema, rootSchema) {\n    if (schema == null || schema.$ref == null) {\n        return schema;\n    }\n    if (schema.getRoot) {\n        // we actually always need to resolve the schema like this, since returned subschemas\n        // must resolve relative from their schema\n        const resolvedSchema = schema.getRoot().getRef(schema);\n        // console.log(schema.$ref, "=>", resolvedSchema);\n        return resolvedSchema;\n    }\n    // tryout - this should never be called, except we missed something\n    const resolvedSchema = rootSchema.getRef(schema);\n    return resolvedSchema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/resolveRef.merge.js\nfunction resolveRefMerge(schema, rootSchema) {\n    if (schema == null || schema.$ref == null) {\n        return schema;\n    }\n    const resolvedSchema = rootSchema.getRef(schema);\n    const mergedSchema = Object.assign({}, resolvedSchema, schema);\n    delete mergedSchema.$ref;\n    // @todo the following might not be safe nor incomplete\n    Object.defineProperty(mergedSchema, "__ref", { enumerable: false, value: schema.__ref });\n    Object.defineProperty(mergedSchema, "getRoot", { enumerable: false, value: schema.getRoot });\n    return mergedSchema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/validateAsync.js\n\n\n\nfunction createErrorNotification(onError) {\n    return function notifyError(error) {\n        if (Array.isArray(error)) {\n            error = flattenArray(error);\n            error.forEach(notifyError);\n            return error;\n        }\n        if (isJsonError(error)) {\n            onError(error);\n        }\n        return error;\n    };\n}\n/**\n * @async\n * Validate data by a json schema\n *\n * @param draft - validator\n * @param value - value to validate\n * @param options\n * @param options.schema - json schema to use, defaults to draft.rootSchema\n * @param options.pointer - json pointer pointing to current value. Used in error reports\n * @param options.onError   - will be called for each error as soon as it is resolved\n * @return list of errors or empty\n */\nfunction validateAsync(draft, value, options) {\n    const { schema, pointer, onError } = { schema: draft.rootSchema, pointer: "#", ...options };\n    let errors = draft.validate(value, schema, pointer);\n    if (onError) {\n        errors = flattenArray(errors);\n        const notifyError = createErrorNotification(onError);\n        for (let i = 0; i < errors.length; i += 1) {\n            const error = errors[i];\n            if (error instanceof Promise) {\n                error.then(notifyError);\n            }\n            else if (isJsonError(error)) {\n                onError(error);\n            }\n        }\n    }\n    return Promise.all(errors)\n        .then(flattenArray)\n        .then((resolvedErrors) => resolvedErrors.filter(errorsOnly))\n        .catch((e) => {\n        console.log("Failed resolving promises", e.message);\n        console.log(e.stack);\n        throw e;\n    });\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/uniqueItems.js\n/**\n * @returns list with unique values only\n */\nfunction uniqueItems(list) {\n    return list.filter((item, index) => list.indexOf(item) === index);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/isObject.js\n\nfunction isObject(v) {\n    return getTypeOf(v) === "object";\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/features/dependencies.js\n\n\n\n\n/**\n * returns dependencies as an object json schema. does not merge with input\n * json schema. you probably will need to do so to correctly resolve\n * references.\n *\n * @returns merged json schema defined by dependencies or undefined\n */\nfunction resolveDependencies(draft, schema, data) {\n    const { dependencies } = schema;\n    if (!isObject(dependencies) || !isObject(data)) {\n        return;\n    }\n    let updated = false;\n    let resolvedSchema = { required: [] };\n    Object.keys(dependencies).forEach((prop) => {\n        var _a, _b;\n        if (data[prop] == null &&\n            !(((_a = schema.required) === null || _a === void 0 ? void 0 : _a.includes(prop)) || ((_b = resolvedSchema.required) === null || _b === void 0 ? void 0 : _b.includes(prop)))) {\n            return;\n        }\n        const dependency = dependencies[prop];\n        // dependency array\n        if (Array.isArray(dependency)) {\n            updated = true;\n            resolvedSchema.required.push(...dependency);\n            return;\n        }\n        // dependency schema\n        if (isObject(dependency)) {\n            updated = true;\n            resolvedSchema = mergeSchema(resolvedSchema, draft.resolveRef(dependency));\n            return;\n        }\n    });\n    if (updated) {\n        resolvedSchema.required = uniqueItems(resolvedSchema.required);\n        return resolvedSchema;\n    }\n}\n/**\n * validate dependencies definition for given input data\n */\nconst validateDependencies = (draft, schema, value, pointer) => {\n    if (getTypeOf(schema.dependencies) !== "object") {\n        return undefined;\n    }\n    const errors = [];\n    Object.keys(value).forEach((property) => {\n        if (schema.dependencies[property] === undefined) {\n            return;\n        }\n        // @draft >= 6 boolean schema\n        if (schema.dependencies[property] === true) {\n            return;\n        }\n        if (schema.dependencies[property] === false) {\n            errors.push(draft.errors.missingDependencyError({ pointer, schema, value }));\n            return;\n        }\n        let dependencyErrors;\n        const type = getTypeOf(schema.dependencies[property]);\n        if (type === "array") {\n            dependencyErrors = schema.dependencies[property]\n                .filter((dependency) => value[dependency] === undefined)\n                .map((missingProperty) => draft.errors.missingDependencyError({ missingProperty, pointer, schema, value }));\n        }\n        else if (type === "object") {\n            dependencyErrors = draft.validate(value, schema.dependencies[property], pointer);\n        }\n        else {\n            throw new Error(`Invalid dependency definition for ${pointer}/${property}. Must be string[] or schema`);\n        }\n        errors.push(...dependencyErrors);\n    });\n    return errors.length > 0 ? errors : undefined;\n};\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/features/anyOf.js\n/**\n * @draft-04\n */\n\n\n/**\n * returns merged schema of all valid anyOf subschemas for the given input data.\n * Does not merge with rest input schema.\n *\n * @returns merged anyOf subschemas which are valid to the given input data.\n */\nfunction mergeValidAnyOfSchema(draft, schema, data) {\n    if (!Array.isArray(schema.anyOf) || schema.anyOf.length === 0) {\n        return;\n    }\n    let resolvedSchema;\n    schema.anyOf.forEach((anySchema) => {\n        anySchema = draft.resolveRef(anySchema);\n        if (draft.isValid(data, anySchema)) {\n            resolvedSchema = resolvedSchema ? mergeSchema(resolvedSchema, anySchema) : anySchema;\n        }\n    });\n    return resolvedSchema;\n}\n/**\n * @returns extended input schema with valid anyOf subschemas or JsonError if\n * no anyOf schema matches input data\n */\nfunction resolveAnyOf(draft, data, schema = draft.rootSchema, pointer = "#") {\n    const { anyOf } = schema;\n    if (!Array.isArray(anyOf) || anyOf.length === 0) {\n        return schema;\n    }\n    const resolvedSchema = mergeValidAnyOfSchema(draft, schema, data);\n    if (resolvedSchema == null) {\n        return draft.errors.anyOfError({ pointer, schema, value: data, anyOf: JSON.stringify(anyOf) });\n    }\n    const mergedSchema = mergeSchema(schema, resolvedSchema);\n    return omit(mergedSchema, "anyOf");\n}\n/**\n * validate anyOf definition for given input data\n */\nconst validateAnyOf = (draft, schema, value, pointer) => {\n    if (!Array.isArray(schema.anyOf) || schema.anyOf.length === 0) {\n        return undefined;\n    }\n    for (let i = 0; i < schema.anyOf.length; i += 1) {\n        if (draft.isValid(value, schema.anyOf[i])) {\n            return undefined;\n        }\n    }\n    return draft.errors.anyOfError({ pointer, schema, value, anyOf: schema.anyOf });\n};\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/resolveDynamicSchema.js\n\n\n\n\n\n\n\n\nconst toOmit = ["allOf", "anyOf", "oneOf", "dependencies", "if", "then", "else"];\nconst dynamicProperties = ["allOf", "anyOf", "oneOf", "dependencies", "if"];\nfunction isDynamicSchema(schema) {\n    const givenProps = Object.keys(schema);\n    return dynamicProperties.findIndex((prop) => givenProps.includes(prop)) !== -1;\n}\n/**\n * @note this utility does not reference draft methods for resolution\n * @todo consider using draft methods\n *\n * Resolves all dynamic schema definitions for the given input data and returns\n * the resulting json-schema without any dynamic schema definitions. The result\n * is not merged with the original input schema, thus static definitions of the\n * input schema are untouched and missing. For a full schema definition of this\n * input data you have to merge the result with the original schema\n * (@see reduceSchema)\n *\n * dynamic schema definitions: dependencies, allOf, anyOf, oneOf, if\n *\n * @returns static schema from resolved dynamic schema definitions for this\n *  specific input data\n */\nfunction resolveDynamicSchema(draft, schema, data, pointer) {\n    let resolvedSchema;\n    let error;\n    schema = draft.resolveRef(schema);\n    // @feature oneOf\n    if (schema.oneOf) {\n        const oneOfSchema = resolveOneOfFuzzy(draft, data, schema, pointer);\n        if (isJsonError(oneOfSchema)) {\n            error = oneOfSchema;\n        }\n        else if (oneOfSchema) {\n            resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, oneOfSchema);\n        }\n    }\n    // @feature allOf\n    if (Array.isArray(schema.allOf)) {\n        const allOf = schema.allOf.map((s) => {\n            // before merging allOf schema we need to resolve all subschemas\n            // if not, we would wrongly merge oneOf, if-then statements, etc\n            if (isDynamicSchema(s)) {\n                // copy of reduceSchema\n                let result = resolveDynamicSchema(draft, s, data, pointer);\n                if (result) {\n                    result = mergeSchema(s, result);\n                    return omit(result, ...toOmit);\n                }\n                return undefined;\n            }\n            return s;\n        });\n        if (allOf.length > 0) {\n            const allOfSchema = mergeAllOfSchema(draft, { allOf });\n            resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, allOfSchema);\n        }\n    }\n    // @feature anyOf\n    const anyOfSchema = mergeValidAnyOfSchema(draft, schema, data);\n    if (anyOfSchema) {\n        resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, anyOfSchema);\n    }\n    // @feature dependencies\n    const dependenciesSchema = resolveDependencies(draft, schema, data);\n    if (dependenciesSchema) {\n        resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, dependenciesSchema);\n    }\n    // @feature if-then-else\n    const ifSchema = resolveIfSchema(draft, schema, data);\n    if (ifSchema) {\n        resolvedSchema = mergeSchema(resolvedSchema !== null && resolvedSchema !== void 0 ? resolvedSchema : {}, ifSchema);\n    }\n    if (resolvedSchema == null) {\n        return error;\n    }\n    const nestedSchema = resolveDynamicSchema(draft, resolvedSchema, data, pointer);\n    if (nestedSchema) {\n        resolvedSchema = mergeSchema(resolvedSchema, nestedSchema);\n    }\n    return omit(resolvedSchema, ...toOmit);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/reduceSchema.js\n\n\n\nconst reduceSchema_toOmit = ["allOf", "anyOf", "oneOf", "dependencies", "if", "then", "else"];\n/**\n * reduces json schema by merging dynamic constructs like if-then-else,\n * dependencies, allOf, anyOf, oneOf, etc into a static json schema\n * omitting those properties.\n *\n * @returns input schema reduced by dynamic schema definitions for the given\n * input data\n */\nfunction reduceSchema(draft, schema, data, pointer) {\n    let resolvedSchema = resolveDynamicSchema(draft, schema, data, pointer);\n    if (resolvedSchema) {\n        resolvedSchema = mergeSchema(schema, resolvedSchema);\n        return omit(resolvedSchema, ...reduceSchema_toOmit);\n    }\n    return schema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft/index.js\n\nclass Draft {\n    constructor(config, schema) {\n        /** cache for remote schemas */\n        this.remotes = {};\n        /** error creators by id */\n        this.errors = {};\n        /** map for valid keywords of a type  */\n        this.typeKeywords = {};\n        /** keyword validators  */\n        this.validateKeyword = {};\n        /** type validators  */\n        this.validateType = {};\n        /** format validators  */\n        this.validateFormat = {};\n        this.config = config;\n        this.typeKeywords = copy(config.typeKeywords);\n        this.validateKeyword = Object.assign({}, config.validateKeyword);\n        this.validateType = Object.assign({}, config.validateType);\n        this.validateFormat = Object.assign({}, config.validateFormat);\n        this.errors = Object.assign({}, config.errors);\n        this.setSchema(schema);\n    }\n    get rootSchema() {\n        return this.__rootSchema;\n    }\n    set rootSchema(rootSchema) {\n        if (rootSchema == null) {\n            return;\n        }\n        this.__rootSchema = this.config.compileSchema(this, rootSchema);\n    }\n    /**\n     * register a json-schema to be referenced from another json-schema\n     * @param url - base-url of json-schema (aka id)\n     * @param schema - json-schema root\n     */\n    addRemoteSchema(url, schema) {\n        this.config.addRemoteSchema(this, url, schema);\n    }\n    compileSchema(schema) {\n        var _a;\n        return this.config.compileSchema(this, schema, (_a = this.rootSchema) !== null && _a !== void 0 ? _a : schema);\n    }\n    createSchemaOf(data) {\n        return this.config.createSchemaOf(data);\n    }\n    /**\n     * Iterates over data, retrieving its schema\n     *\n     * @param data - the data to iterate\n     * @param callback - will be called with (schema, data, pointer) on each item\n     * @param [schema] - the schema matching the data. Defaults to rootSchema\n     * @param [pointer] - pointer to current data. Default to rootPointer\n     */\n    each(data, callback, schema, pointer) {\n        return this.config.each(this, data, callback, schema, pointer);\n    }\n    eachSchema(callback, schema = this.rootSchema) {\n        return this.config.eachSchema(schema, callback);\n    }\n    getChildSchemaSelection(property, schema) {\n        return this.config.getChildSchemaSelection(this, property, schema);\n    }\n    /**\n     * Returns the json-schema of a data-json-pointer.\n     *\n     * To resolve dynamic schema where the type of json-schema is evaluated by\n     * its value, a data object has to be passed in options.\n     *\n     * Per default this function will return `undefined` for valid properties that\n     * do not have a defined schema. Use the option `withSchemaWarning: true` to\n     * receive an error with `code: schema-warning` containing the location of its\n     * last evaluated json-schema.\n     *\n     * Notes\n     *      - uses draft.step to walk through data and schema\n     *\n     * @param draft\n     * @param pointer - json pointer in data to get the json schema for\n     * @param [options.data] - the data object, which includes the json pointers value. This is optional, as\n     *    long as no oneOf, anyOf, etc statement is part of the pointers schema\n     * @param [options.schema] - the json schema to iterate. Defaults to draft.rootSchema\n     * @param [options.withSchemaWarning] - if true returns an error instead of `undefined` for valid properties missing a schema definition\n     * @return resolved json-schema object of requested json-pointer location\n     */\n    getSchema(options) {\n        return this.config.getSchema(this, options);\n    }\n    /**\n     * Create data object matching the given schema\n     *\n     * @param [data] - optional template data\n     * @param [schema] - json schema, defaults to rootSchema\n     * @return created template data\n     */\n    getTemplate(data, schema, opts = this.config.templateDefaultOptions) {\n        return this.config.getTemplate(this, data, schema, opts);\n    }\n    isValid(data, schema, pointer) {\n        return this.config.isValid(this, data, schema, pointer);\n    }\n    resolveAnyOf(data, schema, pointer) {\n        return this.config.resolveAnyOf(this, data, schema, pointer);\n    }\n    resolveAllOf(data, schema) {\n        return this.config.resolveAllOf(this, data, schema);\n    }\n    resolveRef(schema) {\n        return this.config.resolveRef(schema, this.rootSchema);\n    }\n    resolveOneOf(data, schema, pointer) {\n        return this.config.resolveOneOf(this, data, schema, pointer);\n    }\n    setSchema(schema) {\n        this.rootSchema = schema;\n    }\n    /**\n     * Returns the json-schema of the given object property or array item.\n     * e.g. it steps by one key into the data\n     *\n     *  This helper determines the location of the property within the schema (additional properties, oneOf, ...) and\n     *  returns the correct schema.\n     *\n     * @param  key       - property-name or array-index\n     * @param  schema    - json schema of current data\n     * @param  data      - parent of key\n     * @param  [pointer] - pointer to schema and data (parent of key)\n     * @return Schema or Error if failed resolving key\n     */\n    step(key, schema, data, pointer) {\n        return this.config.step(this, key, schema, data, pointer);\n    }\n    /**\n     * Validate data by a json schema\n     *\n     * @param value - value to validate\n     * @param [schema] - json schema, defaults to rootSchema\n     * @param [pointer] - json pointer pointing to value (used for error-messages only)\n     * @return list of errors or empty\n     */\n    validate(data, schema, pointer) {\n        return this.config.validate(this, data, schema, pointer);\n    }\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/addRemoteSchema.js\n/**\n * register a json-schema to be referenced from another json-schema\n * @param url    base-url of json-schema (aka id)\n * @param schema\n */\nfunction addRemoteSchema(draft, url, schema) {\n    schema.id = schema.id || url;\n    draft.remotes[url] = draft.compileSchema(schema);\n}\n\n// EXTERNAL MODULE: ./node_modules/@sagold/json-pointer/dist/jsonPointer.js\nvar jsonPointer = __webpack_require__(2546);\nvar jsonPointer_default = /*#__PURE__*/__webpack_require__.n(jsonPointer);\n// EXTERNAL MODULE: ./node_modules/ebnf/dist/Grammars/W3CEBNF.js\nvar W3CEBNF = __webpack_require__(6782);\n;// ./node_modules/@sagold/json-query/dist/module/lib/parser/jsonQueryGrammar.js\nconst propertyRegex = "[^?/{}*,()#]+";\n// W3C ENBF grammar\n// https://github.com/lys-lang/node-ebnf/blob/master/test/W3CEBNF.spec.ts\n// https://www.w3.org/TR/xml/#sec-notation\nconst jsonQueryGrammar = `\nroot ::= ("#" recursion | recursion | (query | pattern) recursion* | "#" SEP? | SEP)\nrecursion ::= (SEP query | pattern)*\n\nquery ::= (ESC escaped ESC | property | all | any | regex) typecheck? lookahead?\nproperty ::= ${propertyRegex}\nregex ::= "{" [^}]+ "}"\nSEP ::= "/"\nall ::= "**"\nany ::= "*"\n\ntypecheck ::= "?:" ("value" | "boolean" | "string" | "number" | "object" | "array")\nlookahead ::= "?" expression ((andExpr | orExpr) expression)*\nandExpr ::= S? "&&" S?\norExpr ::= S? "||" S?\n\nexpression ::= (exprProperty | ESC escaped ESC) ((isnot | is) (exprProperty | regex | ESC escaped ESC))*\nexprProperty ::= [a-zA-Z0-9-_ $]+\nescaped ::= [^"]+\nis ::= ":"\nisnot ::= ":!"\nESC ::= \'"\'\n\npattern ::= S? "(" (SEP query | pattern (orPattern? pattern)*)* ")" quantifier? S? lookahead?\nquantifier ::= "+" | "*" | [0-9]+\norPattern ::= S? "," S?\n\nS ::= [ ]*\n`;\n\n;// ./node_modules/@sagold/json-query/dist/module/lib/parser/index.js\n\n\nconst valid = /(children|text|type|start|end|rest|errors|fullText|\\d+)/;\nconst subset = /(children|text|type|\\d+)/;\nconst toJSON = (ast) => JSON.stringify(ast, (key, value) => (key === "" || valid.test(key) ? value : undefined), 2);\nconst toSmallJSON = (ast) => JSON.stringify(ast, (key, value) => key === "" || (key === "rest" && value !== "") || subset.test(key)\n    ? value\n    : undefined, 2);\nconst parser = new W3CEBNF/* default */.A.Parser(jsonQueryGrammar);\nconst parse = (query) => parser.getAST(query);\nconst reduce = (ast) => JSON.parse(toSmallJSON(ast));\n\n\n;// ./node_modules/@sagold/json-query/dist/module/lib/interpreter/keys.js\nconst VALUE_INDEX = 0;\nconst KEY_INDEX = 1;\nconst PARENT_INDEX = 2;\nconst POINTER_INDEX = 3;\n\n;// ./node_modules/@sagold/json-query/dist/module/lib/interpreter/nodes.js\nconst join = (a, b) => `${a}/${b}`;\n\nconst nodes_toString = Object.prototype.toString;\nconst rContainer = /Object|Array/;\nconst isContainer = (v) => rContainer.test(nodes_toString.call(v));\nconst nodes_getTypeOf = (v) => nodes_toString\n    .call(v)\n    .match(/\\s([^\\]]+)\\]/)\n    .pop()\n    .toLowerCase();\nfunction nodeAsRegex(node) {\n    return new RegExp(node.text.replace(/(^{|}$)/g, ""));\n}\n/**\n * Iterates over object or array, passing each key, value and parentObject to the callback\n * @param value - to iterate\n * @param callback - receiving key on given input value\n */\nfunction forEach(parent, callback) {\n    if (Array.isArray(parent)) {\n        parent.forEach(callback);\n    }\n    else if (Object.prototype.toString.call(parent) === "[object Object]") {\n        Object.keys(parent).forEach(function (key) {\n            callback(parent[key], key, parent);\n        });\n    }\n}\n/**\n * Returns all keys of the given input data\n * @param  value\n * @return {Array} containing keys of given value\n */\nfunction getKeys(value) {\n    if (Array.isArray(value)) {\n        return value.map(function (value, index) {\n            return `${index}`;\n        });\n    }\n    if (Object.prototype.toString.call(value) === "[object Object]") {\n        return Object.keys(value);\n    }\n    return [];\n}\nconst cache = {\n    mem: [],\n    get(entry, prop) {\n        const v = entry[VALUE_INDEX][prop];\n        if (cache.mem.includes(v)) {\n            return undefined;\n        }\n        if (isContainer(v)) {\n            cache.mem.push(v);\n        }\n        return [v, prop, entry[VALUE_INDEX], join(entry[POINTER_INDEX], prop)];\n    },\n    reset() {\n        cache.mem.length = 0;\n    },\n};\nconst expand = {\n    any(node, entry) {\n        const value = entry[VALUE_INDEX];\n        return (getKeys(value)\n            // .map(prop => cache.get(entry, prop));\n            .map((prop) => [\n            value[prop],\n            prop,\n            value,\n            join(entry[POINTER_INDEX], prop),\n        ]));\n    },\n    all(node, entry) {\n        const result = [entry];\n        forEach(entry[VALUE_INDEX], (value, prop) => {\n            const childEntry = cache.get(entry, prop);\n            // const childEntry = [value, prop, entry[VALUE_INDEX], join(entry[POINTER_INDEX], prop)];\n            childEntry && result.push(...expand.all(node, childEntry));\n        });\n        return result;\n    },\n    regex(node, entry) {\n        const regex = nodeAsRegex(node);\n        const value = entry[VALUE_INDEX];\n        return getKeys(value)\n            .filter((prop) => regex.test(prop))\n            .map((prop) => [\n            value[prop],\n            prop,\n            value,\n            join(entry[POINTER_INDEX], prop),\n        ]);\n    },\n};\nconst nodes_select = {\n    // alias to property (but escaped)\n    escaped: (node, entry) => nodes_select.property(node, entry),\n    property: (node, entry) => {\n        const prop = node.text;\n        if (entry[VALUE_INDEX] && entry[VALUE_INDEX][prop] !== undefined) {\n            return [\n                entry[VALUE_INDEX][prop],\n                prop,\n                entry[VALUE_INDEX],\n                join(entry[POINTER_INDEX], prop),\n            ];\n        }\n    },\n    typecheck: (node, entry) => {\n        const checkedTyped = node.text.replace(/^\\?:/, "");\n        if (checkedTyped === "value") {\n            return isContainer(entry[VALUE_INDEX]) ? undefined : entry;\n        }\n        const type = nodes_getTypeOf(entry[VALUE_INDEX]);\n        if (type === checkedTyped) {\n            return entry;\n        }\n    },\n    lookahead: (node, entry) => {\n        let valid = true;\n        let or = false;\n        node.children.forEach((expr) => {\n            if (expr.type === "expression") {\n                const isValid = nodes_select.expression(expr, entry) !== undefined;\n                valid = or === true ? valid || isValid : valid && isValid;\n            }\n            else {\n                or = expr.type === "orExpr";\n            }\n        });\n        return valid ? entry : undefined;\n    },\n    expression: (node, entry) => {\n        const prop = node.children[0].text;\n        const cmp = node.children[1];\n        const test = node.children[2];\n        const value = entry[VALUE_INDEX];\n        if (isContainer(value) === false) {\n            return undefined;\n        }\n        return expressionMatches(value[prop], cmp, test) ? entry : undefined;\n    },\n};\nfunction expressionMatches(value, cmp, test) {\n    if (cmp === undefined) {\n        return value !== undefined;\n    }\n    let valid;\n    const valueString = `${value}`;\n    if (test.type === "regex") {\n        const regex = nodeAsRegex(test);\n        valid = regex.test(valueString);\n    }\n    else {\n        valid = valueString === test.text;\n    }\n    if (cmp.type === "isnot") {\n        valid = valid === false && value !== undefined;\n    }\n    return valid;\n}\n\n\n;// ./node_modules/@sagold/json-query/dist/module/lib/interpreter/index.js\n\n\nfunction collect(func, input, node, pointer) {\n    const result = [];\n    for (let i = 0, l = input.length; i < l; i += 1) {\n        result.push(...func(node, input[i], node, pointer));\n    }\n    return result;\n}\nfunction interpreter_reduce(func, input, node, pointer) {\n    const result = [];\n    for (let i = 0, l = input.length; i < l; i += 1) {\n        const output = func(node, input[i], pointer);\n        if (output) {\n            result.push(output);\n        }\n    }\n    return result;\n}\nfunction query(data, ast, pointer) {\n    let result = data;\n    ast.children.forEach((node) => {\n        if (expand[node.type]) {\n            result = collect(expand[node.type], result, node, pointer);\n        }\n        else if (nodes_select[node.type]) {\n            result = interpreter_reduce(nodes_select[node.type], result, node, pointer);\n        }\n        else {\n            throw new Error(`Unknown filter ${node.type}`);\n        }\n    });\n    return result;\n}\nfunction runPatternOnce(inputSet, ast, pointer) {\n    const resultingSet = [];\n    let workingSet = inputSet;\n    ast.children.forEach((node) => {\n        if (node.type === "orPattern") {\n            resultingSet.push(...workingSet);\n            workingSet = inputSet;\n            return;\n        }\n        workingSet = runNode(workingSet, node, pointer);\n    });\n    resultingSet.push(...workingSet);\n    return resultingSet;\n}\nfunction getIterationCount(quantifier) {\n    if (quantifier == null) {\n        return 1; // default, simple group\n    }\n    if (quantifier === "*" || quantifier === "+") {\n        return Infinity;\n    }\n    const count = parseInt(quantifier);\n    return isNaN(count) ? 1 : count;\n}\nfunction pattern(data, ast, pointer) {\n    const result = [];\n    const quantifier = ast.children.find((node) => node.type === "quantifier");\n    const iterationCount = getIterationCount(quantifier && quantifier.text);\n    let workingSet = data;\n    if (quantifier && quantifier.text === "*") {\n        result.push(...workingSet);\n    }\n    let count = 0;\n    while (workingSet.length > 0 && count < iterationCount) {\n        workingSet = runPatternOnce(workingSet, ast, pointer);\n        result.push(...workingSet);\n        count += 1;\n    }\n    return result;\n}\nfunction skip(data, ast, pointer) {\n    let result = data;\n    ast.children.forEach((n) => (result = runNode(result, n, pointer)));\n    return result;\n}\nfunction runNode(data, ast, pointer) {\n    let result;\n    if (ast.type === "query") {\n        result = query(data, ast, pointer);\n    }\n    else if (ast.type === "pattern") {\n        result = pattern(data, ast, pointer);\n    }\n    else {\n        result = skip(data, ast, pointer);\n    }\n    // after each query or pattern, reset the cache, to (re)enable nested queries\n    cache.reset();\n    cache.mem.push(data);\n    return result;\n}\nfunction run(data, ast) {\n    cache.reset();\n    cache.mem.push(data);\n    return runNode([[data, null, null, "#"]], ast);\n}\n\n\n;// ./node_modules/@sagold/json-query/dist/module/lib/get.js\n\n\nconst returnTypes = {\n    value: (r) => r.map((e) => e[VALUE_INDEX]),\n    pointer: (r) => r.map((e) => e[POINTER_INDEX]),\n    all: (r) => r,\n    map: (r) => {\n        const map = {};\n        r.forEach((e) => (map[e[POINTER_INDEX]] = e[VALUE_INDEX]));\n        return map;\n    },\n};\nvar ReturnType;\n(function (ReturnType) {\n    ReturnType["POINTER"] = "pointer";\n    ReturnType["VALUE"] = "value";\n    ReturnType["ALL"] = "all";\n    ReturnType["MAP"] = "map";\n})(ReturnType || (ReturnType = {}));\n// export return types on function\nget.POINTER = ReturnType.POINTER;\nget.VALUE = ReturnType.VALUE;\nget.ALL = ReturnType.ALL;\nget.MAP = ReturnType.MAP;\n/**\n * Runs query on input data and returns the results\n * @param data - input data\n * @param queryString - json-query string\n * @param returnType - result format or a custom callback\n */\nfunction get(data, queryString, returnType = ReturnType.VALUE) {\n    if (queryString == null) {\n        return [];\n    }\n    queryString = queryString.replace(/(\\/$)/g, "");\n    if (queryString === "") {\n        queryString = "#";\n    }\n    const ast = parse(queryString);\n    if (ast == null) {\n        throw new Error(`empty ast for \'${queryString}\'`);\n    }\n    if (ast.rest !== "") {\n        throw new Error(`Failed parsing queryString from: \'${ast.rest}\'`);\n    }\n    const result = run(data, ast);\n    if (typeof returnType === "function") {\n        return result.map((r) => returnType(...r));\n    }\n    else if (returnTypes[returnType]) {\n        return returnTypes[returnType](result);\n    }\n    return result;\n}\n\n;// ./node_modules/@sagold/json-query/dist/module/lib/split.js\n\nconst split_skip = ["root", "recursion"];\nfunction buildPath(node, path = []) {\n    if (split_skip.includes(node.type)) {\n        node.children.forEach((n) => buildPath(n, path));\n        return path;\n    }\n    // remove escaped property quotes?\n    path.push(node.text);\n    return path;\n}\n/**\n * Returns queryString as a list of property-queries\n */\nfunction split(queryString) {\n    if (queryString == null || queryString === "") {\n        return [];\n    }\n    const ast = parse(queryString);\n    // console.log(toJSON(ast, null, 2));\n    return buildPath(ast);\n}\n\n;// ./node_modules/@sagold/json-query/dist/module/lib/set.js\n\n\n\nconst cp = (v) => JSON.parse(JSON.stringify(v));\nconst set_toString = Object.prototype.toString;\nconst getType = (v) => set_toString\n    .call(v)\n    .match(/\\s([^\\]]+)\\]/)\n    .pop()\n    .toLowerCase();\nconst isProperty = new RegExp(`^("[^"]+"|${propertyRegex})$`);\nconst ignoreTypes = ["string", "number", "boolean", "null"];\nconst set_isArray = /^\\[\\d*\\]$/;\nconst arrayHasIndex = /^\\[(\\d+)\\]$/;\nconst isEscaped = /^".+"$/;\nconst isArrayProp = /(^\\[\\d*\\]$|^\\d+$)/;\nfunction convertToIndex(index) {\n    return parseInt(index.replace(/^(\\[|\\]$)/, ""));\n}\nfunction removeEscape(property) {\n    return isEscaped.test(property)\n        ? property.replace(/(^"|"$)/g, "")\n        : property;\n}\nfunction insert(array, index, value) {\n    if (array.length <= index) {\n        array[index] = value;\n    }\n    else {\n        array.splice(index, 0, value);\n    }\n}\nfunction set_select(workingSet, query) {\n    const nextSet = [];\n    workingSet.forEach((d) => nextSet.push(...get(d[0], query, ReturnType.ALL)));\n    return nextSet;\n}\nfunction addToArray(result, index, value, force) {\n    const target = result[0];\n    // append item?\n    if (/^\\[\\]$/.test(index)) {\n        target.push(value);\n        const i = target.length - 1;\n        return [target[i], i, target, `${result[3]}/${i}}`];\n    }\n    // merge array item?\n    if (force == null &&\n        getType(target[index]) === "object" &&\n        getType(value) === "object") {\n        Object.assign(target[index], value);\n        return [target[index], index, target, `${result[3]}/${index}}`];\n    }\n    if (force === set.INSERT_ITEMS ||\n        (force == null && arrayHasIndex.test(index))) {\n        const arrayIndex = convertToIndex(index);\n        insert(target, arrayIndex, value);\n        return [\n            target[arrayIndex],\n            arrayIndex,\n            target,\n            `${result[3]}/${arrayIndex}}`,\n        ];\n    }\n    if (force === set.REPLACE_ITEMS || force == null) {\n        const arrayIndex = convertToIndex(index);\n        target[arrayIndex] = value;\n        return [\n            target[arrayIndex],\n            arrayIndex,\n            target,\n            `${result[3]}/${arrayIndex}}`,\n        ];\n    }\n    throw new Error(`Unknown array index \'${index}\' with force-option \'${force}\'`);\n}\nfunction set_create(workingSet, query, keyIsArray, force) {\n    query = removeEscape(query);\n    return workingSet\n        .filter((o) => {\n        // replacing or inserting array\n        if (Array.isArray(o[0]) && isArrayProp.test(query)) {\n            return true;\n        }\n        return ignoreTypes.includes(getType(o[0][query])) === false;\n    })\n        .map((r) => {\n        const container = keyIsArray ? [] : {};\n        const o = r[0];\n        const containerType = getType(container);\n        const itemType = getType(o[query]);\n        if (Array.isArray(o) && itemType !== containerType) {\n            return addToArray(r, query, container, force);\n        }\n        o[query] = o[query] || container;\n        return [o[query], query, o, `${r[3]}/${query}`];\n    });\n}\nvar InsertMode;\n(function (InsertMode) {\n    InsertMode["REPLACE_ITEMS"] = "replace";\n    InsertMode["INSERT_ITEMS"] = "insert";\n})(InsertMode || (InsertMode = {}));\n// for all array-indices within path, replace the values, ignoring insertion syntax /[1]/\nset.REPLACE_ITEMS = InsertMode.REPLACE_ITEMS;\n// for all array-indices within path, insert the values, ignoring replace syntax /1/\nset.INSERT_ITEMS = InsertMode.INSERT_ITEMS;\n// set.MERGE_ITEMS = "merge";\n/**\n * Runs query on input data and assigns a value to query-results.\n * @param data - input data\n * @param queryString - json-query string\n * @param value - value to assign\n * @param [force] - whether to replace or insert into arrays\n */\nfunction set(data, queryString, value, force) {\n    if (queryString == null) {\n        return cp(data);\n    }\n    queryString = queryString.replace(/(\\/$)/g, "");\n    if (queryString === "") {\n        return cp(value);\n    }\n    const result = cp(data);\n    let workingSet = [[result, null, null, "#"]];\n    const path = split(queryString);\n    const property = path.pop();\n    const arrayWithoutIndex = set_isArray.test(property) && arrayHasIndex.test(property) === false;\n    if (isProperty.test(property) === false || arrayWithoutIndex) {\n        throw new Error(`Unsupported query \'${queryString}\' ending with non-property`);\n    }\n    path.forEach((query, index) => {\n        if ("__proto__" === query ||\n            "prototyped" === query ||\n            "constructor" === query) {\n            return;\n        }\n        if (isProperty.test(query) === false) {\n            workingSet = set_select(workingSet, query);\n            return;\n        }\n        // process property & missing data-structure\n        const nextKey = index >= path.length - 1 ? property : path[index + 1];\n        const insertArray = isArrayProp.test(nextKey);\n        workingSet = set_create(workingSet, query, insertArray, force);\n    });\n    workingSet.forEach((r) => {\n        let targetValue = value;\n        if (getType(value) === "function") {\n            targetValue = value(r[3], property, r[0], `${r[3]}/${property}`);\n        }\n        const d = r[0];\n        if (Array.isArray(d)) {\n            addToArray(r, property, targetValue, force);\n        }\n        else {\n            const unescapedProp = removeEscape(property);\n            if ("__proto__" === unescapedProp ||\n                "prototyped" === unescapedProp ||\n                "constructor" === unescapedProp) {\n                return;\n            }\n            d[unescapedProp] = targetValue;\n        }\n    });\n    return result;\n}\n\n;// ./node_modules/@sagold/json-query/dist/module/lib/remove.js\n\n\n\n/**\n * Runs query on input data and removes matching properties from results\n * @param data - input data\n * @param queryString - json-query string\n * @param [returnRemoved] - if true, will returned removed properties, else input-data is removed\n */\nfunction remove(data, queryString, returnRemoved = false) {\n    const removed = [];\n    const matches = get(data, queryString, ReturnType.ALL);\n    matches.forEach(function (match) {\n        removed.push(match[0]);\n        (0,jsonPointer.remove)(data, match[POINTER_INDEX], true);\n    });\n    matches.forEach(function (match) {\n        if (Array.isArray(match[PARENT_INDEX])) {\n            (0,jsonPointer.removeUndefinedItems)(match[PARENT_INDEX]);\n        }\n    });\n    return returnRemoved ? removed : data;\n}\n\n;// ./node_modules/@sagold/json-query/dist/module/index.js\n\n\n\n\n\n/* harmony default export */ const dist_module = ({ get: get, set: set, split: split, remove: remove, ReturnType: ReturnType });\n\n;// ./node_modules/json-schema-library/dist/module/lib/schema/types.js\nconst Types = {\n    $ref: {\n        type: false\n    },\n    allOf: {\n        type: false,\n        definitions: ["allOf/*"]\n    },\n    anyOf: {\n        type: false,\n        definitions: ["anyOf/*"]\n    },\n    array: {\n        type: true,\n        // ignore additionalItems:TypeDef, when items:TypeDef\n        definitions: [\n            "allOf/*",\n            "anyOf/*",\n            "oneOf/*",\n            "not",\n            "items",\n            "items/*",\n            "additionalItems"\n        ],\n        validationKeywords: ["minItems", "maxItems", "uniqueItems"],\n        keywords: ["items", "additionalItems", "minItems", "maxItems", "uniqueItems"]\n    },\n    boolean: {\n        type: true\n    },\n    enum: {\n        type: false\n    },\n    integer: {\n        type: true,\n        definitions: ["allOf/*", "anyOf/*", "oneOf/*", "not"],\n        validationKeywords: ["minimum", "maximum", "multipleOf"]\n    },\n    not: {\n        type: false,\n        definitions: ["not"]\n    },\n    number: {\n        type: true,\n        definitions: ["allOf/*", "anyOf/*", "oneOf/*", "not"],\n        validationKeywords: ["minimum", "maximum", "multipleOf"]\n    },\n    null: {\n        type: true\n    },\n    object: {\n        type: true,\n        // patternProperties also validate properties\n        // dependencies:(string, TypeDef) extend current TypeDef\n        // additional Properties validate only remaining properties (after properties & pattern)\n        definitions: [\n            "allOf/*",\n            "anyOf/*",\n            "oneOf/*",\n            "not",\n            "properties/*",\n            "additionalProperties",\n            "patternProperties/*",\n            "dependencies/*"\n        ],\n        validationKeywords: ["minProperties", "maxProperties", "required"],\n        keywords: [\n            "properties",\n            "additionalProperties",\n            "patternProperties",\n            "dependencies",\n            "minProperties",\n            "maxProperties",\n            "required"\n        ]\n    },\n    oneOf: {\n        type: false,\n        definitions: ["oneOf/*"]\n    },\n    string: {\n        type: true,\n        definitions: ["allOf/*", "anyOf/*", "oneOf/*", "not"],\n        validationKeywords: ["minLength", "maxLength", "pattern"]\n    }\n};\n/* harmony default export */ const types = (Types);\n\n;// ./node_modules/json-schema-library/dist/module/lib/schema/getTypeId.js\n\n\nconst typeKeywords = Object.keys(types).filter((id) => types[id].type === false);\nconst getTypeId_hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * @throws Error    on multiple matches (invalid schema)\n *\n * Returns the type id of a schema object\n * @param schema\n * @return type id, if found\n */\nfunction getTypeId(schema) {\n    if (isObject(schema) === false) {\n        return undefined;\n    }\n    if (schema.enum) {\n        return "enum";\n    }\n    const type = schema.type;\n    if (Array.isArray(type) || types[type]) {\n        return type;\n    }\n    const ids = typeKeywords.filter((type) => schema[type]);\n    if (ids.length === 1) {\n        return ids[0];\n    }\n    if (ids.length === 0) {\n        // @expensive, guess type object\n        for (let i = 0, l = types.object.keywords.length; i < l; i += 1) {\n            const keyword = types.object.keywords[i];\n            if (getTypeId_hasOwnProperty.call(schema, keyword)) {\n                // eslint-disable-line\n                return "object";\n            }\n        }\n        // @expensive, guess type array\n        for (let i = 0, l = types.array.keywords.length; i < l; i += 1) {\n            const keyword = types.array.keywords[i];\n            if (getTypeId_hasOwnProperty.call(schema, keyword)) {\n                // eslint-disable-line\n                return "array";\n            }\n        }\n        return undefined;\n    }\n    throw new Error(`Mutiple typeIds [${ids.join(", ")}] matched in ${JSON.stringify(schema)}`);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/schema/getTypeDefs.js\n\n\n\n\n\n/**\n * Returns a list of all (direct) type definitions from the given schema\n * @param schema\n * @return list of type definition, given as { pointer, def }\n */\nfunction getTypeDefs(schema) {\n    const defs = [];\n    const id = getTypeId(schema);\n    if (id == null) {\n        return defs;\n    }\n    let type;\n    if (Array.isArray(id)) {\n        // since types can also be declared as a set of types, merge the definitions\n        // maybe this will require a more sophisticated approach\n        type = {};\n        for (let i = 0, l = id.length; i < l; i += 1) {\n            Object.assign(type, types[id[i]]);\n        }\n    }\n    else {\n        type = types[id];\n    }\n    if (type.definitions == null) {\n        return defs;\n    }\n    type.definitions.forEach((query) => {\n        get(schema, query, (value, key, parent, pointer) => {\n            if (isObject(value) && getTypeId(value)) {\n                defs.push({ pointer: jsonPointer_default().join(jsonPointer_default().split(pointer), false), def: value });\n            }\n        });\n    });\n    return defs;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/eachSchema.js\n\n\n\nfunction nextTypeDefs(schema, pointer) {\n    if (this.callback(schema, pointer) === true) {\n        // eslint-disable-line no-invalid-this\n        return; // stop iteration\n    }\n    const defs = getTypeDefs(schema);\n    // eslint-disable-next-line no-invalid-this\n    defs.forEach((next) => this.nextTypeDefs(next.def, jsonPointer_default().join(pointer, next.pointer, false)));\n}\nfunction eachDefinition(walk, schema, pointer, key = "definitions") {\n    const defs = schema[key];\n    Object.keys(defs).forEach((defId) => {\n        if (defs[defId] === false || isObject(defs[defId])) {\n            walk.nextTypeDefs(defs[defId], jsonPointer_default().join(pointer, key, defId, false));\n            return;\n        }\n        // console.log(`Invalid schema in ${pointer}/${key}/${defId}`);\n    });\n}\nfunction eachSchema(schema, callback, pointer = "#") {\n    const walk = { callback, nextTypeDefs };\n    walk.nextTypeDefs(schema, pointer);\n    if (schema.definitions != null) {\n        walk.callback = (defschema, schemaPointer) => {\n            callback(defschema, schemaPointer);\n            if (defschema.definitions != null) {\n                eachDefinition(walk, defschema, schemaPointer);\n            }\n        };\n        eachDefinition(walk, schema, pointer);\n    }\n    if (schema.$defs != null) {\n        walk.callback = (defschema, schemaPointer) => {\n            callback(defschema, schemaPointer);\n            if (defschema.definitions != null) {\n                eachDefinition(walk, defschema, schemaPointer);\n            }\n        };\n        eachDefinition(walk, schema, pointer, "$defs");\n    }\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/compile/joinScope.js\n/* eslint max-statements-per-line: ["error", { "max": 2 }] */\nconst suffixes = /(#|\\/)+$/;\nconst trailingHash = /#$/;\nconst isDomain = /^[^:]+:\\/\\/[^/]+\\//;\nconst trailingFragments = /\\/[^/]*$/;\nconst idAndPointer = /#.*$/;\nfunction joinScope(previous, id) {\n    if (previous == null && id == null) {\n        return "#";\n    }\n    if (id == null) {\n        return previous.replace(trailingHash, "");\n    }\n    if (previous == null) {\n        return id.replace(trailingHash, "");\n    }\n    if (id[0] === "#") {\n        return `${previous.replace(idAndPointer, "")}${id.replace(suffixes, "")}`;\n    }\n    if (isDomain.test(id)) {\n        return id.replace(trailingHash, "");\n    }\n    return `${previous.replace(trailingFragments, "")}/${id.replace(trailingHash, "")}`;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/compile/splitRef.js\nconst splitRef_suffixes = /(#|\\/)+$/g;\nconst emptyValues = ["", null, "#"];\nfunction splitRef($ref) {\n    if (emptyValues.includes($ref)) {\n        return [];\n    }\n    $ref = $ref.replace(splitRef_suffixes, "");\n    if ($ref.indexOf("#") === -1) {\n        return [$ref.replace(splitRef_suffixes, "")];\n    }\n    if ($ref.indexOf("#") === 0) {\n        return [$ref.replace(splitRef_suffixes, "")];\n    }\n    const result = $ref.split("#");\n    result[0] = result[0].replace(splitRef_suffixes, "");\n    result[1] = `#${result[1].replace(splitRef_suffixes, "")}`;\n    return result;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/compile/getRef.js\n\n\n\nconst getRef_suffixes = /(#|\\/)+$/g;\nconst getRef_isObject = (val) => getTypeOf(val) === "object";\n// 1. combined is known\n// 2. base or pointer is known\n// 3. base + pointer is known\nfunction getRef(context, rootSchema, $ref) {\n    if (getRef_isObject($ref)) {\n        $ref = $ref.__ref || $ref.$ref;\n    }\n    if ($ref == null) {\n        return rootSchema;\n    }\n    let schema;\n    // is it a known $ref?\n    const $remote = $ref.replace(getRef_suffixes, "");\n    if (context.remotes[$remote]) {\n        schema = context.remotes[$remote];\n        if (schema && schema.$ref) {\n            return getRef(context, rootSchema, schema.$ref);\n        }\n        return schema;\n    }\n    if (context.ids[$ref]) {\n        schema = (0,jsonPointer.get)(rootSchema, context.ids[$ref]);\n        if (schema && schema.$ref) {\n            return getRef(context, rootSchema, schema.$ref);\n        }\n        return schema;\n    }\n    // is it a ref with host/pointer?\n    const fragments = splitRef($ref);\n    if (fragments.length === 0) {\n        return rootSchema;\n    }\n    if (fragments.length === 1) {\n        $ref = fragments[0];\n        if (context.remotes[$ref]) {\n            schema = context.remotes[$ref];\n            return getRef(context, rootSchema, schema.$ref);\n        }\n        if (context.ids[$ref]) {\n            schema = (0,jsonPointer.get)(rootSchema, context.ids[$ref]);\n            if (schema && schema.$ref) {\n                return getRef(context, rootSchema, schema.$ref);\n            }\n            return schema;\n        }\n    }\n    if (fragments.length === 2) {\n        const base = fragments[0];\n        $ref = fragments[1];\n        if (context.remotes[base]) {\n            if (context.remotes[base].getRef) {\n                return context.remotes[base].getRef($ref);\n            }\n            // console.log("warning: uncompiled remote - context may be wrong", base);\n            return getRef(context, context.remotes[base], $ref);\n        }\n        if (context.ids[base]) {\n            return getRef(context, (0,jsonPointer.get)(rootSchema, context.ids[base]), $ref);\n        }\n    }\n    schema = (0,jsonPointer.get)(rootSchema, context.ids[$ref] || $ref);\n    if (schema && schema.$ref) {\n        return getRef(context, rootSchema, schema.$ref);\n    }\n    return schema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/compile/index.js\n/* eslint max-statements-per-line: ["error", { "max": 2 }] */\n\n\n\n\nconst COMPILED = "__compiled";\nconst COMPILED_REF = "__ref";\nconst GET_REF = "getRef";\nconst GET_ROOT = "getRoot";\nconst compile_suffixes = /(#|\\/)+$/g;\n/**\n * compiles the input root schema for `$ref` resolution and returns it again\n * @attention this modifies input schema but maintains data-structure and thus returns\n * the same object with JSON.stringify\n *\n * for a compiled json-schema you can call getRef on any contained schema (location of type).\n * this resolves a $ref target to a valid schema (for a valid $ref)\n *\n * @param draft\n * @param schemaToCompile - json-schema to compile\n * @param [rootSchema] - compiled root json-schema to use for definitions resolution\n * @param [force] = false - force compile json-schema\n * @return compiled input json-schema\n */\nfunction compileSchema(draft, schemaToCompile, rootSchema = schemaToCompile, force = false) {\n    if (!schemaToCompile || schemaToCompile[COMPILED] !== undefined) {\n        return schemaToCompile;\n    }\n    const context = { ids: {}, remotes: draft.remotes };\n    const rootSchemaAsString = JSON.stringify(schemaToCompile);\n    const compiledSchema = JSON.parse(rootSchemaAsString);\n    // flag this schema as compiled\n    Object.defineProperty(compiledSchema, COMPILED, { enumerable: false, value: true });\n    // add getRef-helper to this object\n    Object.defineProperty(compiledSchema, GET_REF, {\n        enumerable: false,\n        value: getRef.bind(null, context, compiledSchema)\n    });\n    // bail early, when no $refs are defined\n    if (force === false && rootSchemaAsString.includes("$ref") === false) {\n        return compiledSchema;\n    }\n    // compile this schema under rootSchema, making definitions available to $ref-resolution\n    if (schemaToCompile !== rootSchema) {\n        Object.defineProperty(compiledSchema, "definitions", {\n            enumerable: false,\n            value: Object.assign({}, rootSchema.definitions, rootSchema.$defs, schemaToCompile.definitions, schemaToCompile.$defs)\n        });\n    }\n    const scopes = {};\n    const getRoot = () => compiledSchema;\n    eachSchema(compiledSchema, (schema, pointer) => {\n        var _a;\n        if (schema.id) {\n            // if this is a schema being merged on root object, we cannot override\n            // parents locations, but must reuse it\n            if (schema.id.startsWith("http") && /(allOf|anyOf|oneOf)\\/\\d+$/.test(pointer)) {\n                const parentPointer = pointer.replace(/\\/(allOf|anyOf|oneOf)\\/\\d+$/, "");\n                const parentSchema = (0,jsonPointer.get)(compiledSchema, parentPointer);\n                schema.id = (_a = parentSchema.id) !== null && _a !== void 0 ? _a : schema.id;\n            }\n            context.ids[schema.id.replace(compile_suffixes, "")] = pointer;\n        }\n        // build up scopes and add them to $ref-resolution map\n        pointer = `#${pointer}`.replace(/##+/, "#");\n        const previousPointer = pointer.replace(/\\/[^/]+$/, "");\n        const parentPointer = pointer.replace(/\\/[^/]+\\/[^/]+$/, "");\n        const previousScope = scopes[previousPointer] || scopes[parentPointer];\n        const scope = joinScope(previousScope, schema.id);\n        scopes[pointer] = scope;\n        if (context.ids[scope] == null) {\n            context.ids[scope] = pointer;\n        }\n        if (schema.$ref && !schema[COMPILED_REF]) {\n            Object.defineProperty(schema, COMPILED_REF, {\n                enumerable: false,\n                value: joinScope(scope, schema.$ref)\n            });\n            // @todo currently not used:\n            Object.defineProperty(schema, GET_ROOT, { enumerable: false, value: getRoot });\n            // console.log("compiled ref", scope, schema.$ref, "=>", joinScope(scope, schema.$ref));\n        }\n    });\n    // console.log(JSON.stringify(context.ids, null, 2));\n    return compiledSchema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/compileSchema.js\n\n/* harmony default export */ const lib_compileSchema = (compileSchema);\n\n;// ./node_modules/json-schema-library/dist/module/lib/each.js\n\n/**\n * Iterates over data, retrieving its schema\n *\n * @param draft - validator\n * @param data - the data to iterate\n * @param callback - will be called with (schema, data, pointer) on each item\n * @param [schema] - the schema matching the data. Defaults to rootSchema\n * @param [pointer] - pointer to current data. Default to rootPointer\n */\nfunction each(draft, data, callback, schema = draft.rootSchema, pointer = "#") {\n    schema = draft.resolveRef(schema);\n    callback(schema, data, pointer);\n    const dataType = getTypeOf(data);\n    if (dataType === "object") {\n        Object.keys(data).forEach((key) => {\n            const nextSchema = draft.step(key, schema, data, pointer); // not save\n            const next = data[key]; // save\n            draft.each(next, callback, nextSchema, `${pointer}/${key}`);\n        });\n    }\n    else if (dataType === "array") {\n        data.forEach((next, key) => {\n            const nextSchema = draft.step(key, schema, data, pointer);\n            draft.each(next, callback, nextSchema, `${pointer}/${key}`);\n        });\n    }\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/validation/errors.js\n/* eslint no-invalid-this: 0 */\n\nconst errors = {\n    additionalItemsError: createCustomError("AdditionalItemsError"),\n    additionalPropertiesError: createCustomError("AdditionalPropertiesError"),\n    anyOfError: createCustomError("AnyOfError"),\n    allOfError: createCustomError("AllOfError"),\n    constError: createCustomError("ConstError"),\n    containsError: createCustomError("ContainsError"),\n    containsArrayError: createCustomError("ContainsArrayError"),\n    containsAnyError: createCustomError("ContainsAnyError"),\n    enumError: createCustomError("EnumError"),\n    forbiddenPropertyError: createCustomError("ForbiddenPropertyError"),\n    formatURLError: createCustomError("FormatURLError"),\n    formatURIError: createCustomError("FormatURIError"),\n    formatURIReferenceError: createCustomError("FormatURIReferenceError"),\n    formatURITemplateError: createCustomError("FormatURITemplateError"),\n    formatDateError: createCustomError("FormatDateError"),\n    formatDateTimeError: createCustomError("FormatDateTimeError"),\n    formatEmailError: createCustomError("FormatEmailError"),\n    formatHostnameError: createCustomError("FormatHostnameError"),\n    formatIPV4Error: createCustomError("FormatIPV4Error"),\n    formatIPV4LeadingZeroError: createCustomError("FormatIPV4LeadingZeroError"),\n    formatIPV6Error: createCustomError("FormatIPV6Error"),\n    formatIPV6LeadingZeroError: createCustomError("FormatIPV6LeadingZeroError"),\n    formatJsonPointerError: createCustomError("FormatJsonPointerError"),\n    formatRegExError: createCustomError("FormatRegExError"),\n    formatTimeError: createCustomError("FormatTimeError"),\n    invalidSchemaError: createCustomError("InvalidSchemaError"),\n    invalidDataError: createCustomError("InvalidDataError"),\n    invalidTypeError: createCustomError("InvalidTypeError"),\n    invalidPropertyNameError: createCustomError("InvalidPropertyNameError"),\n    maximumError: createCustomError("MaximumError"),\n    maxItemsError: createCustomError("MaxItemsError"),\n    maxLengthError: createCustomError("MaxLengthError"),\n    maxPropertiesError: createCustomError("MaxPropertiesError"),\n    minimumError: createCustomError("MinimumError"),\n    minItemsError: createCustomError("MinItemsError"),\n    minItemsOneError: createCustomError("MinItemsOneError"),\n    minLengthError: createCustomError("MinLengthError"),\n    minLengthOneError: createCustomError("MinLengthOneError"),\n    minPropertiesError: createCustomError("MinPropertiesError"),\n    missingDependencyError: createCustomError("MissingDependencyError"),\n    missingOneOfPropertyError: createCustomError("MissingOneOfPropertyError"),\n    multipleOfError: createCustomError("MultipleOfError"),\n    multipleOneOfError: createCustomError("MultipleOneOfError"),\n    noAdditionalPropertiesError: createCustomError("NoAdditionalPropertiesError"),\n    notError: createCustomError("NotError"),\n    oneOfError: createCustomError("OneOfError"),\n    oneOfPropertyError: createCustomError("OneOfPropertyError"),\n    patternError: createCustomError("PatternError"),\n    patternPropertiesError: createCustomError("PatternPropertiesError"),\n    requiredPropertyError: createCustomError("RequiredPropertyError"),\n    schemaWarning: createCustomError("SchemaWarning"),\n    typeError: createCustomError("TypeError"),\n    undefinedValueError: createCustomError("UndefinedValueError"),\n    uniqueItemsError: createCustomError("UniqueItemsError"),\n    unknownPropertyError: createCustomError("UnknownPropertyError"),\n    valueNotEmptyError: createCustomError("ValueNotEmptyError")\n};\n/* harmony default export */ const validation_errors = (errors);\n\n// EXTERNAL MODULE: ./node_modules/valid-url/index.js\nvar valid_url = __webpack_require__(7853);\nvar valid_url_default = /*#__PURE__*/__webpack_require__.n(valid_url);\n// EXTERNAL MODULE: ./node_modules/smtp-address-parser/dist/lib/index.js\nvar lib = __webpack_require__(8506);\n;// ./node_modules/json-schema-library/dist/module/lib/validation/format.js\n\n\n// referenced\n// https://github.com/cfworker/cfworker/blob/main/packages/json-schema/src/format.ts\n// https://gist.github.com/marcelotmelo/b67f58a08bee6c2468f8\nconst isValidDateTime = new RegExp("^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\\\.[0-9]+)?(([Zz])|([\\\\+|\\\\-]([01][0-9]|2[0-3]):[0-5][0-9]))$");\nconst isValidIPV4 = /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/;\nconst isValidIPV6 = /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))$/i;\nconst isValidHostname = /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/;\nconst matchDate = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/;\n// const matchTime = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d(?::?\\d\\d)?)?$/i;\nconst matchTime = /^(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)?$/i;\nconst DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst isValidJsonPointer = /^(?:\\/(?:[^~/]|~0|~1)*)*$/;\nconst isValidRelativeJsonPointer = /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/;\nconst isValidURIRef = /^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&\'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&\'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&\'"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&\'"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&\'"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&\'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&\'"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&\'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&\'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&\'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\n// uri-template: https://tools.ietf.org/html/rfc6570\nconst isValidURITemplate = /^(?:(?:[^\\x00-\\x20"\'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i;\n// Default Json-Schema formats: date-time, email, hostname, ipv4, ipv6, uri, uriref\nconst formatValidators = {\n    date: (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        // https://github.com/cfworker/cfworker/blob/main/packages/json-schema/src/format.ts\n        // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\n        const matches = value.match(matchDate);\n        if (!matches) {\n            return draft.errors.formatDateTimeError({ value, pointer, schema });\n        }\n        const year = +matches[1];\n        const month = +matches[2];\n        const day = +matches[3];\n        // https://tools.ietf.org/html/rfc3339#appendix-C\n        const isLeapYear = year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n        if (month >= 1 &&\n            month <= 12 &&\n            day >= 1 &&\n            day <= (month == 2 && isLeapYear ? 29 : DAYS[month])) {\n            return undefined;\n        }\n        return draft.errors.formatDateError({ value, pointer, schema });\n    },\n    "date-time": (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (value === "" || isValidDateTime.test(value)) {\n            if (new Date(value).toString() === "Invalid Date") {\n                return draft.errors.formatDateTimeError({ value, pointer, schema });\n            }\n            return undefined;\n        }\n        return draft.errors.formatDateTimeError({ value, pointer, schema });\n    },\n    email: (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        // taken from https://github.com/ExodusMovement/schemasafe/blob/master/src/formats.js\n        if (value[0] === \'"\') {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n        const [name, host, ...rest] = value.split("@");\n        if (!name || !host || rest.length !== 0 || name.length > 64 || host.length > 253) {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n        if (name[0] === "." || name.endsWith(".") || name.includes("..")) {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n        if (!/^[a-z0-9.-]+$/i.test(host) || !/^[a-z0-9.!#$%&\'*+/=?^_`{|}~-]+$/i.test(name)) {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n        if (!host.split(".").every((part) => /^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$/i.test(part))) {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n        return undefined;\n    },\n    /**\n     * @draft 7\n     * [RFC6531] https://json-schema.org/draft-07/json-schema-validation.html#RFC6531\n     */\n    "idn-email": (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        try {\n            (0,lib.parse)(value);\n            return undefined;\n        }\n        catch (e) {\n            return draft.errors.formatEmailError({ value, pointer, schema });\n        }\n    },\n    hostname: (draft, schema, value, pointer) => {\n        if (typeof value !== "string") {\n            return undefined;\n        }\n        if (value === "" || isValidHostname.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatHostnameError({ value, pointer, schema });\n    },\n    ipv4: (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (value && value[0] === "0") {\n            // leading zeroes should be rejected, as they are treated as octals\n            return draft.errors.formatIPV4LeadingZeroError({ value, pointer, schema });\n        }\n        if (value.length <= 15 && isValidIPV4.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatIPV4Error({ value, pointer, schema });\n    },\n    ipv6: (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (value && value[0] === "0") {\n            // leading zeroes should be rejected, as they are treated as octals\n            return draft.errors.formatIPV6LeadingZeroError({ value, pointer, schema });\n        }\n        if (value.length <= 45 && isValidIPV6.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatIPV6Error({ value, pointer, schema });\n    },\n    "json-pointer": (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (isValidJsonPointer.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatJsonPointerError({ value, pointer, schema });\n    },\n    "relative-json-pointer": (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (isValidRelativeJsonPointer.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatJsonPointerError({ value, pointer, schema });\n    },\n    regex: (draft, schema, value, pointer) => {\n        if (typeof value === "string" && /\\\\Z$/.test(value) === false) {\n            try {\n                new RegExp(value);\n                return undefined;\n            }\n            catch (e) { } // eslint-disable-line no-empty\n            return draft.errors.formatRegExError({ value, pointer, schema });\n        }\n        // v7 tests, ignore non-regex values\n        if (typeof value === "object" || typeof value === "number" || Array.isArray(value)) {\n            return undefined;\n        }\n        return draft.errors.formatRegExError({ value, pointer, schema });\n    },\n    // hh:mm:ss.sTZD\n    // https://opis.io/json-schema/2.x/formats.html\n    // regex https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html\n    time: (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        // https://github.com/cfworker/cfworker/blob/main/packages/json-schema/src/format.ts\n        const matches = value.match(matchTime);\n        return matches ? undefined : draft.errors.formatDateTimeError({ value, pointer, schema });\n        // if (!matches) {\n        //     return errors.formatDateTimeError({ value, pointer, schema });\n        // }\n        // const hour = +matches[1];\n        // const minute = +matches[2];\n        // const second = +matches[3];\n        // const timeZone = !!matches[5];\n        // if (\n        //     ((hour <= 23 && minute <= 59 && second <= 59) ||\n        //         (hour == 23 && minute == 59 && second == 60)) &&\n        //     timeZone\n        // ) {\n        //     return undefined;\n        // }\n        // return errors.formatTimeError({ value, pointer, schema });\n    },\n    uri: (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (valid_url_default().isUri(value)) {\n            return undefined;\n        }\n        return draft.errors.formatURIError({ value, pointer, schema });\n    },\n    "uri-reference": (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (isValidURIRef.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatURIReferenceError({ value, pointer, schema });\n    },\n    "uri-template": (draft, schema, value, pointer) => {\n        if (typeof value !== "string" || value === "") {\n            return undefined;\n        }\n        if (isValidURITemplate.test(value)) {\n            return undefined;\n        }\n        return draft.errors.formatURITemplateError({ value, pointer, schema });\n    },\n    url: (draft, schema, value, pointer) => {\n        if (value === "" || valid_url_default().isWebUri(value)) {\n            return undefined;\n        }\n        return draft.errors.formatURLError({ value, pointer, schema });\n    }\n};\n/* harmony default export */ const format = (formatValidators);\n\n;// ./node_modules/json-schema-library/dist/module/lib/getSchema.js\n\n\nconst emptyObject = {};\n/**\n * Returns the json-schema of a data-json-pointer.\n *\n * To resolve dynamic schema where the type of json-schema is evaluated by\n * its value, a data object has to be passed in options.\n *\n * Per default this function will return `undefined` for valid properties that\n * do not have a defined schema. Use the option `withSchemaWarning: true` to\n * receive an error with `code: schema-warning` containing the location of its\n * last evaluated json-schema.\n *\n * Notes\n *      - uses draft.step to walk through data and schema\n *\n * @param draft\n * @param pointer - json pointer in data to get the json schema for\n * @param [options.data] - the data object, which includes the json pointers value. This is optional, as\n *    long as no oneOf, anyOf, etc statement is part of the pointers schema\n * @param [options.schema] - the json schema to iterate. Defaults to draft.rootSchema\n * @param [options.withSchemaWarning] - if true returns an error instead of `undefined` for valid properties missing a schema definition\n * @return resolved json-schema object of requested json-pointer location or json-error\n */\nfunction getSchema(draft, options = emptyObject) {\n    const { pointer = "#", data, schema = draft.rootSchema, withSchemaWarning = false } = options;\n    const path = jsonPointer_default().split(pointer);\n    const result = _getSchema(draft, draft.resolveRef(schema), path, "#", data);\n    if (!withSchemaWarning && (result === null || result === void 0 ? void 0 : result.code) === "schema-warning") {\n        return undefined;\n    }\n    return result;\n}\nfunction _getSchema(draft, schema, path, pointer, data = emptyObject) {\n    if (path.length === 0) {\n        return draft.resolveRef(schema);\n    }\n    const key = path.shift(); // step key\n    schema = draft.step(key, schema, data, pointer); // step schema\n    if (isJsonError(schema)) {\n        return schema;\n    }\n    // @ts-expect-error data\n    data = data[key]; // step data\n    return _getSchema(draft, schema, path, `${pointer}/${key}`, data);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/isEmpty.js\n\nfunction isEmpty(v) {\n    const type = getTypeOf(v);\n    switch (type) {\n        case "string":\n        case "array":\n            // @ts-expect-error tested as array - could use ts type guard\n            return (v === null || v === void 0 ? void 0 : v.length) === 0;\n        case "null":\n        case "undefined":\n            return true;\n        case "object":\n            return Object.keys(v).length === 0;\n        default:\n            return false;\n    }\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/getTemplate.js\n/* eslint quote-props: 0, max-statements-per-line: ["error", { "max": 2 }] */\n\n\n\n\n\n\n\n\n\n\n\nconst defaultOptions = settings.templateDefaultOptions;\nlet getTemplate_cache;\nfunction shouldResolveRef(schema, pointer) {\n    const { $ref } = schema;\n    if ($ref == null) {\n        return true;\n    }\n    const value = getTemplate_cache[pointer] == null || getTemplate_cache[pointer][$ref] == null ? 0 : getTemplate_cache[pointer][$ref];\n    return value < settings.GET_TEMPLATE_RECURSION_LIMIT;\n}\nfunction getTemplate_resolveRef(draft, schema, pointer) {\n    const { $ref } = schema;\n    if ($ref == null) {\n        return schema;\n    }\n    // @todo pointer + ref is redundant?\n    getTemplate_cache[pointer] = getTemplate_cache[pointer] || {};\n    getTemplate_cache[pointer][$ref] = getTemplate_cache[pointer][$ref] || 0;\n    getTemplate_cache[pointer][$ref] += 1;\n    return draft.resolveRef(schema);\n}\nfunction convertValue(type, value) {\n    if (type === "string") {\n        return JSON.stringify(value);\n    }\n    else if (typeof value !== "string") {\n        return null;\n    }\n    try {\n        value = JSON.parse(value);\n        if (typeof value === type) {\n            return value;\n        }\n    }\n    catch (e) { } // eslint-disable-line no-empty\n    return null;\n}\n/**\n * Resolves $ref, allOf and anyOf schema-options, returning a combined json-schema.\n * Also returns a pointer-property on schema, that must be used as current pointer.\n *\n * @param draft\n * @param schema\n * @param data\n * @param pointer\n * @return resolved json-schema or input-schema\n */\nfunction createTemplateSchema(draft, schema, data, pointer) {\n    // invalid schema\n    if (getTypeOf(schema) !== "object") {\n        return Object.assign({ pointer }, schema);\n    }\n    // return if reached recursion limit\n    if (shouldResolveRef(schema, pointer) === false && data == null) {\n        return false;\n    }\n    // resolve $ref and copy schema\n    let templateSchema = copy(getTemplate_resolveRef(draft, schema, pointer));\n    // @feature anyOf\n    if (Array.isArray(schema.anyOf) && schema.anyOf.length > 0) {\n        // test if we may resolve\n        if (shouldResolveRef(schema.anyOf[0], `${pointer}/anyOf/0`)) {\n            const resolvedAnyOf = getTemplate_resolveRef(draft, schema.anyOf[0], `${pointer}/anyOf/0`);\n            templateSchema = merge(templateSchema, resolvedAnyOf);\n            // add pointer return-value, if any\n            templateSchema.pointer = schema.anyOf[0].$ref || templateSchema.pointer;\n        }\n        delete templateSchema.anyOf;\n    }\n    // @feature allOf\n    if (Array.isArray(schema.allOf)) {\n        const mayResolve = schema.allOf\n            .map((allOf, index) => shouldResolveRef(allOf, `${pointer}/allOf/${index}`))\n            .reduceRight((next, before) => next && before, true);\n        if (mayResolve) {\n            const resolvedSchema = mergeAllOfSchema(draft, schema);\n            if (resolvedSchema) {\n                templateSchema = mergeSchema(templateSchema, resolvedSchema);\n            }\n        }\n    }\n    templateSchema.pointer = templateSchema.pointer || schema.$ref || pointer;\n    return templateSchema;\n}\nconst isJsonSchema = (template) => template && typeof template === "object";\n/**\n * Create data object matching the given schema\n *\n * @param draft - json schema draft\n * @param [data] - optional template data\n * @param [schema] - json schema, defaults to rootSchema\n * @return created template data\n */\nfunction getTemplate(draft, data, _schema, pointer, opts) {\n    var _a;\n    if (_schema == null) {\n        throw new Error(`getTemplate: missing schema for data: ${JSON.stringify(data)}`);\n    }\n    if (pointer == null) {\n        throw new Error("Missing pointer");\n    }\n    // resolve $ref references, allOf and first anyOf definitions\n    let schema = createTemplateSchema(draft, _schema, data, pointer);\n    if (!isJsonSchema(schema)) {\n        return undefined;\n    }\n    pointer = schema.pointer;\n    if (schema === null || schema === void 0 ? void 0 : schema.const) {\n        return schema.const;\n    }\n    // @feature oneOf\n    if (Array.isArray(schema.oneOf)) {\n        if (isEmpty(data)) {\n            const type = schema.oneOf[0].type ||\n                schema.type ||\n                (schema.const && typeof schema.const) ||\n                getTypeOf(data);\n            schema = { ...schema.oneOf[0], type };\n        }\n        else {\n            // find correct schema for data\n            const resolvedSchema = resolveOneOfFuzzy(draft, data, schema);\n            if (isJsonError(resolvedSchema)) {\n                if (data != null && opts.removeInvalidData !== true) {\n                    return data;\n                }\n                // override\n                schema = schema.oneOf[0];\n                data = undefined;\n            }\n            else {\n                resolvedSchema.type = (_a = resolvedSchema.type) !== null && _a !== void 0 ? _a : schema.type;\n                schema = resolvedSchema;\n            }\n        }\n    }\n    // @todo Array.isArray(schema.type)\n    // -> hasDefault? return\n    // if not -> pick first types\n    if (!isJsonSchema(schema) || schema.type == null) {\n        return undefined;\n    }\n    const type = Array.isArray(schema.type)\n        ? selectType(schema.type, data, schema.default)\n        : schema.type;\n    // reset invalid type\n    const javascriptTypeOfData = getTypeOf(data);\n    if (data != null &&\n        javascriptTypeOfData !== type &&\n        !(javascriptTypeOfData === "number" && type === "integer")) {\n        data = convertValue(type, data);\n    }\n    if (TYPE[type] == null) {\n        // in case we could not resolve the type\n        // (schema-type could not be resolved and returned an error)\n        if (opts.removeInvalidData) {\n            return undefined;\n        }\n        return data;\n    }\n    const templateData = TYPE[type](draft, schema, data, pointer, opts);\n    return templateData;\n}\nfunction selectType(types, data, defaultValue) {\n    if (data == undefined) {\n        if (defaultValue != null) {\n            const defaultType = getTypeOf(defaultValue);\n            if (types.includes(defaultType)) {\n                return defaultType;\n            }\n        }\n        return types[0];\n    }\n    const dataType = getTypeOf(data);\n    if (types.includes(dataType)) {\n        return dataType;\n    }\n    return types[0];\n}\nconst TYPE = {\n    null: (draft, schema, data) => getDefault(schema, data, null),\n    string: (draft, schema, data) => getDefault(schema, data, ""),\n    number: (draft, schema, data) => getDefault(schema, data, 0),\n    integer: (draft, schema, data) => getDefault(schema, data, 0),\n    boolean: (draft, schema, data) => getDefault(schema, data, false),\n    object: (draft, schema, data, pointer, opts) => {\n        var _a;\n        const template = schema.default === undefined ? {} : schema.default;\n        const d = {}; // do not assign data here, to keep ordering from json-schema\n        const required = (opts.extendDefaults === false && schema.default !== undefined) ? [] : ((_a = schema.required) !== null && _a !== void 0 ? _a : []);\n        if (schema.properties) {\n            Object.keys(schema.properties).forEach((key) => {\n                const value = data == null || data[key] == null ? template[key] : data[key];\n                const isRequired = required.includes(key);\n                // Omit adding a property if it is not required or optional props should be added\n                if (value != null || isRequired || opts.addOptionalProps) {\n                    d[key] = getTemplate(draft, value, schema.properties[key], `${pointer}/properties/${key}`, opts);\n                }\n            });\n        }\n        // @feature dependencies\n        // has to be done after resolving properties so dependency may trigger\n        let dependenciesSchema = resolveDependencies(draft, schema, d);\n        if (dependenciesSchema) {\n            dependenciesSchema = mergeSchema(schema, dependenciesSchema);\n            delete dependenciesSchema.dependencies;\n            const dependencyData = getTemplate(draft, data, dependenciesSchema, `${pointer}/dependencies`, opts);\n            Object.assign(d, dependencyData);\n        }\n        if (data) {\n            if (opts.removeInvalidData === true &&\n                (schema.additionalProperties === false ||\n                    getTypeOf(schema.additionalProperties) === "object")) {\n                if (getTypeOf(schema.additionalProperties) === "object") {\n                    Object.keys(data).forEach((key) => {\n                        if (d[key] == null) {\n                            // merge valid missing data (additionals) to resulting object\n                            if (draft.isValid(data[key], schema.additionalProperties)) {\n                                d[key] = data[key];\n                            }\n                        }\n                    });\n                }\n            }\n            else {\n                // merge any missing data (additionals) to resulting object\n                Object.keys(data).forEach((key) => d[key] == null && (d[key] = data[key]));\n            }\n        }\n        // @feature if-then-else\n        const ifSchema = resolveIfSchema(draft, schema, d);\n        if (ifSchema) {\n            const additionalData = getTemplate(draft, d, { type: "object", ...ifSchema }, pointer, opts);\n            Object.assign(d, additionalData);\n        }\n        // returns object, which is ordered by json-schema\n        return d;\n    },\n    // build array type of items, ignores additionalItems\n    array: (draft, schema, data, pointer, opts) => {\n        var _a, _b;\n        if (schema.items == null) {\n            return data || []; // items are undefined\n        }\n        const template = schema.default === undefined ? [] : schema.default;\n        const d = data || template;\n        const minItems = (opts.extendDefaults === false && schema.default !== undefined) ? 0 : (schema.minItems || 0);\n        // build defined set of items\n        if (Array.isArray(schema.items)) {\n            for (let i = 0, l = Math.max(minItems !== null && minItems !== void 0 ? minItems : 0, (_b = (_a = schema.items) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); i < l; i += 1) {\n                d[i] = getTemplate(draft, d[i] == null ? template[i] : d[i], schema.items[i], `${pointer}/items/${i}`, opts);\n            }\n            return d;\n        }\n        // abort if the schema is invalid\n        if (getTypeOf(schema.items) !== "object") {\n            return d;\n        }\n        // resolve allOf and first anyOf definition\n        const templateSchema = createTemplateSchema(draft, schema.items, data, pointer);\n        if (templateSchema === false) {\n            return d;\n        }\n        pointer = templateSchema.pointer || pointer;\n        // build data for first oneOf-schema\n        if (templateSchema.oneOf && d.length === 0) {\n            const oneOfSchema = templateSchema.oneOf[0];\n            for (let i = 0; i < minItems; i += 1) {\n                d[i] = getTemplate(draft, d[i] == null ? template[i] : d[i], oneOfSchema, `${pointer}/oneOf/0`, opts);\n            }\n            return d;\n        }\n        // complete data selecting correct oneOf-schema\n        if (templateSchema.oneOf && d.length > 0) {\n            const itemCount = Math.max(minItems, d.length);\n            for (let i = 0; i < itemCount; i += 1) {\n                let value = d[i] == null ? template[i] : d[i];\n                let one = resolveOneOfFuzzy(draft, value, templateSchema);\n                if (one == null || isJsonError(one)) {\n                    // schema could not be resolved or data is invalid\n                    if (value != null && opts.removeInvalidData !== true) {\n                        // keep invalid value\n                        d[i] = value;\n                    }\n                    else {\n                        // replace invalid value\n                        value = undefined;\n                        one = templateSchema.oneOf[0];\n                        d[i] = getTemplate(draft, value, one, `${pointer}/oneOf/${i}`, opts);\n                    }\n                }\n                else {\n                    // schema is valid\n                    d[i] = getTemplate(draft, value, one, `${pointer}/oneOf/${i}`, opts);\n                }\n            }\n            return d;\n        }\n        // build data from items-definition\n        if (templateSchema.type) {\n            for (let i = 0, l = Math.max(minItems, d.length); i < l; i += 1) {\n                d[i] = getTemplate(draft, d[i] == null ? template[i] : d[i], templateSchema, `${pointer}/items`, opts);\n            }\n            return d;\n        }\n        return d;\n    }\n};\nfunction getDefault(schema, templateValue, initValue) {\n    if (templateValue != null) {\n        return templateValue;\n    }\n    else if (schema.const) {\n        return schema.const;\n    }\n    else if (schema.default === undefined && Array.isArray(schema.enum)) {\n        return schema.enum[0];\n    }\n    else if (schema.default === undefined) {\n        return initValue;\n    }\n    return schema.default;\n}\n/* harmony default export */ const lib_getTemplate = ((draft, data, schema = draft.rootSchema, opts) => {\n    getTemplate_cache = {};\n    if (opts) {\n        return getTemplate(draft, data, schema, "#", { ...defaultOptions, ...opts });\n    }\n    return getTemplate(draft, data, schema, "#", defaultOptions);\n});\n\n;// ./node_modules/json-schema-library/dist/module/lib/isValid.js\n/**\n * Test if the data is valid according to the given schema\n *\n * @param draft - validator\n * @param value - value to validate\n * @param [schema] - json schema\n * @param [pointer] - json pointer pointing to value\n * @return if schema does match given value\n */\nfunction isValid(draft, value, schema = draft.rootSchema, pointer = "#") {\n    return draft.validate(value, schema, pointer).length === 0;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/punycode.ucs2decode.js\n/* eslint no-bitwise: 0 */\n/**\n * taken from punycode@2.1.0\n *\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param string The Unicode input string (UCS-2).\n * @returns The new array of code points.\n */\nfunction ucs2decode(string) {\n    const output = [];\n    let counter = 0;\n    const length = string.length;\n    while (counter < length) {\n        const value = string.charCodeAt(counter++);\n        if (value >= 0xd800 && value <= 0xdbff && counter < length) {\n            // It\'s a high surrogate, and there is a next character.\n            const extra = string.charCodeAt(counter++);\n            // eslint-disable-next-line eqeqeq\n            if ((extra & 0xfc00) == 0xdc00) {\n                // Low surrogate.\n                output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\n            }\n            else {\n                // It\'s an unmatched surrogate; only append this code unit, in case the\n                // next code unit is the high surrogate of a surrogate pair.\n                output.push(value);\n                counter--;\n            }\n        }\n        else {\n            output.push(value);\n        }\n    }\n    return output;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/utils/getPrecision.js\n/**\n * returns the floating point precision of a decimal number or 0\n */\nfunction getPrecision(value) {\n    const string = `${value}`;\n    const index = string.indexOf(".");\n    return index === -1 ? 0 : string.length - (index + 1);\n}\n\n// EXTERNAL MODULE: ./node_modules/fast-deep-equal/index.js\nvar fast_deep_equal = __webpack_require__(2017);\nvar fast_deep_equal_default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal);\n;// ./node_modules/json-schema-library/dist/module/lib/validation/keyword.js\n\n\n\n\n\n\n\n\n\n\n\nconst keyword_hasOwnProperty = Object.prototype.hasOwnProperty;\nconst hasProperty = (value, property) => !(value[property] === undefined || !keyword_hasOwnProperty.call(value, property));\n// list of validation keywords: http://json-schema.org/latest/json-schema-validation.html#rfc.section.5\nconst KeywordValidation = {\n    additionalProperties: (draft, schema, value, pointer) => {\n        if (schema.additionalProperties === true || schema.additionalProperties == null) {\n            return undefined;\n        }\n        if (getTypeOf(schema.patternProperties) === "object" &&\n            schema.additionalProperties === false) {\n            // this is an arrangement with patternProperties. patternProperties validate before additionalProperties:\n            // https://spacetelescope.github.io/understanding-json-schema/reference/object.html#index-5\n            return undefined;\n        }\n        const errors = [];\n        let receivedProperties = Object.keys(value).filter((prop) => settings.propertyBlacklist.includes(prop) === false);\n        const expectedProperties = Object.keys(schema.properties || {});\n        if (getTypeOf(schema.patternProperties) === "object") {\n            // filter received properties by matching patternProperties\n            const patterns = Object.keys(schema.patternProperties).map((pattern) => new RegExp(pattern));\n            receivedProperties = receivedProperties.filter((prop) => {\n                for (let i = 0; i < patterns.length; i += 1) {\n                    if (patterns[i].test(prop)) {\n                        return false; // remove\n                    }\n                }\n                return true;\n            });\n        }\n        // adds an error for each an unexpected property\n        for (let i = 0, l = receivedProperties.length; i < l; i += 1) {\n            const property = receivedProperties[i];\n            if (expectedProperties.indexOf(property) === -1) {\n                const additionalIsObject = isObject(schema.additionalProperties);\n                // additionalProperties { oneOf: [] }\n                if (additionalIsObject && Array.isArray(schema.additionalProperties.oneOf)) {\n                    const result = draft.resolveOneOf(value[property], schema.additionalProperties, `${pointer}/${property}`);\n                    if (isJsonError(result)) {\n                        errors.push(draft.errors.additionalPropertiesError({\n                            pointer,\n                            schema: schema.additionalProperties,\n                            value,\n                            property: receivedProperties[i],\n                            properties: expectedProperties,\n                            // pass all validation errors\n                            errors: result.data.errors\n                        }));\n                    }\n                    else {\n                        errors.push(...draft.validate(value[property], result, pointer));\n                    }\n                    // additionalProperties {}\n                }\n                else if (additionalIsObject) {\n                    errors.push(...draft.validate(value[property], schema.additionalProperties, `${pointer}/${property}`));\n                }\n                else {\n                    errors.push(draft.errors.noAdditionalPropertiesError({\n                        pointer,\n                        schema,\n                        value,\n                        property: receivedProperties[i],\n                        properties: expectedProperties\n                    }));\n                }\n            }\n        }\n        return errors;\n    },\n    allOf: validateAllOf,\n    anyOf: validateAnyOf,\n    dependencies: validateDependencies,\n    enum: (draft, schema, value, pointer) => {\n        const type = getTypeOf(value);\n        if (type === "object" || type === "array") {\n            const valueStr = JSON.stringify(value);\n            for (let i = 0; i < schema.enum.length; i += 1) {\n                if (JSON.stringify(schema.enum[i]) === valueStr) {\n                    return undefined;\n                }\n            }\n        }\n        else if (schema.enum.includes(value)) {\n            return undefined;\n        }\n        return draft.errors.enumError({ pointer, schema, value, values: schema.enum });\n    },\n    format: (draft, schema, value, pointer) => {\n        if (draft.validateFormat[schema.format]) {\n            const errors = draft.validateFormat[schema.format](draft, schema, value, pointer);\n            return errors;\n        }\n        // fail silently if given format is not defined\n        return undefined;\n    },\n    items: (draft, schema, value, pointer) => {\n        // @draft >= 7 bool schema\n        if (schema.items === false) {\n            if (Array.isArray(value) && value.length === 0) {\n                return undefined;\n            }\n            return draft.errors.invalidDataError({ pointer, value, schema });\n        }\n        const errors = [];\n        for (let i = 0; i < value.length; i += 1) {\n            const itemData = value[i];\n            // @todo reevaluate: incomplete schema is created here\n            const itemSchema = draft.step(i, schema, value, pointer);\n            if (isJsonError(itemSchema)) {\n                return [itemSchema];\n            }\n            const itemErrors = draft.validate(itemData, itemSchema, `${pointer}/${i}`);\n            errors.push(...itemErrors);\n        }\n        return errors;\n    },\n    maximum: (draft, schema, value, pointer) => {\n        if (isNaN(schema.maximum)) {\n            return undefined;\n        }\n        if (schema.maximum && schema.maximum < value) {\n            return draft.errors.maximumError({\n                maximum: schema.maximum,\n                length: value,\n                value,\n                pointer,\n                schema\n            });\n        }\n        if (schema.maximum && schema.exclusiveMaximum === true && schema.maximum === value) {\n            return draft.errors.maximumError({\n                maximum: schema.maximum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    maxItems: (draft, schema, value, pointer) => {\n        if (isNaN(schema.maxItems)) {\n            return undefined;\n        }\n        if (schema.maxItems < value.length) {\n            return draft.errors.maxItemsError({\n                maximum: schema.maxItems,\n                length: value.length,\n                schema,\n                value,\n                pointer\n            });\n        }\n        return undefined;\n    },\n    maxLength: (draft, schema, value, pointer) => {\n        if (isNaN(schema.maxLength)) {\n            return undefined;\n        }\n        const lengthOfString = ucs2decode(value).length;\n        if (schema.maxLength < lengthOfString) {\n            return draft.errors.maxLengthError({\n                maxLength: schema.maxLength,\n                length: lengthOfString,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    maxProperties: (draft, schema, value, pointer) => {\n        const propertyCount = Object.keys(value).length;\n        if (isNaN(schema.maxProperties) === false && schema.maxProperties < propertyCount) {\n            return draft.errors.maxPropertiesError({\n                maxProperties: schema.maxProperties,\n                length: propertyCount,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    minLength: (draft, schema, value, pointer) => {\n        if (isNaN(schema.minLength)) {\n            return undefined;\n        }\n        const lengthOfString = ucs2decode(value).length;\n        if (schema.minLength > lengthOfString) {\n            if (schema.minLength === 1) {\n                return draft.errors.minLengthOneError({\n                    minLength: schema.minLength,\n                    length: lengthOfString,\n                    pointer,\n                    schema,\n                    value\n                });\n            }\n            return draft.errors.minLengthError({\n                minLength: schema.minLength,\n                length: lengthOfString,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    minimum: (draft, schema, value, pointer) => {\n        if (isNaN(schema.minimum)) {\n            return undefined;\n        }\n        if (schema.minimum > value) {\n            return draft.errors.minimumError({\n                minimum: schema.minimum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        if (schema.exclusiveMinimum === true && schema.minimum === value) {\n            return draft.errors.minimumError({\n                minimum: schema.minimum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    minItems: (draft, schema, value, pointer) => {\n        if (isNaN(schema.minItems)) {\n            return undefined;\n        }\n        if (schema.minItems > value.length) {\n            if (schema.minItems === 1) {\n                return draft.errors.minItemsOneError({\n                    minItems: schema.minItems,\n                    length: value.length,\n                    pointer,\n                    schema,\n                    value\n                });\n            }\n            return draft.errors.minItemsError({\n                minItems: schema.minItems,\n                length: value.length,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    minProperties: (draft, schema, value, pointer) => {\n        if (isNaN(schema.minProperties)) {\n            return undefined;\n        }\n        const propertyCount = Object.keys(value).length;\n        if (schema.minProperties > propertyCount) {\n            return draft.errors.minPropertiesError({\n                minProperties: schema.minProperties,\n                length: propertyCount,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    multipleOf: (draft, schema, value, pointer) => {\n        if (isNaN(schema.multipleOf) || typeof value !== "number") {\n            return undefined;\n        }\n        const valuePrecision = getPrecision(value);\n        const multiplePrecision = getPrecision(schema.multipleOf);\n        if (valuePrecision > multiplePrecision) {\n            // value with higher precision then multipleOf-precision can never be multiple\n            return draft.errors.multipleOfError({\n                multipleOf: schema.multipleOf,\n                value,\n                pointer,\n                schema\n            });\n        }\n        const precision = Math.pow(10, multiplePrecision);\n        const val = Math.round(value * precision);\n        const multiple = Math.round(schema.multipleOf * precision);\n        if ((val % multiple) / precision !== 0) {\n            return draft.errors.multipleOfError({\n                multipleOf: schema.multipleOf,\n                value,\n                pointer,\n                schema\n            });\n        }\n        // maybe also check overflow\n        // https://stackoverflow.com/questions/1815367/catch-and-compute-overflow-during-multiplication-of-two-large-integers\n        return undefined;\n    },\n    not: (draft, schema, value, pointer) => {\n        const errors = [];\n        if (draft.validate(value, schema.not, pointer).length === 0) {\n            errors.push(draft.errors.notError({ value, not: schema.not, pointer, schema }));\n        }\n        return errors;\n    },\n    oneOf: validateOneOf,\n    pattern: (draft, schema, value, pointer) => {\n        const pattern = new RegExp(schema.pattern, "u");\n        if (pattern.test(value) === false) {\n            return draft.errors.patternError({\n                pattern: schema.pattern,\n                description: schema.patternExample || schema.pattern,\n                received: value,\n                schema,\n                value,\n                pointer\n            });\n        }\n        return undefined;\n    },\n    patternProperties: (draft, schema, value, pointer) => {\n        const properties = schema.properties || {};\n        const pp = schema.patternProperties;\n        if (getTypeOf(pp) !== "object") {\n            return undefined;\n        }\n        const errors = [];\n        const keys = Object.keys(value);\n        const patterns = Object.keys(pp).map((expr) => ({\n            regex: new RegExp(expr),\n            patternSchema: pp[expr]\n        }));\n        keys.forEach((key) => {\n            let patternFound = false;\n            for (let i = 0, l = patterns.length; i < l; i += 1) {\n                if (patterns[i].regex.test(key)) {\n                    patternFound = true;\n                    const valErrors = draft.validate(value[key], patterns[i].patternSchema, `${pointer}/${key}`);\n                    if (valErrors && valErrors.length > 0) {\n                        errors.push(...valErrors);\n                    }\n                }\n            }\n            if (properties[key]) {\n                return;\n            }\n            if (patternFound === false && schema.additionalProperties === false) {\n                // this is an arrangement with additionalProperties\n                errors.push(draft.errors.patternPropertiesError({\n                    key,\n                    pointer,\n                    schema,\n                    value,\n                    patterns: Object.keys(pp).join(",")\n                }));\n            }\n        });\n        return errors;\n    },\n    properties: (draft, schema, value, pointer) => {\n        const errors = [];\n        const keys = Object.keys(schema.properties || {});\n        for (let i = 0; i < keys.length; i += 1) {\n            const key = keys[i];\n            if (hasProperty(value, key)) {\n                const itemSchema = draft.step(key, schema, value, pointer);\n                const keyErrors = draft.validate(value[key], itemSchema, `${pointer}/${key}`);\n                errors.push(...keyErrors);\n            }\n        }\n        return errors;\n    },\n    // @todo move to separate file: this is custom keyword validation for JsonEditor.properties keyword\n    propertiesRequired: (draft, schema, value, pointer) => {\n        const errors = [];\n        const keys = Object.keys(schema.properties || {});\n        for (let i = 0; i < keys.length; i += 1) {\n            const key = keys[i];\n            if (value[key] === undefined) {\n                errors.push(draft.errors.requiredPropertyError({ key, pointer, schema, value }));\n            }\n            else {\n                const itemSchema = draft.step(key, schema, value, pointer);\n                const keyErrors = draft.validate(value[key], itemSchema, `${pointer}/${key}`);\n                errors.push(...keyErrors);\n            }\n        }\n        return errors;\n    },\n    required: (draft, schema, value, pointer) => {\n        if (Array.isArray(schema.required) === false) {\n            return undefined;\n        }\n        return schema.required.map((property) => {\n            if (!hasProperty(value, property)) {\n                return draft.errors.requiredPropertyError({\n                    key: property,\n                    pointer,\n                    schema,\n                    value\n                });\n            }\n            return undefined;\n        });\n    },\n    // @todo move to separate file: this is custom keyword validation for JsonEditor.required keyword\n    requiredNotEmpty: (draft, schema, value, pointer) => {\n        if (Array.isArray(schema.required) === false) {\n            return undefined;\n        }\n        return schema.required.map((property) => {\n            if (value[property] == null || value[property] === "") {\n                return draft.errors.valueNotEmptyError({\n                    property,\n                    pointer: `${pointer}/${property}`,\n                    schema,\n                    value\n                });\n            }\n            return undefined;\n        });\n    },\n    uniqueItems: (draft, schema, value, pointer) => {\n        if ((Array.isArray(value) && schema.uniqueItems) === false) {\n            return undefined;\n        }\n        const duplicates = [];\n        const errors = [];\n        value.forEach((item, index) => {\n            for (let i = index + 1; i < value.length; i += 1) {\n                if (fast_deep_equal_default()(item, value[i]) && !duplicates.includes(i)) {\n                    errors.push(draft.errors.uniqueItemsError({\n                        pointer: `${pointer}/${i}`,\n                        duplicatePointer: `${pointer}/${index}`,\n                        arrayPointer: pointer,\n                        value: JSON.stringify(item),\n                        schema\n                    }));\n                    duplicates.push(i);\n                }\n            }\n        });\n        return errors;\n    }\n};\n/* harmony default export */ const keyword = (KeywordValidation);\n\n;// ./node_modules/json-schema-library/dist/module/lib/createSchemaOf.js\n\n\n/**\n * Create a simple json schema for the given input data\n * @param  data - data to get json schema for\n */\nfunction createSchemaOf(data) {\n    if (data === undefined) {\n        return undefined;\n    }\n    const schema = {\n        type: getTypeOf(data)\n    };\n    if (schema.type === "object" && isObject(data)) {\n        schema.properties = {};\n        Object.keys(data).forEach((key) => (schema.properties[key] = createSchemaOf(data[key])));\n    }\n    if (schema.type === "array" && Array.isArray(data)) {\n        if (data.length === 1) {\n            schema.items = createSchemaOf(data[0]);\n        }\n        else {\n            schema.items = data.map(createSchemaOf);\n        }\n    }\n    return schema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/step.js\n\n\n\n\nconst stepType = {\n    array: (draft, key, schema, data, pointer) => {\n        const itemValue = data === null || data === void 0 ? void 0 : data[key];\n        const itemsType = getTypeOf(schema.items);\n        if (itemsType === "object") {\n            // @spec: ignore additionalItems, when items is schema-object\n            return (reduceSchema(draft, schema.items, itemValue, `${pointer}/${key}`) ||\n                draft.resolveRef(schema.items));\n        }\n        if (itemsType === "array") {\n            // @draft >= 7 bool schema, items:[true, false]\n            if (schema.items[key] === true) {\n                return createSchemaOf(itemValue);\n            }\n            // @draft >= 7 bool schema, items:[true, false]\n            if (schema.items[key] === false) {\n                return draft.errors.invalidDataError({\n                    key,\n                    value: itemValue,\n                    pointer,\n                    schema\n                });\n            }\n            if (schema.items[key]) {\n                return draft.resolveRef(schema.items[key]);\n            }\n            if (schema.additionalItems === false) {\n                return draft.errors.additionalItemsError({\n                    key,\n                    value: itemValue,\n                    pointer,\n                    schema\n                });\n            }\n            if (schema.additionalItems === true || schema.additionalItems === undefined) {\n                return createSchemaOf(itemValue);\n            }\n            if (getTypeOf(schema.additionalItems) === "object") {\n                return schema.additionalItems;\n            }\n            throw new Error(`Invalid schema ${JSON.stringify(schema, null, 2)} for ${JSON.stringify(data, null, 2)}`);\n        }\n        if (schema.additionalItems !== false && itemValue) {\n            // @todo reevaluate: incomplete schema is created here\n            // @todo support additionalItems: {schema}\n            return createSchemaOf(itemValue);\n        }\n        return new Error(`Invalid array schema for ${key} at ${pointer}`);\n    },\n    object: (draft, key, schema, data, pointer) => {\n        var _a;\n        schema = reduceSchema(draft, schema, data, pointer);\n        // @feature properties\n        const property = (_a = schema === null || schema === void 0 ? void 0 : schema.properties) === null || _a === void 0 ? void 0 : _a[key];\n        if (property !== undefined) {\n            // @todo patternProperties also validate properties\n            // @feature boolean schema\n            if (property === false) {\n                return draft.errors.forbiddenPropertyError({\n                    property: key,\n                    value: data,\n                    pointer,\n                    schema\n                });\n            }\n            else if (property === true) {\n                return createSchemaOf(data === null || data === void 0 ? void 0 : data[key]);\n            }\n            const targetSchema = draft.resolveRef(property);\n            if (isJsonError(targetSchema)) {\n                return targetSchema;\n            }\n            // check if there is a oneOf selection, which must be resolved\n            if (targetSchema && Array.isArray(targetSchema.oneOf)) {\n                // @special case: this is a mix of a schema and optional definitions\n                // we resolve the schema here and add the original schema to `oneOfSchema`\n                return draft.resolveOneOf(data[key], targetSchema, `${pointer}/${key}`);\n            }\n            // resolved schema or error\n            if (targetSchema) {\n                return targetSchema;\n            }\n        }\n        // @feature patternProperties\n        const { patternProperties } = schema;\n        if (getTypeOf(patternProperties) === "object") {\n            // find matching property key\n            let regex;\n            const patterns = Object.keys(patternProperties);\n            for (let i = 0, l = patterns.length; i < l; i += 1) {\n                regex = new RegExp(patterns[i]);\n                if (regex.test(key)) {\n                    return patternProperties[patterns[i]];\n                }\n            }\n        }\n        // @feature additionalProperties\n        const { additionalProperties } = schema;\n        if (getTypeOf(additionalProperties) === "object") {\n            return schema.additionalProperties;\n        }\n        if (data && (additionalProperties === undefined || additionalProperties === true)) {\n            return createSchemaOf(data[key]);\n        }\n        return draft.errors.unknownPropertyError({\n            property: key,\n            value: data,\n            pointer: `${pointer}`,\n            schema\n        });\n    }\n};\n/**\n * Returns the json-schema of the given object property or array item.\n * e.g. it steps by one key into the data\n *\n *  This helper determines the location of the property within the schema (additional properties, oneOf, ...) and\n *  returns the correct schema.\n *\n * @param  draft      - validator\n * @param  key       - property-name or array-index\n * @param  schema    - json schema of current data\n * @param  data      - parent of key\n * @param  [pointer] - pointer to schema and data (parent of key)\n * @return Schema or Error if failed resolving key\n */\nfunction step(draft, key, schema, data, pointer = "#") {\n    var _a;\n    const typeOfData = getTypeOf(data);\n    let schemaType = (_a = schema.type) !== null && _a !== void 0 ? _a : typeOfData;\n    // @draft >= 4 ?\n    if (Array.isArray(schemaType)) {\n        if (!schemaType.includes(typeOfData)) {\n            return draft.errors.typeError({\n                value: data,\n                pointer,\n                expected: schema.type,\n                received: typeOfData,\n                schema\n            });\n        }\n        schemaType = typeOfData;\n    }\n    const stepFunction = stepType[schemaType];\n    if (stepFunction) {\n        const schemaResult = stepFunction(draft, `${key}`, schema, data, pointer);\n        if (schemaResult === undefined) {\n            return draft.errors.schemaWarning({\n                pointer,\n                value: data,\n                schema,\n                key\n            });\n        }\n        return schemaResult;\n    }\n    return new Error(`Unsupported schema type ${schema.type} for key ${key}`);\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/getChildSchemaSelection.js\n\n/**\n * Returns a list of possible child-schemas for the given property key. In case of a oneOf selection, multiple schemas\n * could be added at the given property (e.g. item-index), thus an array of options is returned. In all other cases\n * a list with a single item will be returned\n *\n * @param draft        - draft to use\n * @param property    - parent schema of following property\n * @param [schema]    - parent schema of following property\n * @return\n */\nfunction getChildSchemaSelection(draft, property, schema = draft.rootSchema) {\n    var _a;\n    if (schema.oneOf) {\n        return schema.oneOf.map((item) => draft.resolveRef(item));\n    }\n    if ((_a = schema.items) === null || _a === void 0 ? void 0 : _a.oneOf) {\n        return schema.items.oneOf.map((item) => draft.resolveRef(item));\n    }\n    const result = draft.step(property, schema, {}, "#");\n    if (isJsonError(result)) {\n        return result;\n    }\n    return [result];\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/validation/type.js\n/**\n * @todo: type is also a keyword, as is properties, items, etc\n *\n * An instance has one of six primitive types (http://json-schema.org/latest/json-schema-draft.html#rfc.section.4.2)\n * or seven in case of ajv https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#type\n * 1 null, 2 boolean, 3 object, 4 array, 5 number, 6 string (7 integer)\n */\nconst typeValidators = {\n    array: (draft, schema, value, pointer) => draft.typeKeywords.array\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    object: (draft, schema, value, pointer) => draft.typeKeywords.object\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    string: (draft, schema, value, pointer) => draft.typeKeywords.string\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    integer: (draft, schema, value, pointer) => draft.typeKeywords.number\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    number: (draft, schema, value, pointer) => draft.typeKeywords.number\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    boolean: (draft, schema, value, pointer) => draft.typeKeywords.boolean\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    null: (draft, schema, value, pointer) => draft.typeKeywords.null\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer))\n};\n/* harmony default export */ const type = (typeValidators);\n\n;// ./node_modules/json-schema-library/dist/module/lib/validate.js\n\n\n\n\n\nfunction getJsonSchemaType(value, expectedType) {\n    const jsType = getTypeOf(value);\n    if (jsType === "number" &&\n        (expectedType === "integer" ||\n            (Array.isArray(expectedType) && expectedType.includes("integer")))) {\n        return Number.isInteger(value) || isNaN(value) ? "integer" : "number";\n    }\n    return jsType;\n}\n/**\n * Validates data with json schema\n *\n * @param draft - validator\n * @param value - value to validate\n * @param [schema] - json schema, defaults to rootSchema\n * @param [pointer] - json pointer pointing to value (used for error-messages only)\n * @return list of errors or empty\n */\nfunction validate(draft, value, schema = draft.rootSchema, pointer = "#") {\n    schema = draft.resolveRef(schema);\n    // @draft >= 07\n    if (getTypeOf(schema) === "boolean") {\n        if (schema) {\n            return [];\n        }\n        return [draft.errors.invalidDataError({ pointer, schema, value })];\n    }\n    if (isJsonError(schema)) {\n        return [schema];\n    }\n    // @draft >= 6 const\n    if (schema.const !== undefined) {\n        if (fast_deep_equal_default()(schema.const, value)) {\n            return [];\n        }\n        return [draft.errors.constError({ pointer, schema, value, expected: schema.const })];\n    }\n    const receivedType = getJsonSchemaType(value, schema.type);\n    const expectedType = schema.type || receivedType;\n    if (receivedType !== expectedType &&\n        (!Array.isArray(expectedType) || !expectedType.includes(receivedType))) {\n        return [\n            draft.errors.typeError({\n                pointer,\n                schema,\n                value,\n                received: receivedType,\n                expected: expectedType\n            })\n        ];\n    }\n    if (draft.validateType[receivedType] == null) {\n        return [draft.errors.invalidTypeError({ pointer, schema, value, receivedType })];\n    }\n    // get type validation results\n    const errors = flattenArray(draft.validateType[receivedType](draft, schema, value, pointer));\n    return errors.filter(errorOrPromise); // ignore promises here\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft04/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst draft04Config = {\n    typeKeywords: {\n        array: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "items",\n            "maxItems",\n            "minItems",\n            "not",\n            "oneOf",\n            "uniqueItems"\n        ],\n        boolean: ["enum", "not", "allOf", "anyOf", "oneOf"],\n        object: [\n            "additionalProperties",\n            "dependencies",\n            "enum",\n            "format",\n            "minProperties",\n            "maxProperties",\n            "patternProperties",\n            "properties",\n            "required",\n            "not",\n            "oneOf",\n            "allOf",\n            "anyOf"\n        ],\n        string: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "format",\n            "maxLength",\n            "minLength",\n            "not",\n            "oneOf",\n            "pattern"\n        ],\n        number: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "format",\n            "maximum",\n            "minimum",\n            "multipleOf",\n            "not",\n            "oneOf"\n        ],\n        null: ["allOf", "anyOf", "enum", "format", "not", "oneOf"]\n    },\n    validateKeyword: keyword,\n    validateType: type,\n    validateFormat: format,\n    errors: validation_errors,\n    addRemoteSchema: addRemoteSchema,\n    compileSchema: lib_compileSchema,\n    createSchemaOf: createSchemaOf,\n    each: each,\n    eachSchema: eachSchema,\n    getChildSchemaSelection: getChildSchemaSelection,\n    getSchema: getSchema,\n    getTemplate: lib_getTemplate,\n    isValid: isValid,\n    resolveAllOf: resolveAllOf,\n    resolveAnyOf: resolveAnyOf,\n    resolveOneOf: resolveOneOf,\n    resolveRef: resolveRef,\n    step: step,\n    validate: validate,\n    templateDefaultOptions: settings.templateDefaultOptions\n};\nclass Draft04 extends Draft {\n    constructor(schema, config = {}) {\n        super(merge(draft04Config, config), schema);\n    }\n}\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft06/compile/index.js\n\n// import remotes from "../../../remotes";\n\n\n\nconst compile_COMPILED = "__compiled";\nconst compile_COMPILED_REF = "__ref";\nconst compile_GET_REF = "getRef";\nconst compile_GET_ROOT = "getRoot";\nconst draft06_compile_suffixes = /(#|\\/)+$/g;\n/**\n * @draft starting with _draft 06_ keyword `id` has been renamed to `$id`\n *\n * compiles the input root schema for $ref resolution and returns it again\n * @attention this modifies input schema but maintains object-structure\n *\n * for a compiled json-schema you can call getRef on any contained schema (location of type).\n * this resolves a $ref target to a valid schema (for a valid $ref)\n *\n * @param rootSchema root json-schema ($id, defs, ... ) to compile\n * @param [force] = false force compile json-schema\n * @return compiled json-schema\n */\nfunction compile_compileSchema(draft, schemaToCompile, rootSchema = schemaToCompile, force = false) {\n    // @ts-expect-error incomplete JsonSchema type\n    if (schemaToCompile === true || schemaToCompile === false || schemaToCompile === undefined) {\n        return schemaToCompile;\n    }\n    if (schemaToCompile[compile_COMPILED] !== undefined) {\n        return schemaToCompile;\n    } // eslint-disable-line\n    const context = { ids: {}, remotes: draft.remotes };\n    const rootSchemaAsString = JSON.stringify(schemaToCompile);\n    const compiledSchema = JSON.parse(rootSchemaAsString);\n    Object.defineProperty(compiledSchema, compile_COMPILED, { enumerable: false, value: true });\n    Object.defineProperty(compiledSchema, compile_GET_REF, {\n        enumerable: false,\n        value: getRef.bind(null, context, compiledSchema)\n    });\n    // bail early, when no $refs are defined\n    if (force === false && rootSchemaAsString.includes("$ref") === false) {\n        return compiledSchema;\n    }\n    // compile this schema under rootSchema, making definitions available to $ref-resolution\n    if (compiledSchema !== rootSchema) {\n        Object.defineProperty(compiledSchema, "$defs", {\n            enumerable: true,\n            value: Object.assign({}, rootSchema.definitions, rootSchema.$defs, compiledSchema.definitions, compiledSchema.$defs)\n        });\n    }\n    const scopes = {};\n    const getRoot = () => compiledSchema;\n    eachSchema(compiledSchema, (schema, pointer) => {\n        var _a;\n        if (schema.$id) {\n            // if this is a schema being merged on root object, we cannot override\n            // parents locations, but must reuse it\n            if (schema.$id.startsWith("http") && /(allOf|anyOf|oneOf)\\/\\d+$/.test(pointer)) {\n                const parentPointer = pointer.replace(/\\/(allOf|anyOf|oneOf)\\/\\d+$/, "");\n                const parentSchema = (0,jsonPointer.get)(compiledSchema, parentPointer);\n                schema.$id = (_a = parentSchema.$id) !== null && _a !== void 0 ? _a : schema.$id;\n            }\n            context.ids[schema.$id.replace(draft06_compile_suffixes, "")] = pointer;\n        }\n        // build up scopes and add them to $ref-resolution map\n        pointer = `#${pointer}`.replace(/##+/, "#");\n        const previousPointer = pointer.replace(/\\/[^/]+$/, "");\n        const parentPointer = pointer.replace(/\\/[^/]+\\/[^/]+$/, "");\n        const previousScope = scopes[previousPointer] || scopes[parentPointer];\n        const scope = joinScope(previousScope, schema.$id);\n        scopes[pointer] = scope;\n        if (context.ids[scope] == null) {\n            context.ids[scope] = pointer;\n        }\n        if (schema.$ref && !schema[compile_COMPILED_REF]) {\n            Object.defineProperty(schema, compile_COMPILED_REF, {\n                enumerable: false,\n                value: joinScope(scope, schema.$ref)\n            });\n            // @todo currently not used:\n            Object.defineProperty(schema, compile_GET_ROOT, { enumerable: false, value: getRoot });\n            // console.log("compiled ref", scope, schema.$ref, "=>", joinScope(scope, schema.$ref));\n        }\n    });\n    return compiledSchema;\n}\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft06/validation/keyword.js\n\n\n\nconst keyword_KeywordValidation = {\n    ...keyword,\n    // @draft >= 6\n    contains: (draft, schema, value, pointer) => {\n        if (schema.contains === false) {\n            return draft.errors.containsArrayError({ pointer, value, schema });\n        }\n        if (schema.contains === true) {\n            if (Array.isArray(value) && value.length === 0) {\n                return draft.errors.containsAnyError({ pointer, value, schema });\n            }\n            return undefined;\n        }\n        if (getTypeOf(schema.contains) !== "object") {\n            // ignore invalid schema\n            return undefined;\n        }\n        for (let i = 0; i < value.length; i += 1) {\n            if (draft.isValid(value[i], schema.contains)) {\n                return undefined;\n            }\n        }\n        return draft.errors.containsError({ pointer, schema, value });\n    },\n    exclusiveMaximum: (draft, schema, value, pointer) => {\n        if (isNaN(schema.exclusiveMaximum)) {\n            return undefined;\n        }\n        if (schema.exclusiveMaximum <= value) {\n            return draft.errors.maximumError({\n                maximum: schema.exclusiveMaximum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    exclusiveMinimum: (draft, schema, value, pointer) => {\n        if (isNaN(schema.exclusiveMinimum)) {\n            return undefined;\n        }\n        if (schema.exclusiveMinimum >= value) {\n            return draft.errors.minimumError({\n                minimum: schema.exclusiveMinimum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    // @feature if-then-else\n    if: validateIf,\n    maximum: (draft, schema, value, pointer) => {\n        if (isNaN(schema.maximum)) {\n            return undefined;\n        }\n        if (schema.maximum && schema.maximum < value) {\n            return draft.errors.maximumError({\n                maximum: schema.maximum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    minimum: (draft, schema, value, pointer) => {\n        if (isNaN(schema.minimum)) {\n            return undefined;\n        }\n        if (schema.minimum > value) {\n            return draft.errors.minimumError({\n                minimum: schema.minimum,\n                length: value,\n                pointer,\n                schema,\n                value\n            });\n        }\n        return undefined;\n    },\n    patternProperties: (draft, schema, value, pointer) => {\n        const properties = schema.properties || {};\n        const pp = schema.patternProperties;\n        if (getTypeOf(pp) !== "object") {\n            return undefined;\n        }\n        const errors = [];\n        const keys = Object.keys(value);\n        const patterns = Object.keys(pp).map((expr) => ({\n            regex: new RegExp(expr),\n            patternSchema: pp[expr]\n        }));\n        keys.forEach((key) => {\n            let patternFound = false;\n            for (let i = 0, l = patterns.length; i < l; i += 1) {\n                if (patterns[i].regex.test(key)) {\n                    patternFound = true;\n                    // for a boolean schema `false`, always invalidate\n                    if (patterns[i].patternSchema === false) {\n                        errors.push(draft.errors.patternPropertiesError({\n                            key,\n                            pointer,\n                            patterns: Object.keys(pp).join(","),\n                            schema,\n                            value\n                        }));\n                        return;\n                    }\n                    const valErrors = draft.validate(value[key], patterns[i].patternSchema, `${pointer}/${key}`);\n                    if (valErrors && valErrors.length > 0) {\n                        errors.push(...valErrors);\n                    }\n                }\n            }\n            if (properties[key]) {\n                return;\n            }\n            if (patternFound === false && schema.additionalProperties === false) {\n                // this is an arrangement with additionalProperties\n                errors.push(draft.errors.patternPropertiesError({\n                    key,\n                    pointer,\n                    patterns: Object.keys(pp).join(","),\n                    schema,\n                    value\n                }));\n            }\n        });\n        return errors;\n    },\n    // @draft >= 6\n    propertyNames: (draft, schema, value, pointer) => {\n        // bool schema\n        if (schema.propertyNames === false) {\n            // empty objects are valid\n            if (Object.keys(value).length === 0) {\n                return undefined;\n            }\n            return draft.errors.invalidPropertyNameError({\n                property: Object.keys(value),\n                pointer,\n                value,\n                schema\n            });\n        }\n        if (schema.propertyNames === true) {\n            return undefined;\n        }\n        if (getTypeOf(schema.propertyNames) !== "object") {\n            // ignore invalid schema\n            return undefined;\n        }\n        const errors = [];\n        const properties = Object.keys(value);\n        const propertySchema = { ...schema.propertyNames, type: "string" };\n        properties.forEach((prop) => {\n            const validationResult = draft.validate(prop, propertySchema, `${pointer}/${prop}`);\n            if (validationResult.length > 0) {\n                errors.push(draft.errors.invalidPropertyNameError({\n                    property: prop,\n                    pointer,\n                    validationError: validationResult[0],\n                    value: value[prop],\n                    schema\n                }));\n            }\n        });\n        return errors;\n    }\n};\n/* harmony default export */ const validation_keyword = (keyword_KeywordValidation);\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft06/validation/type.js\n/**\n * @todo: type is also a keyword, as is properties, items, etc\n *\n * An instance has one of six primitive types (http://json-schema.org/latest/json-schema-draft.html#rfc.section.4.2)\n * or seven in case of ajv https://github.com/epoberezkin/ajv/blob/master/KEYWORDS.md#type\n * 1 null, 2 boolean, 3 object, 4 array, 5 number, 6 string (7 integer)\n */\nconst validationType = {\n    array: (draft, schema, value, pointer) => draft.typeKeywords.array\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    object: (draft, schema, value, pointer) => draft.typeKeywords.object\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    string: (draft, schema, value, pointer) => draft.typeKeywords.string\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    integer: (draft, schema, value, pointer) => draft.typeKeywords.number\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    number: (draft, schema, value, pointer) => draft.typeKeywords.number\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    boolean: (draft, schema, value, pointer) => draft.typeKeywords.boolean\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer)),\n    null: (draft, schema, value, pointer) => draft.typeKeywords.null\n        .filter((key) => schema && schema[key] != null)\n        .map((key) => draft.validateKeyword[key](draft, schema, value, pointer))\n};\n/* harmony default export */ const validation_type = (validationType);\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft06/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst draft06Config = {\n    typeKeywords: {\n        array: [\n            "allOf",\n            "anyOf",\n            "contains",\n            "enum",\n            "if",\n            "items",\n            "maxItems",\n            "minItems",\n            "not",\n            "oneOf",\n            "uniqueItems"\n        ],\n        boolean: ["allOf", "anyOf", "enum", "not", "oneOf"],\n        object: [\n            "additionalProperties",\n            "allOf",\n            "anyOf",\n            "dependencies",\n            "enum",\n            "format",\n            "if",\n            "maxProperties",\n            "minProperties",\n            "not",\n            "oneOf",\n            "patternProperties",\n            "properties",\n            "propertyNames",\n            "required"\n        ],\n        string: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "format",\n            "if",\n            "maxLength",\n            "minLength",\n            "not",\n            "oneOf",\n            "pattern"\n        ],\n        number: [\n            "enum",\n            "exclusiveMaximum",\n            "exclusiveMinimum",\n            "format",\n            "maximum",\n            "minimum",\n            "multipleOf",\n            "not",\n            "oneOf",\n            "allOf",\n            "anyOf",\n            "if"\n        ],\n        null: ["allOf", "anyOf", "enum", "format", "not", "oneOf"]\n    },\n    validateKeyword: validation_keyword,\n    validateType: validation_type,\n    validateFormat: format,\n    errors: validation_errors,\n    addRemoteSchema: addRemoteSchema,\n    compileSchema: compile_compileSchema,\n    createSchemaOf: createSchemaOf,\n    each: each,\n    eachSchema: eachSchema,\n    getChildSchemaSelection: getChildSchemaSelection,\n    getSchema: getSchema,\n    getTemplate: lib_getTemplate,\n    isValid: isValid,\n    resolveAllOf: resolveAllOf,\n    resolveAnyOf: resolveAnyOf,\n    resolveOneOf: resolveOneOf,\n    resolveRef: resolveRef,\n    step: step,\n    validate: validate,\n    templateDefaultOptions: settings.templateDefaultOptions\n};\nclass Draft06 extends Draft {\n    constructor(schema, config = {}) {\n        super(merge(draft06Config, config), schema);\n    }\n}\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/draft07/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst draft07Config = {\n    typeKeywords: {\n        array: [\n            "allOf",\n            "anyOf",\n            "contains",\n            "enum",\n            "if",\n            "items",\n            "maxItems",\n            "minItems",\n            "not",\n            "oneOf",\n            "uniqueItems"\n        ],\n        boolean: ["allOf", "anyOf", "enum", "not", "oneOf"],\n        object: [\n            "additionalProperties",\n            "allOf",\n            "anyOf",\n            "dependencies",\n            "enum",\n            "format",\n            "if",\n            "maxProperties",\n            "minProperties",\n            "not",\n            "oneOf",\n            "patternProperties",\n            "properties",\n            "propertyNames",\n            "required"\n        ],\n        string: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "format",\n            "if",\n            "maxLength",\n            "minLength",\n            "not",\n            "oneOf",\n            "pattern"\n        ],\n        number: [\n            "allOf",\n            "anyOf",\n            "enum",\n            "exclusiveMaximum",\n            "exclusiveMinimum",\n            "format",\n            "if",\n            "maximum",\n            "minimum",\n            "multipleOf",\n            "not",\n            "oneOf"\n        ],\n        null: ["allOf", "anyOf", "enum", "format", "not", "oneOf"]\n    },\n    validateKeyword: validation_keyword,\n    validateType: validation_type,\n    validateFormat: format,\n    errors: validation_errors,\n    addRemoteSchema: addRemoteSchema,\n    compileSchema: compile_compileSchema,\n    createSchemaOf: createSchemaOf,\n    each: each,\n    eachSchema: eachSchema,\n    getChildSchemaSelection: getChildSchemaSelection,\n    getSchema: getSchema,\n    getTemplate: lib_getTemplate,\n    isValid: isValid,\n    resolveAllOf: resolveAllOf,\n    resolveAnyOf: resolveAnyOf,\n    resolveOneOf: resolveOneOf,\n    resolveRef: resolveRef,\n    step: step,\n    validate: validate,\n    templateDefaultOptions: settings.templateDefaultOptions\n};\nclass Draft07 extends Draft {\n    constructor(schema, config = {}) {\n        super(merge(draft07Config, config), schema);\n    }\n}\n\n\n;// ./node_modules/json-schema-library/dist/module/lib/jsoneditor/index.js\n\n\n\n\n\nconst draftJsonEditorConfig = {\n    ...draft07Config,\n    resolveOneOf: resolveOneOfFuzzy,\n    resolveRef: resolveRefMerge\n};\nclass JsonEditor extends Draft {\n    constructor(schema, config = {}) {\n        super(merge(draftJsonEditorConfig, config), schema);\n    }\n}\n\n\n;// ./node_modules/json-schema-library/dist/module/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst config = { strings: strings };\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6201\n')},6492:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n// https://www.ics.uci.edu/~pattis/ICS-33/lectures/ebnf.pdf\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Parser = exports.findRuleByName = exports.parseRuleName = exports.escapeRegExp = exports.readToken = void 0;\nconst UPPER_SNAKE_RE = /^[A-Z0-9_]+$/;\nconst decorationRE = /(\\?|\\+|\\*)$/;\nconst preDecorationRE = /^(@|&|!)/;\nconst WS_RULE = 'WS';\nconst TokenError_1 = __webpack_require__(1594);\nfunction readToken(txt, expr) {\n    let result = expr.exec(txt);\n    if (result && result.index == 0) {\n        if (result[0].length == 0 && expr.source.length > 0)\n            return null;\n        return {\n            type: null,\n            text: result[0],\n            rest: txt.substr(result[0].length),\n            start: 0,\n            end: result[0].length - 1,\n            fullText: result[0],\n            errors: [],\n            children: [],\n            parent: null\n        };\n    }\n    return null;\n}\nexports.readToken = readToken;\nfunction escapeRegExp(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n}\nexports.escapeRegExp = escapeRegExp;\nfunction fixRest(token) {\n    token.rest = '';\n    token.children && token.children.forEach(c => fixRest(c));\n}\nfunction fixPositions(token, start) {\n    token.start += start;\n    token.end += start;\n    token.children && token.children.forEach(c => fixPositions(c, token.start));\n}\nfunction agregateErrors(errors, token) {\n    if (token.errors && token.errors.length)\n        token.errors.forEach(err => errors.push(err));\n    token.children && token.children.forEach(tok => agregateErrors(errors, tok));\n}\nfunction parseRuleName(name) {\n    let postDecoration = decorationRE.exec(name);\n    let preDecoration = preDecorationRE.exec(name);\n    let postDecorationText = (postDecoration && postDecoration[0]) || '';\n    let preDecorationText = (preDecoration && preDecoration[0]) || '';\n    let out = {\n        raw: name,\n        name: name.replace(decorationRE, '').replace(preDecorationRE, ''),\n        isOptional: postDecorationText == '?' || postDecorationText == '*',\n        allowRepetition: postDecorationText == '+' || postDecorationText == '*',\n        atLeastOne: postDecorationText == '+',\n        lookupPositive: preDecorationText == '&',\n        lookupNegative: preDecorationText == '!',\n        pinned: preDecorationText == '@',\n        lookup: false,\n        isLiteral: false\n    };\n    out.isLiteral = out.name[0] == \"'\" || out.name[0] == '\"';\n    out.lookup = out.lookupNegative || out.lookupPositive;\n    return out;\n}\nexports.parseRuleName = parseRuleName;\nfunction findRuleByName(name, parser) {\n    let parsed = parseRuleName(name);\n    return parser.cachedRules[parsed.name] || null;\n}\nexports.findRuleByName = findRuleByName;\n/// Removes all the nodes starting with 'RULE_'\nfunction stripRules(token, re) {\n    if (token.children) {\n        let localRules = token.children.filter(x => x.type && re.test(x.type));\n        for (let i = 0; i < localRules.length; i++) {\n            let indexOnChildren = token.children.indexOf(localRules[i]);\n            if (indexOnChildren != -1) {\n                token.children.splice(indexOnChildren, 1);\n            }\n        }\n        token.children.forEach(c => stripRules(c, re));\n    }\n}\nconst ignoreMissingRules = ['EOF'];\nclass Parser {\n    constructor(grammarRules, options) {\n        this.grammarRules = grammarRules;\n        this.options = options;\n        this.cachedRules = {};\n        this.debug = options ? options.debug === true : false;\n        let errors = [];\n        let neededRules = [];\n        grammarRules.forEach(rule => {\n            let parsedName = parseRuleName(rule.name);\n            if (parsedName.name in this.cachedRules) {\n                errors.push('Duplicated rule ' + parsedName.name);\n                return;\n            }\n            else {\n                this.cachedRules[parsedName.name] = rule;\n            }\n            if (!rule.bnf || !rule.bnf.length) {\n                let error = 'Missing rule content, rule: ' + rule.name;\n                if (errors.indexOf(error) == -1)\n                    errors.push(error);\n            }\n            else {\n                rule.bnf.forEach(options => {\n                    if (typeof options[0] === 'string') {\n                        let parsed = parseRuleName(options[0]);\n                        if (parsed.name == rule.name) {\n                            let error = 'Left recursion is not allowed, rule: ' + rule.name;\n                            if (errors.indexOf(error) == -1)\n                                errors.push(error);\n                        }\n                    }\n                    options.forEach(option => {\n                        if (typeof option == 'string') {\n                            let name = parseRuleName(option);\n                            if (!name.isLiteral &&\n                                neededRules.indexOf(name.name) == -1 &&\n                                ignoreMissingRules.indexOf(name.name) == -1)\n                                neededRules.push(name.name);\n                        }\n                    });\n                });\n            }\n            if (WS_RULE == rule.name)\n                rule.implicitWs = false;\n            if (rule.implicitWs) {\n                if (neededRules.indexOf(WS_RULE) == -1)\n                    neededRules.push(WS_RULE);\n            }\n            if (rule.recover) {\n                if (neededRules.indexOf(rule.recover) == -1)\n                    neededRules.push(rule.recover);\n            }\n        });\n        neededRules.forEach(ruleName => {\n            if (!(ruleName in this.cachedRules)) {\n                errors.push('Missing rule ' + ruleName);\n            }\n        });\n        if (errors.length)\n            throw new Error(errors.join('\\n'));\n    }\n    getAST(txt, target) {\n        if (!target) {\n            target = this.grammarRules.filter(x => !x.fragment && x.name.indexOf('%') != 0)[0].name;\n        }\n        let result = this.parse(txt, target);\n        if (result) {\n            agregateErrors(result.errors, result);\n            fixPositions(result, 0);\n            // REMOVE ALL THE TAGS MATCHING /^%/\n            stripRules(result, /^%/);\n            if (!this.options || !this.options.keepUpperRules)\n                stripRules(result, UPPER_SNAKE_RE);\n            let rest = result.rest;\n            if (rest) {\n                new TokenError_1.TokenError('Unexpected end of input: \\n' + rest, result);\n            }\n            fixRest(result);\n            result.rest = rest;\n        }\n        return result;\n    }\n    emitSource() {\n        return 'CANNOT EMIT SOURCE FROM BASE Parser';\n    }\n    parse(txt, target, recursion = 0) {\n        let out = null;\n        let type = parseRuleName(target);\n        let expr;\n        let printable = this.debug && /*!isLiteral &*/ !UPPER_SNAKE_RE.test(type.name);\n        printable &&\n            console.log(new Array(recursion).join('\u2502  ') + 'Trying to get ' + target + ' from ' + JSON.stringify(txt.split('\\n')[0]));\n        let realType = type.name;\n        let targetLex = findRuleByName(type.name, this);\n        if (type.name == 'EOF') {\n            if (txt.length) {\n                return null;\n            }\n            else if (txt.length == 0) {\n                return {\n                    type: 'EOF',\n                    text: '',\n                    rest: '',\n                    start: 0,\n                    end: 0,\n                    fullText: '',\n                    errors: [],\n                    children: [],\n                    parent: null\n                };\n            }\n        }\n        try {\n            if (!targetLex && type.isLiteral) {\n                let src = type.name.trim();\n                if (src.startsWith('\"')) {\n                    src = JSON.parse(src);\n                }\n                else if (src.startsWith(\"'\")) {\n                    src = src.replace(/^'(.+)'$/, '$1').replace(/\\\\'/g, \"'\");\n                }\n                if (src === '') {\n                    return {\n                        type: '%%EMPTY%%',\n                        text: '',\n                        rest: txt,\n                        start: 0,\n                        end: 0,\n                        fullText: '',\n                        errors: [],\n                        children: [],\n                        parent: null\n                    };\n                }\n                expr = new RegExp(escapeRegExp(src));\n                realType = null;\n            }\n        }\n        catch (e) {\n            if (e instanceof ReferenceError) {\n                console.error(e);\n            }\n            return null;\n        }\n        if (expr) {\n            let result = readToken(txt, expr);\n            if (result) {\n                result.type = realType;\n                return result;\n            }\n        }\n        else {\n            let options = targetLex.bnf;\n            if (options instanceof Array) {\n                options.forEach(phases => {\n                    if (out)\n                        return;\n                    let pinned = null;\n                    let tmp = {\n                        type: type.name,\n                        text: '',\n                        children: [],\n                        end: 0,\n                        errors: [],\n                        fullText: '',\n                        parent: null,\n                        start: 0,\n                        rest: txt\n                    };\n                    if (targetLex.fragment)\n                        tmp.fragment = true;\n                    let tmpTxt = txt;\n                    let position = 0;\n                    let allOptional = phases.length > 0;\n                    let foundSomething = false;\n                    for (let i = 0; i < phases.length; i++) {\n                        if (typeof phases[i] == 'string') {\n                            let localTarget = parseRuleName(phases[i]);\n                            allOptional = allOptional && localTarget.isOptional;\n                            let got;\n                            let foundAtLeastOne = false;\n                            do {\n                                got = null;\n                                if (targetLex.implicitWs) {\n                                    got = this.parse(tmpTxt, localTarget.name, recursion + 1);\n                                    if (!got) {\n                                        let WS;\n                                        do {\n                                            WS = this.parse(tmpTxt, WS_RULE, recursion + 1);\n                                            if (WS) {\n                                                tmp.text = tmp.text + WS.text;\n                                                tmp.end = tmp.text.length;\n                                                WS.parent = tmp;\n                                                tmp.children.push(WS);\n                                                tmpTxt = tmpTxt.substr(WS.text.length);\n                                                position += WS.text.length;\n                                            }\n                                            else {\n                                                break;\n                                            }\n                                        } while (WS && WS.text.length);\n                                    }\n                                }\n                                got = got || this.parse(tmpTxt, localTarget.name, recursion + 1);\n                                // rule ::= \"true\" ![a-zA-Z]\n                                // negative lookup, if it does not match, we should continue\n                                if (localTarget.lookupNegative) {\n                                    if (got)\n                                        return /* cancel this path */;\n                                    break;\n                                }\n                                if (localTarget.lookupPositive) {\n                                    if (!got)\n                                        return;\n                                }\n                                if (!got) {\n                                    if (localTarget.isOptional)\n                                        break;\n                                    if (localTarget.atLeastOne && foundAtLeastOne)\n                                        break;\n                                }\n                                if (got && targetLex.pinned == i + 1) {\n                                    pinned = got;\n                                    printable && console.log(new Array(recursion + 1).join('\u2502  ') + '\u2514\u2500 ' + got.type + ' PINNED');\n                                }\n                                if (!got)\n                                    got = this.parseRecovery(targetLex, tmpTxt, recursion + 1);\n                                if (!got) {\n                                    if (pinned) {\n                                        out = tmp;\n                                        got = {\n                                            type: 'SyntaxError',\n                                            text: tmpTxt,\n                                            children: [],\n                                            end: tmpTxt.length,\n                                            errors: [],\n                                            fullText: '',\n                                            parent: null,\n                                            start: 0,\n                                            rest: ''\n                                        };\n                                        if (tmpTxt.length) {\n                                            new TokenError_1.TokenError(`Unexpected end of input. Expecting ${localTarget.name} Got: ${tmpTxt}`, got);\n                                        }\n                                        else {\n                                            new TokenError_1.TokenError(`Unexpected end of input. Missing ${localTarget.name}`, got);\n                                        }\n                                        printable &&\n                                            console.log(new Array(recursion + 1).join('\u2502  ') + '\u2514\u2500 ' + got.type + ' ' + JSON.stringify(got.text));\n                                    }\n                                    else {\n                                        return;\n                                    }\n                                }\n                                foundAtLeastOne = true;\n                                foundSomething = true;\n                                if (got.type == '%%EMPTY%%') {\n                                    break;\n                                }\n                                got.start += position;\n                                got.end += position;\n                                if (!localTarget.lookupPositive && got.type) {\n                                    if (got.fragment) {\n                                        got.children &&\n                                            got.children.forEach(x => {\n                                                x.start += position;\n                                                x.end += position;\n                                                x.parent = tmp;\n                                                tmp.children.push(x);\n                                            });\n                                    }\n                                    else {\n                                        got.parent = tmp;\n                                        tmp.children.push(got);\n                                    }\n                                }\n                                if (localTarget.lookup)\n                                    got.lookup = true;\n                                printable &&\n                                    console.log(new Array(recursion + 1).join('\u2502  ') + '\u2514\u2500 ' + got.type + ' ' + JSON.stringify(got.text));\n                                // Eat it from the input stream, only if it is not a lookup\n                                if (!localTarget.lookup && !got.lookup) {\n                                    tmp.text = tmp.text + got.text;\n                                    tmp.end = tmp.text.length;\n                                    tmpTxt = tmpTxt.substr(got.text.length);\n                                    position += got.text.length;\n                                }\n                                tmp.rest = tmpTxt;\n                            } while (got && localTarget.allowRepetition && tmpTxt.length && !got.lookup);\n                        } /* IS A REGEXP */\n                        else {\n                            let got = readToken(tmpTxt, phases[i]);\n                            if (!got) {\n                                return;\n                            }\n                            printable &&\n                                console.log(new Array(recursion + 1).join('\u2502  ') + '\u2514> ' + JSON.stringify(got.text) + phases[i].source);\n                            foundSomething = true;\n                            got.start += position;\n                            got.end += position;\n                            tmp.text = tmp.text + got.text;\n                            tmp.end = tmp.text.length;\n                            tmpTxt = tmpTxt.substr(got.text.length);\n                            position += got.text.length;\n                            tmp.rest = tmpTxt;\n                        }\n                    }\n                    if (foundSomething) {\n                        out = tmp;\n                        printable &&\n                            console.log(new Array(recursion).join('\u2502  ') + '\u251c<\u2500\u2534< PUSHING ' + out.type + ' ' + JSON.stringify(out.text));\n                    }\n                });\n            }\n            if (out && targetLex.simplifyWhenOneChildren && out.children.length == 1) {\n                out = out.children[0];\n            }\n        }\n        if (!out) {\n            printable && console.log(target + ' NOT RESOLVED FROM ' + txt);\n        }\n        return out;\n    }\n    parseRecovery(recoverableToken, tmpTxt, recursion) {\n        if (recoverableToken.recover && tmpTxt.length) {\n            let printable = this.debug;\n            printable &&\n                console.log(new Array(recursion + 1).join('\u2502  ') +\n                    'Trying to recover until token ' +\n                    recoverableToken.recover +\n                    ' from ' +\n                    JSON.stringify(tmpTxt.split('\\n')[0] + tmpTxt.split('\\n')[1]));\n            let tmp = {\n                type: 'SyntaxError',\n                text: '',\n                children: [],\n                end: 0,\n                errors: [],\n                fullText: '',\n                parent: null,\n                start: 0,\n                rest: ''\n            };\n            let got;\n            do {\n                got = this.parse(tmpTxt, recoverableToken.recover, recursion + 1);\n                if (got) {\n                    new TokenError_1.TokenError('Unexpected input: \"' + tmp.text + `\" Expecting: ${recoverableToken.name}`, tmp);\n                    break;\n                }\n                else {\n                    tmp.text = tmp.text + tmpTxt[0];\n                    tmp.end = tmp.text.length;\n                    tmpTxt = tmpTxt.substr(1);\n                }\n            } while (!got && tmpTxt.length > 0);\n            if (tmp.text.length > 0 && got) {\n                printable && console.log(new Array(recursion + 1).join('\u2502  ') + 'Recovered text: ' + JSON.stringify(tmp.text));\n                return tmp;\n            }\n        }\n        return null;\n    }\n}\nexports.Parser = Parser;\nexports[\"default\"] = Parser;\n//# sourceMappingURL=Parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6492\n")},6782:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("var __webpack_unused_export__;\n\n// https://www.w3.org/TR/REC-xml/#NT-Name\n// http://www.bottlecaps.de/rr/ui\n__webpack_unused_export__ = ({ value: true });\n// Grammar\t::=\tProduction*\n// Production\t::=\tNCName '::=' Choice\n// NCName\t::=\t[http://www.w3.org/TR/xml-names/#NT-NCName]\n// Choice\t::=\tSequenceOrDifference ( '|' SequenceOrDifference )*\n// SequenceOrDifference\t::=\t(Item ( '-' Item | Item* ))?\n// Item\t::=\tPrimary ( '?' | '*' | '+' )?\n// Primary\t::=\tNCName | StringLiteral | CharCode | CharClass | '(' Choice ')'\n// StringLiteral\t::=\t'\"' [^\"]* '\"' | \"'\" [^']* \"'\"\n// CharCode\t::=\t'#x' [0-9a-fA-F]+\n// CharClass\t::=\t'[' '^'? ( RULE_Char | CharCode | CharRange | CharCodeRange )+ ']'\n// RULE_Char\t::=\t[http://www.w3.org/TR/xml#NT-RULE_Char]\n// CharRange\t::=\tRULE_Char '-' ( RULE_Char - ']' )\n// CharCodeRange\t::=\tCharCode '-' CharCode\n// RULE_WHITESPACE\t::=\tRULE_S | Comment\n// RULE_S\t::=\t#x9 | #xA | #xD | #x20\n// Comment\t::=\t'/*' ( [^*] | '*'+ [^*/] )* '*'* '*/'\nconst Parser_1 = __webpack_require__(6492);\nvar BNF;\n(function (BNF) {\n    BNF.RULES = [\n        {\n            name: 'Grammar',\n            bnf: [['RULE_S*', '%Atomic*', 'EOF']]\n        },\n        {\n            name: '%Atomic',\n            bnf: [['Production', 'RULE_S*']],\n            fragment: true\n        },\n        {\n            name: 'Production',\n            bnf: [['NCName', 'RULE_S*', '\"::=\"', 'RULE_WHITESPACE*', 'Choice', 'RULE_WHITESPACE*', 'RULE_EOL+', 'RULE_S*']]\n        },\n        {\n            name: 'NCName',\n            bnf: [[/[a-zA-Z][a-zA-Z_0-9]*/]]\n        },\n        {\n            name: 'Choice',\n            bnf: [['SequenceOrDifference', '%_Choice_1*']],\n            fragment: true\n        },\n        {\n            name: '%_Choice_1',\n            bnf: [['RULE_WHITESPACE*', '\"|\"', 'RULE_WHITESPACE*', 'SequenceOrDifference']],\n            fragment: true\n        },\n        {\n            name: 'SequenceOrDifference',\n            bnf: [['Item', 'RULE_WHITESPACE*', '%_Item_1?']]\n        },\n        {\n            name: '%_Item_1',\n            bnf: [['Minus', 'Item'], ['Item*']],\n            fragment: true\n        },\n        {\n            name: 'Minus',\n            bnf: [['\"-\"']]\n        },\n        {\n            name: 'Item',\n            bnf: [['RULE_WHITESPACE*', '%Primary', 'PrimaryDecoration?']],\n            fragment: true\n        },\n        {\n            name: 'PrimaryDecoration',\n            bnf: [['\"?\"'], ['\"*\"'], ['\"+\"']]\n        },\n        {\n            name: 'DecorationName',\n            bnf: [['\"ebnf://\"', /[^\\x5D#]+/]]\n        },\n        {\n            name: '%Primary',\n            bnf: [['NCName'], ['StringLiteral'], ['CharCode'], ['CharClass'], ['SubItem']],\n            fragment: true\n        },\n        {\n            name: 'SubItem',\n            bnf: [['\"(\"', 'RULE_WHITESPACE*', 'Choice', 'RULE_WHITESPACE*', '\")\"']]\n        },\n        {\n            name: 'StringLiteral',\n            bnf: [[`'\"'`, /[^\"]*/, `'\"'`], [`\"'\"`, /[^']*/, `\"'\"`]],\n            pinned: 1\n        },\n        {\n            name: 'CharCode',\n            bnf: [['\"#x\"', /[0-9a-zA-Z]+/]]\n        },\n        {\n            name: 'CharClass',\n            bnf: [[\"'['\", \"'^'?\", '%RULE_CharClass_1+', '\"]\"']]\n        },\n        {\n            name: '%RULE_CharClass_1',\n            bnf: [['CharCodeRange'], ['CharRange'], ['CharCode'], ['RULE_Char']],\n            fragment: true\n        },\n        {\n            name: 'RULE_Char',\n            bnf: [[/\\x09/], [/\\x0A/], [/\\x0D/], [/[\\x20-\\x5c]/], [/[\\x5e-\\uD7FF]/], [/[\\uE000-\\uFFFD]/]]\n        },\n        {\n            name: 'CharRange',\n            bnf: [['RULE_Char', '\"-\"', 'RULE_Char']]\n        },\n        {\n            name: 'CharCodeRange',\n            bnf: [['CharCode', '\"-\"', 'CharCode']]\n        },\n        {\n            name: 'RULE_WHITESPACE',\n            bnf: [['%RULE_WHITESPACE_CHAR*'], ['Comment', 'RULE_WHITESPACE*']]\n        },\n        {\n            name: 'RULE_S',\n            bnf: [['RULE_WHITESPACE', 'RULE_S*'], ['RULE_EOL', 'RULE_S*']]\n        },\n        {\n            name: '%RULE_WHITESPACE_CHAR',\n            bnf: [[/\\x09/], [/\\x20/]],\n            fragment: true\n        },\n        {\n            name: 'Comment',\n            bnf: [['\"/*\"', '%RULE_Comment_Body*', '\"*/\"']]\n        },\n        {\n            name: '%RULE_Comment_Body',\n            bnf: [['!\"*/\"', /[^*]/]],\n            fragment: true\n        },\n        {\n            name: 'RULE_EOL',\n            bnf: [[/\\x0D/, /\\x0A/], [/\\x0A/], [/\\x0D/]]\n        },\n        {\n            name: 'Link',\n            bnf: [[\"'['\", 'Url', \"']'\"]]\n        },\n        {\n            name: 'Url',\n            bnf: [[/[^\\x5D:/?#]/, '\"://\"', /[^\\x5D#]+/, '%Url1?']]\n        },\n        {\n            name: '%Url1',\n            bnf: [['\"#\"', 'NCName']],\n            fragment: true\n        }\n    ];\n    BNF.defaultParser = new Parser_1.Parser(BNF.RULES, { debug: false });\n    const preDecorationRE = /^(!|&)/;\n    const decorationRE = /(\\?|\\+|\\*)$/;\n    const subExpressionRE = /^%/;\n    function getBNFRule(name, parser) {\n        if (typeof name == 'string') {\n            if (preDecorationRE.test(name))\n                return '';\n            let subexpression = subExpressionRE.test(name);\n            if (subexpression) {\n                let decoration = decorationRE.exec(name);\n                let decorationText = decoration ? decoration[0] + ' ' : '';\n                let lonely = isLonelyRule(name, parser);\n                if (lonely)\n                    return getBNFBody(name, parser) + decorationText;\n                return '(' + getBNFBody(name, parser) + ')' + decorationText;\n            }\n            return name;\n        }\n        else {\n            return name.source\n                .replace(/\\\\(?:x|u)([a-zA-Z0-9]+)/g, '#x$1')\n                .replace(/\\[\\\\(?:x|u)([a-zA-Z0-9]+)-\\\\(?:x|u)([a-zA-Z0-9]+)\\]/g, '[#x$1-#x$2]');\n        }\n    }\n    /// Returns true if the rule is a string literal or regular expression without a descendant tree\n    function isLonelyRule(name, parser) {\n        let rule = Parser_1.findRuleByName(name, parser);\n        return (rule &&\n            rule.bnf.length == 1 &&\n            rule.bnf[0].length == 1 &&\n            (rule.bnf[0][0] instanceof RegExp || rule.bnf[0][0][0] == '\"' || rule.bnf[0][0][0] == \"'\"));\n    }\n    function getBNFChoice(rules, parser) {\n        return rules.map(x => getBNFRule(x, parser)).join(' ');\n    }\n    function getBNFBody(name, parser) {\n        let rule = Parser_1.findRuleByName(name, parser);\n        if (rule)\n            return rule.bnf.map(x => getBNFChoice(x, parser)).join(' | ');\n        return 'RULE_NOT_FOUND {' + name + '}';\n    }\n    function emit(parser) {\n        let acumulator = [];\n        parser.grammarRules.forEach(l => {\n            if (!/^%/.test(l.name)) {\n                let recover = l.recover ? ' /* { recoverUntil=' + l.recover + ' } */' : '';\n                acumulator.push(l.name + ' ::= ' + getBNFBody(l.name, parser) + recover);\n            }\n        });\n        return acumulator.join('\\n');\n    }\n    BNF.emit = emit;\n    let subitems = 0;\n    function restar(total, resta) {\n        console.log('reberia restar ' + resta + ' a ' + total);\n        throw new Error('Difference not supported yet');\n    }\n    function convertRegex(txt) {\n        return new RegExp(txt\n            .replace(/#x([a-zA-Z0-9]{4})/g, '\\\\u$1')\n            .replace(/#x([a-zA-Z0-9]{3})/g, '\\\\u0$1')\n            .replace(/#x([a-zA-Z0-9]{2})/g, '\\\\x$1')\n            .replace(/#x([a-zA-Z0-9]{1})/g, '\\\\x0$1'));\n    }\n    function getSubItems(tmpRules, seq, parentName) {\n        let anterior = null;\n        let bnfSeq = [];\n        seq.children.forEach((x, i) => {\n            if (x.type == 'Minus') {\n                restar(anterior, x);\n            }\n            else {\n            }\n            let decoration = seq.children[i + 1];\n            decoration = (decoration && decoration.type == 'PrimaryDecoration' && decoration.text) || '';\n            let preDecoration = '';\n            switch (x.type) {\n                case 'SubItem':\n                    let name = '%' + (parentName + subitems++);\n                    createRule(tmpRules, x, name);\n                    bnfSeq.push(preDecoration + name + decoration);\n                    break;\n                case 'NCName':\n                case 'StringLiteral':\n                    bnfSeq.push(preDecoration + x.text + decoration);\n                    break;\n                case 'CharCode':\n                case 'CharClass':\n                    if (decoration || preDecoration) {\n                        let newRule = {\n                            name: '%' + (parentName + subitems++),\n                            bnf: [[convertRegex(x.text)]]\n                        };\n                        tmpRules.push(newRule);\n                        bnfSeq.push(preDecoration + newRule.name + decoration);\n                    }\n                    else {\n                        bnfSeq.push(convertRegex(x.text));\n                    }\n                    break;\n                case 'PrimaryDecoration':\n                    break;\n                default:\n                    throw new Error(' HOW SHOULD I PARSE THIS? ' + x.type + ' -> ' + JSON.stringify(x.text));\n            }\n            anterior = x;\n        });\n        return bnfSeq;\n    }\n    function createRule(tmpRules, token, name) {\n        let bnf = token.children.filter(x => x.type == 'SequenceOrDifference').map(s => getSubItems(tmpRules, s, name));\n        let rule = {\n            name,\n            bnf\n        };\n        let recover = null;\n        bnf.forEach(x => {\n            recover = recover || x['recover'];\n            delete x['recover'];\n        });\n        if (name.indexOf('%') == 0)\n            rule.fragment = true;\n        if (recover)\n            rule.recover = recover;\n        tmpRules.push(rule);\n    }\n    function getRules(source, parser = BNF.defaultParser) {\n        let ast = parser.getAST(source);\n        if (!ast)\n            throw new Error('Could not parse ' + source);\n        if (ast.errors && ast.errors.length) {\n            throw ast.errors[0];\n        }\n        let tmpRules = [];\n        ast.children.filter(x => x.type == 'Production').map((x) => {\n            let name = x.children.filter(x => x.type == 'NCName')[0].text;\n            createRule(tmpRules, x, name);\n        });\n        return tmpRules;\n    }\n    BNF.getRules = getRules;\n    function Transform(source, subParser = BNF.defaultParser) {\n        return getRules(source.join(''), subParser);\n    }\n    BNF.Transform = Transform;\n    class Parser extends Parser_1.Parser {\n        constructor(source, options) {\n            const subParser = options && options.debugRulesParser === true ? new Parser_1.Parser(BNF.RULES, { debug: true }) : BNF.defaultParser;\n            super(getRules(source, subParser), options);\n        }\n        emitSource() {\n            return emit(this);\n        }\n    }\n    BNF.Parser = Parser;\n})(BNF || (BNF = {}));\nexports.A = BNF;\n//# sourceMappingURL=W3CEBNF.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6782\n")},7853:(module,__unused_webpack_exports,__webpack_require__)=>{eval("/* module decorator */ module = __webpack_require__.nmd(module);\n(function(module) {\n    'use strict';\n\n    module.exports.is_uri = is_iri;\n    module.exports.is_http_uri = is_http_iri;\n    module.exports.is_https_uri = is_https_iri;\n    module.exports.is_web_uri = is_web_iri;\n    // Create aliases\n    module.exports.isUri = is_iri;\n    module.exports.isHttpUri = is_http_iri;\n    module.exports.isHttpsUri = is_https_iri;\n    module.exports.isWebUri = is_web_iri;\n\n\n    // private function\n    // internal URI spitter method - direct from RFC 3986\n    var splitUri = function(uri) {\n        var splitted = uri.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n        return splitted;\n    };\n\n    function is_iri(value) {\n        if (!value) {\n            return;\n        }\n\n        // check for illegal characters\n        if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return;\n\n        // check for hex escapes that aren't complete\n        if (/%[^0-9a-f]/i.test(value)) return;\n        if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\n\n        var splitted = [];\n        var scheme = '';\n        var authority = '';\n        var path = '';\n        var query = '';\n        var fragment = '';\n        var out = '';\n\n        // from RFC 3986\n        splitted = splitUri(value);\n        scheme = splitted[1]; \n        authority = splitted[2];\n        path = splitted[3];\n        query = splitted[4];\n        fragment = splitted[5];\n\n        // scheme and path are required, though the path can be empty\n        if (!(scheme && scheme.length && path.length >= 0)) return;\n\n        // if authority is present, the path must be empty or begin with a /\n        if (authority && authority.length) {\n            if (!(path.length === 0 || /^\\//.test(path))) return;\n        } else {\n            // if authority is not present, the path must not start with //\n            if (/^\\/\\//.test(path)) return;\n        }\n\n        // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n        if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase()))  return;\n\n        // re-assemble the URL per section 5.3 in RFC 3986\n        out += scheme + ':';\n        if (authority && authority.length) {\n            out += '//' + authority;\n        }\n\n        out += path;\n\n        if (query && query.length) {\n            out += '?' + query;\n        }\n\n        if (fragment && fragment.length) {\n            out += '#' + fragment;\n        }\n\n        return out;\n    }\n\n    function is_http_iri(value, allowHttps) {\n        if (!is_iri(value)) {\n            return;\n        }\n\n        var splitted = [];\n        var scheme = '';\n        var authority = '';\n        var path = '';\n        var port = '';\n        var query = '';\n        var fragment = '';\n        var out = '';\n\n        // from RFC 3986\n        splitted = splitUri(value);\n        scheme = splitted[1]; \n        authority = splitted[2];\n        path = splitted[3];\n        query = splitted[4];\n        fragment = splitted[5];\n\n        if (!scheme)  return;\n\n        if(allowHttps) {\n            if (scheme.toLowerCase() != 'https') return;\n        } else {\n            if (scheme.toLowerCase() != 'http') return;\n        }\n\n        // fully-qualified URIs must have an authority section that is\n        // a valid host\n        if (!authority) {\n            return;\n        }\n\n        // enable port component\n        if (/:(\\d+)$/.test(authority)) {\n            port = authority.match(/:(\\d+)$/)[0];\n            authority = authority.replace(/:\\d+$/, '');\n        }\n\n        out += scheme + ':';\n        out += '//' + authority;\n        \n        if (port) {\n            out += port;\n        }\n        \n        out += path;\n        \n        if(query && query.length){\n            out += '?' + query;\n        }\n\n        if(fragment && fragment.length){\n            out += '#' + fragment;\n        }\n        \n        return out;\n    }\n\n    function is_https_iri(value) {\n        return is_http_iri(value, true);\n    }\n\n    function is_web_iri(value) {\n        return (is_http_iri(value) || is_https_iri(value));\n    }\n\n})(module);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg1My5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVEQUF1RDs7QUFFdkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BzYXAvY3NuLWludGVyb3AtcmVuZGVyZXItd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy92YWxpZC11cmwvaW5kZXguanM/MWJlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgbW9kdWxlLmV4cG9ydHMuaXNfdXJpID0gaXNfaXJpO1xuICAgIG1vZHVsZS5leHBvcnRzLmlzX2h0dHBfdXJpID0gaXNfaHR0cF9pcmk7XG4gICAgbW9kdWxlLmV4cG9ydHMuaXNfaHR0cHNfdXJpID0gaXNfaHR0cHNfaXJpO1xuICAgIG1vZHVsZS5leHBvcnRzLmlzX3dlYl91cmkgPSBpc193ZWJfaXJpO1xuICAgIC8vIENyZWF0ZSBhbGlhc2VzXG4gICAgbW9kdWxlLmV4cG9ydHMuaXNVcmkgPSBpc19pcmk7XG4gICAgbW9kdWxlLmV4cG9ydHMuaXNIdHRwVXJpID0gaXNfaHR0cF9pcmk7XG4gICAgbW9kdWxlLmV4cG9ydHMuaXNIdHRwc1VyaSA9IGlzX2h0dHBzX2lyaTtcbiAgICBtb2R1bGUuZXhwb3J0cy5pc1dlYlVyaSA9IGlzX3dlYl9pcmk7XG5cblxuICAgIC8vIHByaXZhdGUgZnVuY3Rpb25cbiAgICAvLyBpbnRlcm5hbCBVUkkgc3BpdHRlciBtZXRob2QgLSBkaXJlY3QgZnJvbSBSRkMgMzk4NlxuICAgIHZhciBzcGxpdFVyaSA9IGZ1bmN0aW9uKHVyaSkge1xuICAgICAgICB2YXIgc3BsaXR0ZWQgPSB1cmkubWF0Y2goLyg/OihbXjpcXC8/I10rKTopPyg/OlxcL1xcLyhbXlxcLz8jXSopKT8oW14/I10qKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8vKTtcbiAgICAgICAgcmV0dXJuIHNwbGl0dGVkO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpc19pcmkodmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIGlsbGVnYWwgY2hhcmFjdGVyc1xuICAgICAgICBpZiAoL1teYS16MC05XFw6XFwvXFw/XFwjXFxbXFxdXFxAXFwhXFwkXFwmXFwnXFwoXFwpXFwqXFwrXFwsXFw7XFw9XFwuXFwtXFxfXFx+XFwlXS9pLnRlc3QodmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIGhleCBlc2NhcGVzIHRoYXQgYXJlbid0IGNvbXBsZXRlXG4gICAgICAgIGlmICgvJVteMC05YS1mXS9pLnRlc3QodmFsdWUpKSByZXR1cm47XG4gICAgICAgIGlmICgvJVswLTlhLWZdKDo/W14wLTlhLWZdfCQpL2kudGVzdCh2YWx1ZSkpIHJldHVybjtcblxuICAgICAgICB2YXIgc3BsaXR0ZWQgPSBbXTtcbiAgICAgICAgdmFyIHNjaGVtZSA9ICcnO1xuICAgICAgICB2YXIgYXV0aG9yaXR5ID0gJyc7XG4gICAgICAgIHZhciBwYXRoID0gJyc7XG4gICAgICAgIHZhciBxdWVyeSA9ICcnO1xuICAgICAgICB2YXIgZnJhZ21lbnQgPSAnJztcbiAgICAgICAgdmFyIG91dCA9ICcnO1xuXG4gICAgICAgIC8vIGZyb20gUkZDIDM5ODZcbiAgICAgICAgc3BsaXR0ZWQgPSBzcGxpdFVyaSh2YWx1ZSk7XG4gICAgICAgIHNjaGVtZSA9IHNwbGl0dGVkWzFdOyBcbiAgICAgICAgYXV0aG9yaXR5ID0gc3BsaXR0ZWRbMl07XG4gICAgICAgIHBhdGggPSBzcGxpdHRlZFszXTtcbiAgICAgICAgcXVlcnkgPSBzcGxpdHRlZFs0XTtcbiAgICAgICAgZnJhZ21lbnQgPSBzcGxpdHRlZFs1XTtcblxuICAgICAgICAvLyBzY2hlbWUgYW5kIHBhdGggYXJlIHJlcXVpcmVkLCB0aG91Z2ggdGhlIHBhdGggY2FuIGJlIGVtcHR5XG4gICAgICAgIGlmICghKHNjaGVtZSAmJiBzY2hlbWUubGVuZ3RoICYmIHBhdGgubGVuZ3RoID49IDApKSByZXR1cm47XG5cbiAgICAgICAgLy8gaWYgYXV0aG9yaXR5IGlzIHByZXNlbnQsIHRoZSBwYXRoIG11c3QgYmUgZW1wdHkgb3IgYmVnaW4gd2l0aCBhIC9cbiAgICAgICAgaWYgKGF1dGhvcml0eSAmJiBhdXRob3JpdHkubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoIShwYXRoLmxlbmd0aCA9PT0gMCB8fCAvXlxcLy8udGVzdChwYXRoKSkpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIGF1dGhvcml0eSBpcyBub3QgcHJlc2VudCwgdGhlIHBhdGggbXVzdCBub3Qgc3RhcnQgd2l0aCAvL1xuICAgICAgICAgICAgaWYgKC9eXFwvXFwvLy50ZXN0KHBhdGgpKSByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzY2hlbWUgbXVzdCBiZWdpbiB3aXRoIGEgbGV0dGVyLCB0aGVuIGNvbnNpc3Qgb2YgbGV0dGVycywgZGlnaXRzLCArLCAuLCBvciAtXG4gICAgICAgIGlmICghL15bYS16XVthLXowLTlcXCtcXC1cXC5dKiQvLnRlc3Qoc2NoZW1lLnRvTG93ZXJDYXNlKCkpKSAgcmV0dXJuO1xuXG4gICAgICAgIC8vIHJlLWFzc2VtYmxlIHRoZSBVUkwgcGVyIHNlY3Rpb24gNS4zIGluIFJGQyAzOTg2XG4gICAgICAgIG91dCArPSBzY2hlbWUgKyAnOic7XG4gICAgICAgIGlmIChhdXRob3JpdHkgJiYgYXV0aG9yaXR5Lmxlbmd0aCkge1xuICAgICAgICAgICAgb3V0ICs9ICcvLycgKyBhdXRob3JpdHk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXQgKz0gcGF0aDtcblxuICAgICAgICBpZiAocXVlcnkgJiYgcXVlcnkubGVuZ3RoKSB7XG4gICAgICAgICAgICBvdXQgKz0gJz8nICsgcXVlcnk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhZ21lbnQgJiYgZnJhZ21lbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICBvdXQgKz0gJyMnICsgZnJhZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzX2h0dHBfaXJpKHZhbHVlLCBhbGxvd0h0dHBzKSB7XG4gICAgICAgIGlmICghaXNfaXJpKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNwbGl0dGVkID0gW107XG4gICAgICAgIHZhciBzY2hlbWUgPSAnJztcbiAgICAgICAgdmFyIGF1dGhvcml0eSA9ICcnO1xuICAgICAgICB2YXIgcGF0aCA9ICcnO1xuICAgICAgICB2YXIgcG9ydCA9ICcnO1xuICAgICAgICB2YXIgcXVlcnkgPSAnJztcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gJyc7XG4gICAgICAgIHZhciBvdXQgPSAnJztcblxuICAgICAgICAvLyBmcm9tIFJGQyAzOTg2XG4gICAgICAgIHNwbGl0dGVkID0gc3BsaXRVcmkodmFsdWUpO1xuICAgICAgICBzY2hlbWUgPSBzcGxpdHRlZFsxXTsgXG4gICAgICAgIGF1dGhvcml0eSA9IHNwbGl0dGVkWzJdO1xuICAgICAgICBwYXRoID0gc3BsaXR0ZWRbM107XG4gICAgICAgIHF1ZXJ5ID0gc3BsaXR0ZWRbNF07XG4gICAgICAgIGZyYWdtZW50ID0gc3BsaXR0ZWRbNV07XG5cbiAgICAgICAgaWYgKCFzY2hlbWUpICByZXR1cm47XG5cbiAgICAgICAgaWYoYWxsb3dIdHRwcykge1xuICAgICAgICAgICAgaWYgKHNjaGVtZS50b0xvd2VyQ2FzZSgpICE9ICdodHRwcycpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzY2hlbWUudG9Mb3dlckNhc2UoKSAhPSAnaHR0cCcpIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZ1bGx5LXF1YWxpZmllZCBVUklzIG11c3QgaGF2ZSBhbiBhdXRob3JpdHkgc2VjdGlvbiB0aGF0IGlzXG4gICAgICAgIC8vIGEgdmFsaWQgaG9zdFxuICAgICAgICBpZiAoIWF1dGhvcml0eSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5hYmxlIHBvcnQgY29tcG9uZW50XG4gICAgICAgIGlmICgvOihcXGQrKSQvLnRlc3QoYXV0aG9yaXR5KSkge1xuICAgICAgICAgICAgcG9ydCA9IGF1dGhvcml0eS5tYXRjaCgvOihcXGQrKSQvKVswXTtcbiAgICAgICAgICAgIGF1dGhvcml0eSA9IGF1dGhvcml0eS5yZXBsYWNlKC86XFxkKyQvLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXQgKz0gc2NoZW1lICsgJzonO1xuICAgICAgICBvdXQgKz0gJy8vJyArIGF1dGhvcml0eTtcbiAgICAgICAgXG4gICAgICAgIGlmIChwb3J0KSB7XG4gICAgICAgICAgICBvdXQgKz0gcG9ydDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgb3V0ICs9IHBhdGg7XG4gICAgICAgIFxuICAgICAgICBpZihxdWVyeSAmJiBxdWVyeS5sZW5ndGgpe1xuICAgICAgICAgICAgb3V0ICs9ICc/JyArIHF1ZXJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoZnJhZ21lbnQgJiYgZnJhZ21lbnQubGVuZ3RoKXtcbiAgICAgICAgICAgIG91dCArPSAnIycgKyBmcmFnbWVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc19odHRwc19pcmkodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzX2h0dHBfaXJpKHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc193ZWJfaXJpKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoaXNfaHR0cF9pcmkodmFsdWUpIHx8IGlzX2h0dHBzX2lyaSh2YWx1ZSkpO1xuICAgIH1cblxufSkobW9kdWxlKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7853\n")},8506:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.canonicalize = exports.canonicalize_quoted_string = exports.normalize = exports.normalize_dot_string = exports.parse = void 0;\n// const punycode = require(\'punycode\');\nconst nearley = __webpack_require__(8515);\nconst grammar_1 = __importDefault(__webpack_require__(2084));\ngrammar_1.default.ParserStart = "Mailbox";\nconst grammar = nearley.Grammar.fromCompiled(grammar_1.default);\n// <https://tools.ietf.org/html/rfc5321#section-4.1.2>\nfunction parse(address) {\n    const parser = new nearley.Parser(grammar);\n    parser.feed(address);\n    if (parser.results.length !== 1) {\n        throw new Error("address parsing failed: ambiguous grammar");\n    }\n    return parser.results[0];\n}\nexports.parse = parse;\n/** Strip +something, strip \'.\'s, and map to lower case.\n */\nfunction normalize_dot_string(dot_string) {\n    const tagless = (function () {\n        const plus_loc = dot_string.indexOf("+");\n        if (plus_loc === -1) {\n            return dot_string;\n        }\n        return dot_string.substr(0, plus_loc);\n    })();\n    const dotless = tagless.replace(/\\./g, "");\n    return dotless.toLowerCase();\n}\nexports.normalize_dot_string = normalize_dot_string;\n/** The G style address normalization.\n */\nfunction normalize(address) {\n    var _a, _b;\n    const a = parse(address);\n    const domain = (_a = a.domainPart.AddressLiteral) !== null && _a !== void 0 ? _a : a.domainPart.DomainName.toLowerCase();\n    const local = (_b = a.localPart.QuotedString) !== null && _b !== void 0 ? _b : normalize_dot_string(a.localPart.DotString);\n    return `${local}@${domain}`;\n}\nexports.normalize = normalize;\nfunction canonicalize_quoted_string(quoted_string) {\n    const unquoted = quoted_string.substr(1).substr(0, quoted_string.length - 2);\n    const unescaped = unquoted.replace(/(?:\\\\(.))/g, "$1");\n    const reescaped = unescaped.replace(/(?:(["\\\\]))/g, "\\\\$1");\n    return `"${reescaped}"`; // re-quote\n}\nexports.canonicalize_quoted_string = canonicalize_quoted_string;\n/**\n * Apply a canonicalization consistent with standards to support\n * comparison as a string.\n */\nfunction canonicalize(address) {\n    var _a;\n    const a = parse(address);\n    const domain = (_a = a.domainPart.AddressLiteral) !== null && _a !== void 0 ? _a : a.domainPart.DomainName.toLowerCase();\n    const local = a.localPart.QuotedString\n        ? canonicalize_quoted_string(a.localPart.QuotedString)\n        : a.localPart.DotString;\n    return `${local}@${domain}`;\n}\nexports.canonicalize = canonicalize;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUwNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLGtDQUFrQyxHQUFHLGlCQUFpQixHQUFHLDRCQUE0QixHQUFHLGFBQWE7QUFDNUg7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyxJQUFTO0FBQ2pDLGtDQUFrQyxtQkFBTyxDQUFDLElBQVc7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxNQUFNLEdBQUcsT0FBTztBQUM5QjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVSxJQUFJO0FBQzdCO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE1BQU0sR0FBRyxPQUFPO0FBQzlCO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNhcC9jc24taW50ZXJvcC1yZW5kZXJlci13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL3NtdHAtYWRkcmVzcy1wYXJzZXIvZGlzdC9saWIvaW5kZXguanM/ZTZiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2Fub25pY2FsaXplID0gZXhwb3J0cy5jYW5vbmljYWxpemVfcXVvdGVkX3N0cmluZyA9IGV4cG9ydHMubm9ybWFsaXplID0gZXhwb3J0cy5ub3JtYWxpemVfZG90X3N0cmluZyA9IGV4cG9ydHMucGFyc2UgPSB2b2lkIDA7XG4vLyBjb25zdCBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG5jb25zdCBuZWFybGV5ID0gcmVxdWlyZShcIm5lYXJsZXlcIik7XG5jb25zdCBncmFtbWFyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZ3JhbW1hclwiKSk7XG5ncmFtbWFyXzEuZGVmYXVsdC5QYXJzZXJTdGFydCA9IFwiTWFpbGJveFwiO1xuY29uc3QgZ3JhbW1hciA9IG5lYXJsZXkuR3JhbW1hci5mcm9tQ29tcGlsZWQoZ3JhbW1hcl8xLmRlZmF1bHQpO1xuLy8gPGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM1MzIxI3NlY3Rpb24tNC4xLjI+XG5mdW5jdGlvbiBwYXJzZShhZGRyZXNzKSB7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IG5lYXJsZXkuUGFyc2VyKGdyYW1tYXIpO1xuICAgIHBhcnNlci5mZWVkKGFkZHJlc3MpO1xuICAgIGlmIChwYXJzZXIucmVzdWx0cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWRkcmVzcyBwYXJzaW5nIGZhaWxlZDogYW1iaWd1b3VzIGdyYW1tYXJcIik7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZXIucmVzdWx0c1swXTtcbn1cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbi8qKiBTdHJpcCArc29tZXRoaW5nLCBzdHJpcCAnLidzLCBhbmQgbWFwIHRvIGxvd2VyIGNhc2UuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZV9kb3Rfc3RyaW5nKGRvdF9zdHJpbmcpIHtcbiAgICBjb25zdCB0YWdsZXNzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgcGx1c19sb2MgPSBkb3Rfc3RyaW5nLmluZGV4T2YoXCIrXCIpO1xuICAgICAgICBpZiAocGx1c19sb2MgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gZG90X3N0cmluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG90X3N0cmluZy5zdWJzdHIoMCwgcGx1c19sb2MpO1xuICAgIH0pKCk7XG4gICAgY29uc3QgZG90bGVzcyA9IHRhZ2xlc3MucmVwbGFjZSgvXFwuL2csIFwiXCIpO1xuICAgIHJldHVybiBkb3RsZXNzLnRvTG93ZXJDYXNlKCk7XG59XG5leHBvcnRzLm5vcm1hbGl6ZV9kb3Rfc3RyaW5nID0gbm9ybWFsaXplX2RvdF9zdHJpbmc7XG4vKiogVGhlIEcgc3R5bGUgYWRkcmVzcyBub3JtYWxpemF0aW9uLlxuICovXG5mdW5jdGlvbiBub3JtYWxpemUoYWRkcmVzcykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgYSA9IHBhcnNlKGFkZHJlc3MpO1xuICAgIGNvbnN0IGRvbWFpbiA9IChfYSA9IGEuZG9tYWluUGFydC5BZGRyZXNzTGl0ZXJhbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogYS5kb21haW5QYXJ0LkRvbWFpbk5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBsb2NhbCA9IChfYiA9IGEubG9jYWxQYXJ0LlF1b3RlZFN0cmluZykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbm9ybWFsaXplX2RvdF9zdHJpbmcoYS5sb2NhbFBhcnQuRG90U3RyaW5nKTtcbiAgICByZXR1cm4gYCR7bG9jYWx9QCR7ZG9tYWlufWA7XG59XG5leHBvcnRzLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZTtcbmZ1bmN0aW9uIGNhbm9uaWNhbGl6ZV9xdW90ZWRfc3RyaW5nKHF1b3RlZF9zdHJpbmcpIHtcbiAgICBjb25zdCB1bnF1b3RlZCA9IHF1b3RlZF9zdHJpbmcuc3Vic3RyKDEpLnN1YnN0cigwLCBxdW90ZWRfc3RyaW5nLmxlbmd0aCAtIDIpO1xuICAgIGNvbnN0IHVuZXNjYXBlZCA9IHVucXVvdGVkLnJlcGxhY2UoLyg/OlxcXFwoLikpL2csIFwiJDFcIik7XG4gICAgY29uc3QgcmVlc2NhcGVkID0gdW5lc2NhcGVkLnJlcGxhY2UoLyg/OihbXCJcXFxcXSkpL2csIFwiXFxcXCQxXCIpO1xuICAgIHJldHVybiBgXCIke3JlZXNjYXBlZH1cImA7IC8vIHJlLXF1b3RlXG59XG5leHBvcnRzLmNhbm9uaWNhbGl6ZV9xdW90ZWRfc3RyaW5nID0gY2Fub25pY2FsaXplX3F1b3RlZF9zdHJpbmc7XG4vKipcbiAqIEFwcGx5IGEgY2Fub25pY2FsaXphdGlvbiBjb25zaXN0ZW50IHdpdGggc3RhbmRhcmRzIHRvIHN1cHBvcnRcbiAqIGNvbXBhcmlzb24gYXMgYSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGNhbm9uaWNhbGl6ZShhZGRyZXNzKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGEgPSBwYXJzZShhZGRyZXNzKTtcbiAgICBjb25zdCBkb21haW4gPSAoX2EgPSBhLmRvbWFpblBhcnQuQWRkcmVzc0xpdGVyYWwpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGEuZG9tYWluUGFydC5Eb21haW5OYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgbG9jYWwgPSBhLmxvY2FsUGFydC5RdW90ZWRTdHJpbmdcbiAgICAgICAgPyBjYW5vbmljYWxpemVfcXVvdGVkX3N0cmluZyhhLmxvY2FsUGFydC5RdW90ZWRTdHJpbmcpXG4gICAgICAgIDogYS5sb2NhbFBhcnQuRG90U3RyaW5nO1xuICAgIHJldHVybiBgJHtsb2NhbH1AJHtkb21haW59YDtcbn1cbmV4cG9ydHMuY2Fub25pY2FsaXplID0gY2Fub25pY2FsaXplO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8506\n')},8515:function(module){eval('(function(root, factory) {\n    if ( true && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\n    function Rule(name, symbols, postprocess) {\n        this.id = ++Rule.highestId;\n        this.name = name;\n        this.symbols = symbols;        // a list of literal | regex class | nonterminal\n        this.postprocess = postprocess;\n        return this;\n    }\n    Rule.highestId = 0;\n\n    Rule.prototype.toString = function(withCursorAt) {\n        var symbolSequence = (typeof withCursorAt === "undefined")\n                             ? this.symbols.map(getSymbolShortDisplay).join(\' \')\n                             : (   this.symbols.slice(0, withCursorAt).map(getSymbolShortDisplay).join(\' \')\n                                 + " \u25cf "\n                                 + this.symbols.slice(withCursorAt).map(getSymbolShortDisplay).join(\' \')     );\n        return this.name + " \u2192 " + symbolSequence;\n    }\n\n\n    // a State is a rule at a position from a given starting point in the input stream (reference)\n    function State(rule, dot, reference, wantedBy) {\n        this.rule = rule;\n        this.dot = dot;\n        this.reference = reference;\n        this.data = [];\n        this.wantedBy = wantedBy;\n        this.isComplete = this.dot === rule.symbols.length;\n    }\n\n    State.prototype.toString = function() {\n        return "{" + this.rule.toString(this.dot) + "}, from: " + (this.reference || 0);\n    };\n\n    State.prototype.nextState = function(child) {\n        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n        state.left = this;\n        state.right = child;\n        if (state.isComplete) {\n            state.data = state.build();\n            // Having right set here will prevent the right state and its children\n            // form being garbage collected\n            state.right = undefined;\n        }\n        return state;\n    };\n\n    State.prototype.build = function() {\n        var children = [];\n        var node = this;\n        do {\n            children.push(node.right.data);\n            node = node.left;\n        } while (node.left);\n        children.reverse();\n        return children;\n    };\n\n    State.prototype.finish = function() {\n        if (this.rule.postprocess) {\n            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n        }\n    };\n\n\n    function Column(grammar, index) {\n        this.grammar = grammar;\n        this.index = index;\n        this.states = [];\n        this.wants = {}; // states indexed by the non-terminal they expect\n        this.scannable = []; // list of states that expect a token\n        this.completed = {}; // states that are nullable\n    }\n\n\n    Column.prototype.process = function(nextColumn) {\n        var states = this.states;\n        var wants = this.wants;\n        var completed = this.completed;\n\n        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n            var state = states[w];\n\n            if (state.isComplete) {\n                state.finish();\n                if (state.data !== Parser.fail) {\n                    // complete\n                    var wantedBy = state.wantedBy;\n                    for (var i = wantedBy.length; i--; ) { // this line is hot\n                        var left = wantedBy[i];\n                        this.complete(left, state);\n                    }\n\n                    // special-case nullables\n                    if (state.reference === this.index) {\n                        // make sure future predictors of this rule get completed.\n                        var exp = state.rule.name;\n                        (this.completed[exp] = this.completed[exp] || []).push(state);\n                    }\n                }\n\n            } else {\n                // queue scannable states\n                var exp = state.rule.symbols[state.dot];\n                if (typeof exp !== \'string\') {\n                    this.scannable.push(state);\n                    continue;\n                }\n\n                // predict\n                if (wants[exp]) {\n                    wants[exp].push(state);\n\n                    if (completed.hasOwnProperty(exp)) {\n                        var nulls = completed[exp];\n                        for (var i = 0; i < nulls.length; i++) {\n                            var right = nulls[i];\n                            this.complete(state, right);\n                        }\n                    }\n                } else {\n                    wants[exp] = [state];\n                    this.predict(exp);\n                }\n            }\n        }\n    }\n\n    Column.prototype.predict = function(exp) {\n        var rules = this.grammar.byName[exp] || [];\n\n        for (var i = 0; i < rules.length; i++) {\n            var r = rules[i];\n            var wantedBy = this.wants[exp];\n            var s = new State(r, 0, this.index, wantedBy);\n            this.states.push(s);\n        }\n    }\n\n    Column.prototype.complete = function(left, right) {\n        var copy = left.nextState(right);\n        this.states.push(copy);\n    }\n\n\n    function Grammar(rules, start) {\n        this.rules = rules;\n        this.start = start || this.rules[0].name;\n        var byName = this.byName = {};\n        this.rules.forEach(function(rule) {\n            if (!byName.hasOwnProperty(rule.name)) {\n                byName[rule.name] = [];\n            }\n            byName[rule.name].push(rule);\n        });\n    }\n\n    // So we can allow passing (rules, start) directly to Parser for backwards compatibility\n    Grammar.fromCompiled = function(rules, start) {\n        var lexer = rules.Lexer;\n        if (rules.ParserStart) {\n          start = rules.ParserStart;\n          rules = rules.ParserRules;\n        }\n        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n        var g = new Grammar(rules, start);\n        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable\n        return g;\n    }\n\n\n    function StreamLexer() {\n      this.reset("");\n    }\n\n    StreamLexer.prototype.reset = function(data, state) {\n        this.buffer = data;\n        this.index = 0;\n        this.line = state ? state.line : 1;\n        this.lastLineBreak = state ? -state.col : 0;\n    }\n\n    StreamLexer.prototype.next = function() {\n        if (this.index < this.buffer.length) {\n            var ch = this.buffer[this.index++];\n            if (ch === \'\\n\') {\n              this.line += 1;\n              this.lastLineBreak = this.index;\n            }\n            return {value: ch};\n        }\n    }\n\n    StreamLexer.prototype.save = function() {\n      return {\n        line: this.line,\n        col: this.index - this.lastLineBreak,\n      }\n    }\n\n    StreamLexer.prototype.formatError = function(token, message) {\n        // nb. this gets called after consuming the offending token,\n        // so the culprit is index-1\n        var buffer = this.buffer;\n        if (typeof buffer === \'string\') {\n            var lines = buffer\n                .split("\\n")\n                .slice(\n                    Math.max(0, this.line - 5), \n                    this.line\n                );\n\n            var nextLineBreak = buffer.indexOf(\'\\n\', this.index);\n            if (nextLineBreak === -1) nextLineBreak = buffer.length;\n            var col = this.index - this.lastLineBreak;\n            var lastLineDigits = String(this.line).length;\n            message += " at line " + this.line + " col " + col + ":\\n\\n";\n            message += lines\n                .map(function(line, i) {\n                    return pad(this.line - lines.length + i + 1, lastLineDigits) + " " + line;\n                }, this)\n                .join("\\n");\n            message += "\\n" + pad("", lastLineDigits + col) + "^\\n";\n            return message;\n        } else {\n            return message + " at index " + (this.index - 1);\n        }\n\n        function pad(n, length) {\n            var s = String(n);\n            return Array(length - s.length + 1).join(" ") + s;\n        }\n    }\n\n    function Parser(rules, start, options) {\n        if (rules instanceof Grammar) {\n            var grammar = rules;\n            var options = start;\n        } else {\n            var grammar = Grammar.fromCompiled(rules, start);\n        }\n        this.grammar = grammar;\n\n        // Read options\n        this.options = {\n            keepHistory: false,\n            lexer: grammar.lexer || new StreamLexer,\n        };\n        for (var key in (options || {})) {\n            this.options[key] = options[key];\n        }\n\n        // Setup lexer\n        this.lexer = this.options.lexer;\n        this.lexerState = undefined;\n\n        // Setup a table\n        var column = new Column(grammar, 0);\n        var table = this.table = [column];\n\n        // I could be expecting anything.\n        column.wants[grammar.start] = [];\n        column.predict(grammar.start);\n        // TODO what if start rule is nullable?\n        column.process();\n        this.current = 0; // token index\n    }\n\n    // create a reserved token for indicating a parse fail\n    Parser.fail = {};\n\n    Parser.prototype.feed = function(chunk) {\n        var lexer = this.lexer;\n        lexer.reset(chunk, this.lexerState);\n\n        var token;\n        while (true) {\n            try {\n                token = lexer.next();\n                if (!token) {\n                    break;\n                }\n            } catch (e) {\n                // Create the next column so that the error reporter\n                // can display the correctly predicted states.\n                var nextColumn = new Column(this.grammar, this.current + 1);\n                this.table.push(nextColumn);\n                var err = new Error(this.reportLexerError(e));\n                err.offset = this.current;\n                err.token = e.token;\n                throw err;\n            }\n            // We add new states to table[current+1]\n            var column = this.table[this.current];\n\n            // GC unused states\n            if (!this.options.keepHistory) {\n                delete this.table[this.current - 1];\n            }\n\n            var n = this.current + 1;\n            var nextColumn = new Column(this.grammar, n);\n            this.table.push(nextColumn);\n\n            // Advance all tokens that expect the symbol\n            var literal = token.text !== undefined ? token.text : token.value;\n            var value = lexer.constructor === StreamLexer ? token.value : token;\n            var scannable = column.scannable;\n            for (var w = scannable.length; w--; ) {\n                var state = scannable[w];\n                var expect = state.rule.symbols[state.dot];\n                // Try to consume the token\n                // either regex or literal\n                if (expect.test ? expect.test(value) :\n                    expect.type ? expect.type === token.type\n                                : expect.literal === literal) {\n                    // Add it\n                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});\n                    nextColumn.states.push(next);\n                }\n            }\n\n            // Next, for each of the rules, we either\n            // (a) complete it, and try to see if the reference row expected that\n            //     rule\n            // (b) predict the next nonterminal it expects by adding that\n            //     nonterminal\'s start state\n            // To prevent duplication, we also keep track of rules we have already\n            // added\n\n            nextColumn.process();\n\n            // If needed, throw an error:\n            if (nextColumn.states.length === 0) {\n                // No states at all! This is not good.\n                var err = new Error(this.reportError(token));\n                err.offset = this.current;\n                err.token = token;\n                throw err;\n            }\n\n            // maybe save lexer state\n            if (this.options.keepHistory) {\n              column.lexerState = lexer.save()\n            }\n\n            this.current++;\n        }\n        if (column) {\n          this.lexerState = lexer.save()\n        }\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n\n        // Allow chaining, for whatever it\'s worth\n        return this;\n    };\n\n    Parser.prototype.reportLexerError = function(lexerError) {\n        var tokenDisplay, lexerMessage;\n        // Planning to add a token property to moo\'s thrown error\n        // even on erroring tokens to be used in error display below\n        var token = lexerError.token;\n        if (token) {\n            tokenDisplay = "input " + JSON.stringify(token.text[0]) + " (lexer error)";\n            lexerMessage = this.lexer.formatError(token, "Syntax error");\n        } else {\n            tokenDisplay = "input (lexer error)";\n            lexerMessage = lexerError.message;\n        }\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportError = function(token) {\n        var tokenDisplay = (token.type ? token.type + " token: " : "") + JSON.stringify(token.value !== undefined ? token.value : token);\n        var lexerMessage = this.lexer.formatError(token, "Syntax error");\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportErrorCommon = function(lexerMessage, tokenDisplay) {\n        var lines = [];\n        lines.push(lexerMessage);\n        var lastColumnIndex = this.table.length - 2;\n        var lastColumn = this.table[lastColumnIndex];\n        var expectantStates = lastColumn.states\n            .filter(function(state) {\n                var nextSymbol = state.rule.symbols[state.dot];\n                return nextSymbol && typeof nextSymbol !== "string";\n            });\n\n        if (expectantStates.length === 0) {\n            lines.push(\'Unexpected \' + tokenDisplay + \'. I did not expect any more input. Here is the state of my parse table:\\n\');\n            this.displayStateStack(lastColumn.states, lines);\n        } else {\n            lines.push(\'Unexpected \' + tokenDisplay + \'. Instead, I was expecting to see one of the following:\\n\');\n            // Display a "state stack" for each expectant state\n            // - which shows you how this state came to be, step by step.\n            // If there is more than one derivation, we only display the first one.\n            var stateStacks = expectantStates\n                .map(function(state) {\n                    return this.buildFirstStateStack(state, []) || [state];\n                }, this);\n            // Display each state that is expecting a terminal symbol next.\n            stateStacks.forEach(function(stateStack) {\n                var state = stateStack[0];\n                var nextSymbol = state.rule.symbols[state.dot];\n                var symbolDisplay = this.getSymbolDisplay(nextSymbol);\n                lines.push(\'A \' + symbolDisplay + \' based on:\');\n                this.displayStateStack(stateStack, lines);\n            }, this);\n        }\n        lines.push("");\n        return lines.join("\\n");\n    }\n    \n    Parser.prototype.displayStateStack = function(stateStack, lines) {\n        var lastDisplay;\n        var sameDisplayCount = 0;\n        for (var j = 0; j < stateStack.length; j++) {\n            var state = stateStack[j];\n            var display = state.rule.toString(state.dot);\n            if (display === lastDisplay) {\n                sameDisplayCount++;\n            } else {\n                if (sameDisplayCount > 0) {\n                    lines.push(\'    ^ \' + sameDisplayCount + \' more lines identical to this\');\n                }\n                sameDisplayCount = 0;\n                lines.push(\'    \' + display);\n            }\n            lastDisplay = display;\n        }\n    };\n\n    Parser.prototype.getSymbolDisplay = function(symbol) {\n        return getSymbolLongDisplay(symbol);\n    };\n\n    /*\n    Builds a the first state stack. You can think of a state stack as the call stack\n    of the recursive-descent parser which the Nearley parse algorithm simulates.\n    A state stack is represented as an array of state objects. Within a\n    state stack, the first item of the array will be the starting\n    state, with each successive item in the array going further back into history.\n\n    This function needs to be given a starting state and an empty array representing\n    the visited states, and it returns an single state stack.\n\n    */\n    Parser.prototype.buildFirstStateStack = function(state, visited) {\n        if (visited.indexOf(state) !== -1) {\n            // Found cycle, return null\n            // to eliminate this path from the results, because\n            // we don\'t know how to display it meaningfully\n            return null;\n        }\n        if (state.wantedBy.length === 0) {\n            return [state];\n        }\n        var prevState = state.wantedBy[0];\n        var childVisited = [state].concat(visited);\n        var childResult = this.buildFirstStateStack(prevState, childVisited);\n        if (childResult === null) {\n            return null;\n        }\n        return [state].concat(childResult);\n    };\n\n    Parser.prototype.save = function() {\n        var column = this.table[this.current];\n        column.lexerState = this.lexerState;\n        return column;\n    };\n\n    Parser.prototype.restore = function(column) {\n        var index = column.index;\n        this.current = index;\n        this.table[index] = column;\n        this.table.splice(index + 1);\n        this.lexerState = column.lexerState;\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n    };\n\n    // nb. deprecated: use save/restore instead!\n    Parser.prototype.rewind = function(index) {\n        if (!this.options.keepHistory) {\n            throw new Error(\'set option `keepHistory` to enable rewinding\')\n        }\n        // nb. recall column (table) indicies fall between token indicies.\n        //        col 0   --   token 0   --   col 1\n        this.restore(this.table[index]);\n    };\n\n    Parser.prototype.finish = function() {\n        // Return the possible parsings\n        var considerations = [];\n        var start = this.grammar.start;\n        var column = this.table[this.table.length - 1]\n        column.states.forEach(function (t) {\n            if (t.rule.name === start\n                    && t.dot === t.rule.symbols.length\n                    && t.reference === 0\n                    && t.data !== Parser.fail) {\n                considerations.push(t);\n            }\n        });\n        return considerations.map(function(c) {return c.data; });\n    };\n\n    function getSymbolLongDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === "string") {\n            return symbol;\n        } else if (type === "object") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return \'character matching \' + symbol;\n            } else if (symbol.type) {\n                return symbol.type + \' token\';\n            } else if (symbol.test) {\n                return \'token matching \' + String(symbol.test);\n            } else {\n                throw new Error(\'Unknown symbol type: \' + symbol);\n            }\n        }\n    }\n\n    function getSymbolShortDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === "string") {\n            return symbol;\n        } else if (type === "object") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return symbol.toString();\n            } else if (symbol.type) {\n                return \'%\' + symbol.type;\n            } else if (symbol.test) {\n                return \'<\' + String(symbol.test) + \'>\';\n            } else {\n                throw new Error(\'Unknown symbol type: \' + symbol);\n            }\n        }\n    }\n\n    return {\n        Parser: Parser,\n        Grammar: Grammar,\n        Rule: Rule,\n    };\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8515\n')}}]);